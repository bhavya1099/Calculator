# ********RoostGPT********

# Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# ROOST_METHOD_HASH=75858e9c6c
# ROOST_METHOD_SIG_HASH=ea14a43624
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: Finnhub API Testing',
#   background: null,
#   rule: null,
#   scenario: {
#     title: 'Scenario: Get Social Sentiment',
#     steps: 'Given the Finnhub API base URL is "https://finnhub.io/api/v1"\n' +
#       'When I send a GET request to "/stock/social-sentiment?symbol=AAPL"\n' +
#       'Then the response status code should be 200\n' +
#       'And the response should contain social sentiment data',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: Finnhub API Testing

Background:
  * def finnhub_URL = karate.properties['FINNHUB_URL'] || karate.get('FINNHUB_URL', 'http://localhost:4010')  
  * def finnhub_AUTH_TOKEN = karate.properties['FINNHUB_AUTH_TOKEN'] || karate.get('FINNHUB_AUTH_TOKEN', 'http://localhost:4010')  

  * url finnhub_URL
  * def validSymbol = 'AAPL' # Valid symbol for testing

Scenario: Get Social Sentiment
  # Setup API endpoint and auth token
  Given path '/stock/social-sentiment'
  * def params = {'symbol': validSymbol, 'token': finnhub_AUTH_TOKEN}
  And params params

  # Make the API request
  When method get

  # Verify response status and contents
  Then status 200

  # Validate response fields
  * def expected_fields = ['symbol', 'data']
  * match response contains only expected_fields
  * match response.symbol == validSymbol

  # Validate data fields
  * def data_fields = ['mention', 'positiveMention', 'negativeMention', 'positiveScore', 'negativeScore', 'score', 'atTime']
  * match each response.data contains data_fields

  # Check field values
  * match each response.data[*].mention contains '#(^\\d*$)'
  * match each response.data[*].positiveMention contains '#(^\\d*$)'
  * match each response.data[*].negativeMention contains '#(^\\d*$)'
  * match each response.data[*].positiveScore contains '#(^\\d+(\\.\\d+)?$)'
  * match each response.data[*].negativeScore contains '#(^\\d+(\\.\\d+)?$)'
  * match each response.data[*].score contains '#(^\\d+(\\.\\d+)?$)'
  * match each response.data[*].atTime !~ '__ignore__' # Expect the field atTime to exist

  # Check invalid token behaviour
  * def invalidParams = {'symbol': validSymbol, 'token': 'INVALID-TOKEN'}
  And params invalidParams

  When method get
  Then status != 200
