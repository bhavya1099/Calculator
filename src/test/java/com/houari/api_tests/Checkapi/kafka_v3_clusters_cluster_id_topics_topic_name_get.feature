# ********RoostGPT********

# Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 
# 
# Feature file generated for /kafka/v3/clusters/{cluster_id}/topics/{topic_name}_get for http method type GET 
# RoostTestHash=dc56f44070
# 
# 

# ********RoostGPT********
Feature: Testing the Kafka Topic API Endpoint

  Background:
    * def urlBase = karate.properties['UIOP_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['UIOP_AUTH_TOKEN']) }

  Scenario Outline: Verify GET Kafka Topic with different authorization and include_authorized_operations parameter
    Given path '<cluster_id>', 'topics', '<topic_name>'
    And param include_authorized_operations = <include_authorized_operations>
    When method get
    Then status <expected_status>
    And match response == <expected_response>

    Examples:
      | cluster_id  | topic_name | include_authorized_operations | expected_status | expected_response                                                     |
      | 'cluster-1' | 'topic-1'  | true                          |             200 | """{
                                                                                      kind: 'KafkaTopic',
                                                                                      metadata: {
                                                                                        self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1',
                                                                                        resource_name: 'crn:///kafka=cluster-1/topic=topic-1'
                                                                                      },
                                                                                      cluster_id: 'cluster-1',
                                                                                      topic_name: 'topic-1',
                                                                                      is_internal: false,
                                                                                      replication_factor: 3,
                                                                                      partitions_count: 1,
                                                                                      partitions: {
                                                                                        related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions'
                                                                                      },
                                                                                      configs: {
                                                                                        related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs'
                                                                                      },
                                                                                      partition_reassignments: {
                                                                                        related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments'
                                                                                      }
                                                                                    }""" |
      | 'cluster-1' | 'topic-1'  | false                         |             200 | """{
                                                                                      kind: 'KafkaTopic',
                                                                                      metadata: {
                                                                                        self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1',
                                                                                        resource_name: 'crn:///kafka=cluster-1/topic=topic-1'
                                                                                      },
                                                                                      cluster_id: 'cluster-1',
                                                                                      topic_name: 'topic-1',
                                                                                      is_internal: false,
                                                                                      replication_factor: 3,
                                                                                      partitions_count: 1
                                                                                    }"""

  Scenario: Testing GET Kafka Topic for non-existing topic results in 404 status
    Given path 'cluster-1', 'topics', 'non-existing-topic'
    When method get
    Then status 404
    And match response == """{ error_code: 40403, message: 'This server does not host this topic-partition.' }"""

  Scenario: Testing GET Kafka Topic without authentication results in 401 status
    * configure headers = {}
    Given path 'cluster-1', 'topics', 'topic-1'
    When method get
    Then status 401
    And match response == """{ id: '#string', status: '401', code: '40101', title: '#string', detail: 'Authentication failed' }"""

  Scenario: Testing GET Kafka Topic when exceeding rate limit
    Given path 'cluster-1', 'topics', 'topic-1'
    When method get
    Then status 429
    And match response contains 'Too Many Requests'
