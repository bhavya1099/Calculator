# ********RoostGPT********

# Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 
# 
# Feature file generated for /kafka/v3/clusters/{cluster_id}/topics/{topic_name}/records_post for http method type POST 
# RoostTestHash=5f512b4001
# 
# 

# ********RoostGPT********
Feature: Produce Records to Kafka topic

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase

  Scenario Outline: Produce valid records to a Kafka topic
    Given path 'kafka/v3/clusters/', <cluster_id>, '/topics/', <topic_name>, '/records'
    And header Authorization = 'Bearer ' + karate.properties['AUTH_TOKEN']
    And request
      """
      <body>
      """
    When method post
    Then status 200
    And match response ==
      """
      <expected_response>
      """

    Examples:
      | read('kafka_v3_clusters_cluster_id_topics_topic_name_records_post.csv') |

  Scenario Outline: Produce records with unsupported data type
    Given path 'kafka/v3/clusters/', <cluster_id>, '/topics/', <topic_name>, '/records'
    And header Authorization = 'Bearer ' + karate.properties['AUTH_TOKEN']
    And request
      """
      <body>
      """
    When method post
    Then status 415
    And match response ==
      """
      <expected_response>
      """

    Examples:
      | cluster_id  | topic_name | body                                                                                                                              | expected_response                                                  |
      | 'cluster-1' | 'topic-1'  | { "partition_id": 0, "headers": [{"name": "Header-1", "value": "value1"}], "value": {"type": "XML", "data": "<data>123</data>"} } | { "error_code": 415, "message": "HTTP 415 Unsupported Media Type"} |

  Scenario Outline: Produce records with bad request body
    Given path 'kafka/v3/clusters/', <cluster_id>, '/topics/', <topic_name>, '/records'
    And header Authorization = 'Bearer ' + karate.properties['AUTH_TOKEN']
    And request
      """
      <body>
      """
    When method post
    Then status 400
    And match response ==
      """
      <expected_response>
      """

    Examples:
      | cluster_id  | topic_name | body                                                                                                                           | expected_response                                                               |
      | 'cluster-1' | 'topic-1'  | { "partition_id": 0, "headers": [{"name": "Header-1", "value": "value1"}], "value": {"type": "BINARY", "data": "not_base64"} } | { "error_code": 400, "message": "Bad Request: data=1 is not a base64 string." } |
