# ********RoostGPT********

# Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 
# 
# Feature file generated for /kafka/v3/clusters/{cluster_id}/topics_post for http method type POST 
# RoostTestHash=783e9d2ab5
# 
# 

# ********RoostGPT********
Feature: Kafka Topic Management

  Background:
    * def urlBase = karate.properties['UIOP_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['UIOP_AUTH_TOKEN']) }

  Scenario: Validate creation of Kafka topic with full details
    Given path '/kafka/v3/clusters/', '<cluster_id>', '/topics'
    And request
      """
      {
        "topic_name": "<topic_name>",
        "partitions_count": #(<partitions_count>),
        "replication_factor": #(<replication_factor>),
        "configs": #(<configs>)
      }
      """
    When method post
    Then status 201
    And match response ==
      """
      {
        "kind": "#string",
        "metadata": {
          "self": "#string",
          "resource_name": "#string"
        },
        "cluster_id": "<cluster_id>",
        "topic_name": "<topic_name>",
        "is_internal": "#boolean",
        "replication_factor": #(<replication_factor>),
        "partitions_count": #(<partitions_count>),
        "partitions": {
          "related": "#string"
        },
        "configs": {
          "related": "#string"
        },
        "partition_reassignments": {
          "related": "#string"
        }
      }
      """
    And assert response.metadata.self contains '/kafka/v3/clusters/cluster-1/topics/topic-X'
    And assert response.configs.related contains '/configs'
    And assert response.partitions.related contains '/partitions'

  Scenario Outline: Validate creation of Kafka topic by dry run
    Given path '/kafka/v3/clusters/', '<cluster_id>', '/topics'
    And request
      """
      {
        "topic_name": "<topic_name>",
        "partitions_count": #(<partitions_count>),
        "replication_factor": #(<replication_factor>),
        "validate_only": true
      }
      """
    When method post
    Then status 200
    And match response ==
      """
      {
        "kind": "#string",
        "metadata": {
          "self": "#string",
          "resource_name": "#string"
        },
        "cluster_id": "<cluster_id>",
        "topic_name": "<topic_name>",
        "is_internal": "#boolean",
        "replication_factor": #(<replication_factor>),
        "partitions_count": #(<partitions_count>),
        "partitions": {
          "related": "#string"
        },
        "configs": {
          "related": "#string"
        },
        "partition_reassignments": {
          "related": "#string"
        }
      }
      """
    And assert response.metadata.self contains '/kafka/v3/clusters/cluster-1/topics/topic-X'
    And assert response.configs.related contains '/configs'
    And assert response.partitions.related contains '/partitions'

    Examples:
      | read('kafka_v3_clusters_cluster_id_topics_post.csv') |

  Scenario Outline: Ensure error responses are correctly handled when creating topics
    Given path '/kafka/v3/clusters/', '<cluster_id>', '/topics'
    And request
      """
      {
        "topic_name": "<topic_name>",
        "partitions_count": 64,
        "replication_factor": 10,
        "validate_only": true
      }
      """
    When method post
    Then status 400
    And match response ==
      """
      {
        "id": "#string",
        "status": "#string",
        "code": "#string",
        "title": "#string",
        "detail": "#string"
      }
      """

    Examples:
      | cluster_id  | topic_name               |
      | 'cluster-1' | 'existing_topic'         |
      | 'cluster-1' | 'topic_rep_factor_large' |
