# ********RoostGPT********

# Test generated by RoostGPT for test karate-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# ROOST_METHOD_HASH=dc03be64e0
# ROOST_METHOD_SIG_HASH=3c477b173d
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: Check broadband service availability and selection',
#   background: 'Background: \n' +
#     '    Given a customer base where each customer has a unique subscriber ID',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Customer checks broadband availability for an address',
#     steps: 'Given "John Doe" has a subscriber ID "SVTL001"\n' +
#       'And he wants to check broadband availability for address "14393"\n' +
#       'When John sends a request to check availability\n' +
#       'Then the system should validate the address\n' +
#       'And fetch the broadband availability\n' +
#       'And return a list of available broadband packages',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: Check broadband service availability and selection

  Background:
    * url RESOURCEPOOLMANAGEMENT_DB0413CB31_URL
    And def RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN = karate.properties['RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN'] || karate.get('RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN', 'Bearer_Dummy_Token')
    And header Authorization = RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN

  Scenario: Customer checks broadband availability for an address
# Given "John Doe" has a subscriber ID "SVTL001"
    Given path '/availabilityCheck'
    And def requestBody = { "subscriberId": "SVTL001", "name": "John Doe", "address": 14393 }
# When John sends a request to check availability
    When method post requestBody
# Then the system should validate the address
    Then match response.address == 14393
# fetch the broadband availability
    And match response.type in ['S', 'T', 'E']
# return a list of available broadband packages
    And match response.resource.resource.maxBandwidth contains only [100, 200, 400, 500, 1000]
    And match response.resource.resource.availabilityType contains only [1, 2, 3]
    And match response.resource.resource.availabilityCode == 0
    Then assert response.resource.resource.products != null
