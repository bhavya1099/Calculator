# ********RoostGPT********

# Test generated by RoostGPT for test integration-scenarioTab-test using AI Type Open AI and AI Model gpt-4-turbo
# 
# ROOST_METHOD_HASH=dc03be64e0
# ROOST_METHOD_SIG_HASH=3c477b173d
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: Check broadband service availability and selection',
#   background: 'Background: \n' +
#     '    Given a customer base where each customer has a unique subscriber ID',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Customer checks broadband availability for an address',
#     steps: 'Given "John Doe" has a subscriber ID "SVTL001"\n' +
#       'And he wants to check broadband availability for address "14393"\n' +
#       'When John sends a request to check availability\n' +
#       'Then the system should validate the address\n' +
#       'And fetch the broadband availability\n' +
#       'And return a list of available broadband packages',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: Check broadband service availability and selection

  Background:
    * url RESOURCEPOOLMANAGEMENT_DB0413CB31_URL
    * def RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN = karate.properties['RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN'] || karate.get('RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN', 'Bearer_Dummy_Token')

  Scenario: Customer checks broadband availability for an address
    Given path '/availabilityCheck'
    And request
      """
      {
        "customer": "John Doe",
        "address": "14393"
      }
      """
    And header Authorization = RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN
    When method post
    Then status 200
    And match response ==
      """
      {
        "control": {
          "type": "#string",
          "message": "#string",
          "code": "#string"
        },
        "resource": {
          "resource": {
            "inventoryId": "#number",
            "maxBandwidth": "#number",
            "availabilityType": "#number",
            "availabilityCode": "#number",
            "availabilityDescription": "#string",
            "products": "#object"
          }
        }
      }
      """

  Scenario: Invalid customer information leads to 400 Bad Request
    Given path '/availabilityCheck'
    And request
      """
      {
        "customer": "",
        "address": "14393"
      }
      """
    And header Authorization = RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN
    When method post
    Then status 400
    And match response ==
      """
      {
        "type": "#string",
        "message": "#string",
        "code": "#string"
      }
      """

  Scenario: Unauthorized access attempt returns 401 Unauthorized
    Given path '/availabilityCheck'
    And request
      """
      {
        "customer": "John Doe",
        "address": "14393"
      }
      """
    When method post
    Then status 401
    And match response ==
      """
      {
        "type": "#string",
        "message": "#string",
        "code": "#string"
      }
      """

  Scenario: Check response for non-existent address leading to 404 Not Found
    Given path '/availabilityCheck'
    And request
      """
      {
        "customer": "John Doe",
        "address": "99999"
      }
      """
    And header Authorization = RESOURCEPOOLMANAGEMENT_DB0413CB31_AUTH_TOKEN
    When method post
    Then status 404
    And match response ==
      """
      {
        "type": "#string",
        "message": "#string",
        "code": "#string"
      }
      """
