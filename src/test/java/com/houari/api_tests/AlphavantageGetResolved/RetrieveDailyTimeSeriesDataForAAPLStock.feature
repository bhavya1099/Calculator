# ********RoostGPT********

# Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 
# 
# ROOST_METHOD_HASH=e5c184303b
# ROOST_METHOD_SIG_HASH=efef3e7528
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: Test API from Alphavantage.co',
#   background: null,
#   rule: null,
#   scenario: {
#     title: 'Scenario: Retrieve daily time series data for AAPL stock',
#     steps: 'Given the Alpha Vantage API endpoint is "https://www.alphavantage.co/query"\n' +
#       'When I send a GET request with the following parameters:\n' +
#       '      | Parameter | Value                 |\n' +
#       '      | function  | TIME_SERIES_DAILY     |\n' +
#       '      | symbol    | AAPL                  |\n' +
#       '      | apikey    | demo                  |\n' +
#       'Then the response status code should be 200\n' +
#       'And the response should contain "Meta Data" with the following information:\n' +
#       '      | Field           | Value                                             |\n' +
#       '      | 1. Information  | Daily Prices (open, high, low, close) and Volumes |\n' +
#       '      | 2. Symbol       | AAPL                                              |\n' +
#       '      | 4. Output Size  | Compact                                           |\n' +
#       '      | 5. Time Zone    | US/Eastern                                        |\n' +
#       'And the response should contain "Time Series (Daily)" data\n' +
#       'And each day in the time series should have the following fields:\n' +
#       '      | Field     |\n' +
#       '      | 1. open   |\n' +
#       '      | 2. high   |\n' +
#       '      | 3. low    |\n' +
#       '      | 4. close  |\n' +
#       '      | 5. volume |',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: Test API from Alphavantage.co

  Scenario: Retrieve daily time series data for AAPL stock
    * url karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    And path '/query'
    And param function = 'TIME_SERIES_DAILY'
    And param symbol = 'AAPL'
    And param apikey = 'demo'
    When method GET
    Then status 200
    And match response['Meta Data'] contains
      """
      {
        "1. Information": "Daily Prices (open, high, low, close) and Volumes",
        "2. Symbol": "AAPL",
        "4. Output Size": "Compact",
        "5. Time Zone": "US/Eastern"
      }
      """
    And match response contains { "Time Series (Daily)": "#present" }

  Scenario: Validate time series data structure and types
    * def timeSeries = response['Time Series (Daily)']
    * def validateDayData =
      """
      function(day) {
        var requiredFields = ['1. open', '2. high', '3. low', '4. close', '5. volume'];
        for (var i = 0; i < requiredFields.length; i++) {
          if (!(requiredFields[i] in day)) {
            return false;
          }
        }
        return true;
      }
      """
    * assert karate.forEach(timeSeries, validateDayData)

  Scenario: Validate data types and non-empty values in time series
    * def validateDataTypes =
      """
      function(day) {
        return day['1. open'] != '' && !isNaN(day['1. open']) &&
               day['2. high'] != '' && !isNaN(day['2. high']) &&
               day['3. low'] != '' && !isNaN(day['3. low']) &&
               day['4. close'] != '' && !isNaN(day['4. close']) &&
               day['5. volume'] != '' && !isNaN(day['5. volume']);
      }
      """
    * assert karate.forEach(timeSeries, validateDataTypes)
