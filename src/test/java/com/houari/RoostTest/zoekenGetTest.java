// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test generated for /kvk/zoeken_get for http method type GET in rest-assured framework

RoostTestHash=2acea70323


*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;

public class ZoekenGetTest {

    private List<Map<String, String>> envList = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        envList = dataloader.loadData("src/test/java/com/houari/RoostTest/zoekenGetTest.csv");
    }

    @Test  
    public void zoekenGet_Test() {
        for (Map<String, String> map : envList) {
            RestAssured.baseURI = map.get("BASE_URL");

            Response response = given()
                .pathParam("kvkNummer", map.get("kvkNummer") != null ? map.get("kvkNummer") : "")
                .pathParam("vestigingsnummer", map.get("vestigingsnummer") != null ? map.get("vestigingsnummer") : "")
                .pathParam("handelsnaam", map.get("handelsnaam") != null ? map.get("handelsnaam") : "")
                .header("Token", map.get("API_KEY"))
                .when()
                .get("/kvk/zoeken")  
                .then() 
                .extract().response();    

            switch (response.statusCode()) {
                case 200:
                    System.out.println("Description: successful operation");
                    break;
                case 400:
                    validateErrorResponse(response);
                    break;
                case 404:
                    validateNotFoundResponse(response);
                    break;
                case 422:
                    validateUnprocessableEntityResponse(response);
                    break;
                default:
                    fail("Unexpected status code: " + response.statusCode());
                    break;
            }
        }  
    }

    private void validateErrorResponse(Response response) {
        assertEquals(400, response.statusCode());
        // Add more specific assertions here based on the expected structure of a 400 error response
    }

    private void validateNotFoundResponse(Response response) {
        assertEquals(404, response.statusCode());
        // Add more specific assertions here based on the expected structure of a 404 error response
    }

    private void validateUnprocessableEntityResponse(Response response) {
        assertEquals(422, response.statusCode());
        // Add more specific assertions here based on the expected structure of a 422 error response
    }
}
