// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=de965f9280
ROOST_METHOD_SIG_HASH=2226510a78

 ########## Scenario ########## 

{
  feature: 'Feature: Work Order Management API',
  background: null,
  rule: null,
  scenario: {
    title: 'Scenario: Retrieve all work orders',
    steps: 'Given the API endpoint is "/workorders"\n' +
      'When I send a GET request to retrieve all work orders\n' +
      'Then the response status code should be 200\n' +
      'And the response should contain a list of work orders',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

import static org.hamcrest.Matchers.*;

public class RetrieveAllWorkOrdersTest {

    private static final String DATA_FILE = Paths.get("src", "test", "java", "com", "houari", "RoostTest", "RetrieveAllWorkOrdersTest.csv").toString();
    private String method;
    private String url;
    private Map<String, String> headers;
    private String requestBody;
    private int expectedStatusCode;
    private String expectedResponseBody;

    @BeforeEach
    public void setup() throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(DATA_FILE))) {
            String line = reader.readLine(); // Skip headers
            while ((line = reader.readLine()) != null) {
                if (!line.isEmpty()) {
                    String[] parts = line.split("\\^\\|\\^");
                    method = parts[0];
                    url = parts[1];
                    headers = parseHeaders(parts[2]);
                    requestBody = parts[3];
                    expectedStatusCode = Integer.parseInt(parts[4]);
                    expectedResponseBody = parts[5];
                }
            }
        }
    }

    @Test
    public void testRetrieveAllWorkOrders() {
        // Given the API endpoint is "/workorders"
        RequestSpecification request = RestAssured.given()
                .contentType(ContentType.JSON)
                .headers(headers);

        // When I send a GET request to retrieve all work orders
        Response response = request.when().get(url);

        // Then the response status code should be 200
        response.then().statusCode(expectedStatusCode);

        // And the response should contain a list of work orders
        response.then().body("", hasKey("workOrders"))
                .body("workOrders.id", everyItem(notNullValue()))
                .body("workOrders.status", everyItem(anyOf(is("open"), is("closed"))));
    }

    private Map<String, String> parseHeaders(String headersJson) {
        headersJson = headersJson.replace("{ \"", "{\"")
                .replace("\": \"", "\":\"")
                .replace("\" }", "\"}");
        return new HashMap<>(Map.of("Authorization", headersJson.split(":")[1].replaceAll("\"|}", "").trim()));
    }
}
