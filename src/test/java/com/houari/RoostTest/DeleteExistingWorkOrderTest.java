// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=f53f0e46c1
ROOST_METHOD_SIG_HASH=bd730d3207

 ########## Scenario ########## 

{
  feature: 'Feature: Work Order Management API',
  background: null,
  rule: null,
  scenario: {
    title: 'Scenario: Delete an existing work order',
    steps: 'Given the API endpoint is "/workorders/{id}"\n' +
      'And the work order ID is "WO123"\n' +
      'When I send a DELETE request to delete the work order\n' +
      'Then the response status code should be 204',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import static org.hamcrest.Matchers.*;

import static io.restassured.RestAssured.given;

public class DeleteExistingWorkOrderTest {

    private String method;
    private String url;
    private Map<String, String> headers;
    private String requestBody;
    private int expectedStatusCode;
    private String expectedResponseBody;

    @BeforeEach
    public void setUp() throws IOException {
        String path = Paths.get("src", "test", "java", "com", "houari", "RoostTest", "DeleteExistingWorkOrderTest.csv").toString();
        BufferedReader reader = new BufferedReader(new FileReader(path));
        String line;
        boolean firstLine = true;

        while ((line = reader.readLine()) != null) {
            if (firstLine) {
                firstLine = false;
                continue;
            }
            if (line.isEmpty()) {
                continue;
            }
            String[] parts = line.split("\\^\\|\\^");
            method = parts[0];
            url = parts[1];
            headers = parseHeaders(parts[2]);
            requestBody = parts[3];
            expectedStatusCode = Integer.parseInt(parts[4]);
            expectedResponseBody = parts[5];
        }
        reader.close();
    }

    private Map<String, String> parseHeaders(String headersJson) {
        Map<String, String> headersMap = new HashMap<>();
        if (!headersJson.isEmpty() && headersJson.startsWith("{") && headersJson.endsWith("}")) {
            headersJson = headersJson.substring(1, headersJson.length() - 1); // Remove the curly braces
            String[] pairs = headersJson.split(",");
            for (String pair : pairs) {
                String[] keyValue = pair.split(":");
                headersMap.put(keyValue[0].trim(), keyValue[1].trim());
            }
        }
        return headersMap;
    }

    @Test
    public void testDeleteExistingWorkOrder() {
        // Given the API endpoint is "/workorders/{id}"
        // And the work order ID is "WO123"
        // When I send a DELETE request to delete the work order
        // Then the response status code should be 204

        Response response = given()
                .headers(headers)
                .contentType(ContentType.JSON)
                .body(requestBody)
                .when()
                .delete(url)
                .then()
                .statusCode(expectedStatusCode)
                .body("", equalTo(expectedResponseBody))
                .extract()
                .response();

        // Additional assertions can be added here if needed
    }
}
