// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test generated for /login_post for http method type POST in rest-assured framework

RoostTestHash=3122292ee3


*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.instanceOf;
import static org.hamcrest.Matchers.matchesPattern;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class LoginPostTest {

    private List<Map<String, String>> envList = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestDataLoader dataLoader = new TestDataLoader();
        envList = dataLoader.loadData("src/test/java/com/houari/RoostTest/loginPostTest.csv");
    }

    @Test  
    public void loginPost_Test() {
        for (Map<String, String> map : envList) {
            RestAssured.baseURI = map.get("BASE_URL");  
  
            Response response = given()
                .contentType(ContentType.JSON)
                .body("{\n"+
                    "  \"email\": \"" + (map.get("email") != null ? map.get("email") : "") + "\",\n" +
                    "  \"otp\": \"" + (map.get("otp") != null ? map.get("otp") : "") + "\",\n" +
                    "  \"client\": \"" + (map.get("client") != null ? map.get("client") : "") + "\n" +
                    "}")
                .when()
                .post("/login")
                .then()
                .extract().response();    

            switch (response.statusCode()) {
                case 201:
                    validateSuccessfulResponse(response);
                    break;
                case 400:
                    validateErrorResponse(response);
                    break;
                case 404:
                    validateNotFoundResponse(response);
                    break;
                case 422:
                    validateUnprocessableEntityResponse(response);
                    break;
            }
        }
    }
    
    private void validateSuccessfulResponse(Response response) {
        assertThat(response.jsonPath().getString("token"), matchesPattern("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")); 
        assertThat(response.jsonPath().get("token"), instanceOf(String.class));
    }

    private void validateErrorResponse(Response response) {
        assertThat(response.jsonPath().get("error"), instanceOf(String.class));  
        assertThat(response.jsonPath().get("description"), instanceOf(String.class));
        assertThat(response.jsonPath().getString("error"), matchesPattern("^validation/.*$")); 
        assertThat(response.jsonPath().get("value"), instanceOf(Object.class));  
        assertThat(response.jsonPath().get("field"), instanceOf(String.class));  
        assertThat(response.jsonPath().get("schema_field"), instanceOf(String.class));  
    }

    private void validateNotFoundResponse(Response response) {
        // Fill in with specific assertions for 404 response
    }

    private void validateUnprocessableEntityResponse(Response response) {
        // Fill in with specific assertions for 422 response
    }
}
