// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=a5a26d5d9c
ROOST_METHOD_SIG_HASH=2812de346c

 ########## Scenario ########## 

{
  feature: 'Feature: Test API from Alphavantage.co',
  background: null,
  rule: null,
  scenario: {
    title: 'Scenario: Get Stock Dividends',
    steps: 'Given the Finnhub API base URL is "https://finnhub.io/api/v1"\n' +
      'When I send a GET request to "/stock/dividend?symbol=AAPL&from=2021-01-01&to=2021-12-31"\n' +
      'Then the response status code should be 200\n' +
      'And the response should contain dividend data',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class GetStockDividendsTest {

    private static final String BASE_URL = "https://finnhub.io/api/v1";
    private static final String API_KEY = "YOUR_API_KEY"; // Replace with your actual Finnhub API key

    @BeforeAll
    public static void setup() {
        RestAssured.baseURI = BASE_URL;
    }

    @Test
    public void testGetStockDividends() {
        // Given
        String endpoint = "/stock/dividend";
        String symbol = "AAPL";
        String fromDate = "2021-01-01";
        String toDate = "2021-12-31";

        // When
        Response response = given()
                .queryParam("symbol", symbol)
                .queryParam("from", fromDate)
                .queryParam("to", toDate)
                .queryParam("token", API_KEY)
                .when()
                .get(endpoint);

        // Then
        response.then()
                .statusCode(200)
                .body("$", not(empty()))
                .body("symbol", everyItem(equalTo(symbol)))
                .body("date", everyItem(matchesPattern("\\d{4}-\\d{2}-\\d{2}")))
                .body("amount", everyItem(greaterThan(0.0f)));

        // Additional assertions to verify dividend data
        response.then()
                .body("$", hasSize(greaterThan(0)))
                .body("date", everyItem(allOf(
                        greaterThanOrEqualTo(fromDate),
                        lessThanOrEqualTo(toDate)
                )));
    }
}
