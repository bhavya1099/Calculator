// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test generated for /recipients/persons/{id}/registrations_post for http method type POST in rest-assured framework

RoostTestHash=0973c499e9


*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import java.util.List;
import java.util.Map;

public class RegistrationsPostTest {
    private List<Map<String, String>> envList;

    @BeforeEach
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      envList = dataloader.loadData("src/test/java/com/houari/RoostTest/registrationsPostTest.csv");
    }

    @Test  
    public void registrationsPostTest() {
        for (Map<String, String> map : envList) {
            RestAssured.baseURI = map.get("BASE_URL");  

            Response response = given()
                .pathParam("id", map.getOrDefault("id", ""))
                .contentType(ContentType.JSON)
                .body(createRequestBody(map))
                .header("Token", map.get("API_KEY"))
                .when()
                .post("/recipients/persons/{id}/registrations")
                .then()
                .extract().response(); 

            switch(response.statusCode()){
                case 201: validateSuccessfulResponse(response);
                          break;
                case 400: validateBadRequestResponse(response);
                          break;
                case 401: validateUnAuthorizedResponse(response);
                          break;
                default: System.out.println("Unhandled status code");
            }
        }
    }

    private String createRequestBody(Map<String, String> map){
        return "{\n"+
            "  \"reference\": \"" + map.getOrDefault("reference", "") + "\",\n" +
            "  \"startDate\": \"" + map.getOrDefault("startDate", "") + "\",\n" +
            "  \"endDate\": \"" + map.getOrDefault("endDate", "") + "\",\n" +
            "  \"credentialUrl\": \"" + map.getOrDefault("credentialUrl", "") + "\n" +
        "}";
    }

    private void validateSuccessfulResponse(Response response){
        // Assertions for successful response
    }

    private void validateBadRequestResponse(Response response){
        // Assertions for bad request response
    }

    private void validateUnAuthorizedResponse(Response response){
        // Assertions for unauthorized response
    }
}
