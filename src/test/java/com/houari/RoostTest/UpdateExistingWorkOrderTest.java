// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=3bd78fea7d
ROOST_METHOD_SIG_HASH=2c0391284c

 ########## Scenario ########## 

{
  feature: 'Feature: Work Order Management API',
  background: null,
  rule: null,
  scenario: {
    title: 'Scenario: Update an existing work order',
    steps: 'Given the API endpoint is "/workorders/{id}"\n' +
      'And the work order ID is "WO123"\n' +
      'And I have the updated work order details:\n' +
      '      """\n' +
      '      {\n' +
      '        "status": "In Progress",\n' +
      '        "priority": "Medium",\n' +
      '        "assignedTo": "Jane Doe",\n' +
      '        "dueDate": "2023-07-20T17:00:00Z"\n' +
      '      }\n' +
      'When I send a PUT request to update the work order\n' +
      'Then the response status code should be 200\n' +
      'And the response should contain the updated work order details',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.houari.RoostTest;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;

import static org.hamcrest.Matchers.*;

public class UpdateExistingWorkOrderTest {
    private static final String DATA_FILE = Paths.get("src", "test", "java", "com", "houari", "RoostTest", "UpdateExistingWorkOrderTest.csv").toString();

    @BeforeEach
    public void setup() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(DATA_FILE));
        String line;
        while ((line = reader.readLine()) != null) {
            if (line.isEmpty()) continue; // Skip empty lines
            String[] tokens = line.split("\\^\\|\\^");
            if (tokens[0].equals("METHOD")) continue; // Skip header line

            String method = tokens[0];
            String url = tokens[1];
            String reqHeaders = tokens[2];
            String reqBody = tokens[3];
            int responseCode = Integer.parseInt(tokens[4]);
            String responseBody = tokens[5];

            // Testing logic should go in the test methods
        }
        reader.close();
    }

    @Test
    public void testUpdateWorkOrder() {
        // Example payload and headers are setup in the setup method, utilize them here
        String method = "PUT";
        String url = "/workorders/WO123";
        String reqHeaders = "{\"Content-Type\":\"application/json\"}";
        String reqBody = "{\"status\":\"In Progress\",\"priority\":\"Medium\",\"assignedTo\":\"Jane Doe\",\"dueDate\":\"2023-07-20T17:00:00Z\"}";
        int expectedStatusCode = 200;
        String expectedResponseBody = "{\"status\":\"In Progress\",\"priority\":\"Medium\",\"assignedTo\":\"Jane Doe\",\"dueDate\":\"2023-07-20T17:00:00Z\"}";

        Response response = RestAssured.given()
            .contentType(ContentType.JSON)
            .headers("Content-Type", "application/json")
            .body(reqBody)
            .when()
            .put(url);

        // Validate the response
        response.then()
            .statusCode(expectedStatusCode)
            .body("status", equalTo("In Progress"))
            .body("priority", equalTo("Medium"))
            .body("assignedTo", equalTo("Jane Doe"))
            .body("dueDate", equalTo("2023-07-20T17:00:00Z"));
    }
}
