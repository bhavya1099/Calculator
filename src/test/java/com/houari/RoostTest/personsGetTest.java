// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test generated for /recipients/persons_get for http method type GET in rest-assured framework

RoostTestHash=aa0a5d4980


*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import org.hamcrest.MatcherAssert;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class PersonsGetTest {

    List<Map<String, String>> envList = new ArrayList<>();

    @Before
    public void setUp() {
        TestDataLoader dataLoader = new TestDataLoader();
        envList = dataLoader.loadData("src/test/java/com/houari/RoostTest/personsGetTest.csv");
    }

    @Test
    public void personsGetTest() {
        setUp();
        for (Map<String, String> map : envList) {
            RestAssured.baseURI = map.get("BASE_URL");

            Response response = given()
                    .pathParam("size", map.getOrDefault("size", ""))
                    .pathParam("offset", map.getOrDefault("offset", ""))
                    .pathParam("name", map.getOrDefault("name", ""))
                    .pathParam("birth-date", map.getOrDefault("birth-date", ""))
                    .header("Token", map.get("API_KEY"))
                    .when()
                    .get("/recipients/persons")
                    .then()
                    .extract().response();

            int statusCode = response.statusCode();
            if (statusCode == 200) {
                validateSuccessfulResponse(response);
            } else if (statusCode == 400) {
                validateBadRequestResponse(response);
            } else if (statusCode == 404) {
                validateNotFoundResponse(response);
            } else if (statusCode == 422) {
                validateUnprocessableEntityResponse(response);
            }
        }
    }

    private void validateSuccessfulResponse(Response response) {
        // Add code to validate successful response (200)
    }

    private void validateBadRequestResponse(Response response) {
        // Add code to validate bad request response (400)
    }

    private void validateNotFoundResponse(Response response) {
        // Add code to validate not found response (404)
    }

    private void validateUnprocessableEntityResponse(Response response) {
        // Add code to validate unprocessable entity response (422)
    }
}
