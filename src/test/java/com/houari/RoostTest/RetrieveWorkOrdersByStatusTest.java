// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=4f2d9d9489
ROOST_METHOD_SIG_HASH=7a156baa44

 ########## Scenario ########## 

{
  feature: 'Feature: Work Order Management API',
  background: null,
  rule: null,
  scenario: {
    title: 'Scenario: Retrieve work orders by status',
    steps: 'Given the API endpoint is "/workorders?status=Open"\n' +
      'When I send a GET request to retrieve work orders with status "Open"\n' +
      'Then the response status code should be 200\n' +
      'And the response should contain a list of open work orders',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class RetrieveWorkOrdersByStatusTest {
    private String method;
    private String url;
    private Map<String, String> headers;
    private String requestBody;
    private int expectedStatusCode;
    private JSONObject expectedResponseBody;

    @BeforeEach
    public void setUp() throws IOException {
        String path = Paths.get("src", "test", "java", "com", "houari", "RoostTest", "RetrieveWorkOrdersByStatusTest.csv").toString();
        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            String line;
            br.readLine(); // skip headers
            while ((line = br.readLine()) != null) {
                if (line.isEmpty()) continue;
                String[] parts = line.split("\\^\\|\\^");
                method = parts[0];
                url = parts[1];
                headers = parseHeaders(parts[2]);
                requestBody = parts[3];
                expectedStatusCode = Integer.parseInt(parts[4]);
                expectedResponseBody = new JSONObject(parts[5]);
            }
        }
    }

    private Map<String, String> parseHeaders(String headersJson) {
        JSONObject json = new JSONObject(headersJson);
        Map<String, String> headersMap = new HashMap<>();
        json.keys().forEachRemaining(key -> headersMap.put(key, json.getString(key)));
        return headersMap;
    }

    @Test
    public void testRetrieveWorkOrdersByStatus() {
        // Given the API endpoint is "/workorders?status=Open"
        RestAssured.baseURI = "http://localhost:8080";

        // When I send a GET request to retrieve work orders with status "Open"
        Response response = given()
                .headers(headers)
                .contentType(ContentType.JSON)
                .body(requestBody)
                .when()
                .request(method, url)
                .then()
                .statusCode(expectedStatusCode)
                .extract()
                .response();

        // Then the response status code should be 200
        // And the response should contain a list of open work orders
        response.then()
                .body("workOrders", hasSize(expectedResponseBody.getJSONArray("workOrders").length()))
                .body("workOrders.id", everyItem(notNullValue()))
                .body("workOrders.status", everyItem(equalTo("Open")))
                .body("workOrders.details", everyItem(notNullValue()));
    }
}
