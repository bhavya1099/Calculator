// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test generated for /registrations/{id}_get for http method type GET in rest-assured framework

RoostTestHash=299c116110


*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class RegistrationsIdGetTest {

    private List<Map<String, String>> envList = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestDataLoader dataLoader = new TestDataLoader();
        envList = dataLoader.loadData("src/test/java/com/houari/RoostTest/registrations_idGetTest.csv");
    }

    @Test  
    public void registrationsIdGet_Test() {
        for (Map<String, String> map : envList) {
            RestAssured.baseURI = map.get("BASE_URL");

            Response response = given()
                    .pathParam("id", map.get("id") != null ? map.get("id") : "")
                    .header("Token", map.get("API_KEY"))
                    .when()
                    .get("/registrations/{id}")
                    .then()
                    .extract().response();

            if (response.statusCode() == 200) {
                validateSuccessResponse(response);
            } else if (response.statusCode() == 400) {
                validateBadRequestResponse(response);
            } else if (response.statusCode() == 401) {
                validateAuthenticationRequiredResponse(response);
            } else {
                fail("Unexpected status code: " + response.statusCode());
            }
        }
    }

    private void validateSuccessResponse(Response response) {
        assertThat(response.jsonPath().get("id"), instanceOf(String.class));
        assertThat(response.jsonPath().get("reference"), instanceOf(String.class));
        assertThat(response.jsonPath().getString("reference").length(), lessThanOrEqualTo(100));
        // Add remaining assertions for the success response...
    }

    private void validateBadRequestResponse(Response response) {
        assertThat(response.jsonPath().get("error"), instanceOf(String.class));
        assertThat(response.jsonPath().get("description"), instanceOf(String.class));
        // Add remaining assertions for the bad request response...
    }

    private void validateAuthenticationRequiredResponse(Response response) {
        assertThat(response.jsonPath().get("error"), instanceOf(String.class));
        assertThat(response.jsonPath().get("description"), instanceOf(String.class));
        // Add remaining assertions for the authentication required response...
    }
}
