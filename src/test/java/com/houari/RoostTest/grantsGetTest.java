// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test generated for /grants_get for http method type GET in rest-assured framework

RoostTestHash=692c6b853f


*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;

public class GrantsGetTest {
    private List<Map<String, String>> envList = new ArrayList<>();

    @Before
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        envList = dataloader.loadData("src/test/java/com/houari/RoostTest/grantsGetTest.csv");
    }

    @Test  
    public void grantsGet_Test() {
        setUp();
        for (Map<String, String> map : envList) {
            RestAssured.baseURI = map.get("BASE_URL");  
  
            Response response = given()
                .header("Token", map.get("API_KEY"))
                .when()
                .get("/grants")  
                .then() 
                .extract().response(); 

            switch(response.statusCode()) {
                case 200:
                    validateSuccessResponse(response);
                    break;
                case 401:
                    validateErrorResponse(response);
                    break;
                default:
                    System.out.println("Unexpected status code");
            }
        }  
    }

    private void validateSuccessResponse(Response response) {
        System.out.println("Description: successful operation");
        MatcherAssert.assertThat(response.jsonPath().getList("grants"), instanceOf(List.class));
    }

    private void validateErrorResponse(Response response) {
        System.out.println("Description: Authentication Required");

        if (response.jsonPath().get("error") != null) {  
            MatcherAssert.assertThat(response.jsonPath().get("error"), instanceOf(String.class));  
        }
    }
}
