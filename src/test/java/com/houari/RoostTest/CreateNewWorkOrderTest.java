// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=60841ae983
ROOST_METHOD_SIG_HASH=ae0052270b

 ########## Scenario ########## 

{
  feature: 'Feature: Work Order Management API',
  background: null,
  rule: null,
  scenario: {
    title: 'Scenario: Create a new work order',
    steps: 'Given the API endpoint is "/workorders"\n' +
      'And I have the following work order details:\n' +
      '      """\n' +
      '      {\n' +
      '        "workOrderId": "WO123",\n' +
      '        "description": "Fix leaking pipe",\n' +
      '        "status": "Open",\n' +
      '        "priority": "High",\n' +
      '        "assignedTo": "John Doe",\n' +
      '        "createdDate": "2023-07-10T10:00:00Z",\n' +
      '        "dueDate": "2023-07-15T17:00:00Z"\n' +
      '      }\n' +
      'When I send a POST request to create the work order\n' +
      'Then the response status code should be 201\n' +
      'And the response should contain the work order details',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import static org.hamcrest.Matchers.equalTo;

public class CreateNewWorkOrderTest {
    private List<String[]> testData;

    @BeforeEach
    public void setup() throws IOException {
        String path = Paths.get("src", "test", "java", "com", "houari", "RoostTest", "CreateNewWorkOrderTest.csv").toString();
        BufferedReader reader = new BufferedReader(new FileReader(path));
        testData = new ArrayList<>();
        String line;
        boolean isFirstLine = true;
        while ((line = reader.readLine()) != null) {
            if (isFirstLine) {
                isFirstLine = false;
                continue;
            }
            if (!line.isEmpty()) {
                testData.add(line.split("\\^\\|\\^"));
            }
        }
        reader.close();
    }

    @Test
    public void testCreateNewWorkOrder() {
        for (String[] data : testData) {
            String method = data[0];
            String url = data[1];
            String headers = data[2];  // Assuming headers are JSON formatted
            String requestBody = data[3];
            int expectedStatusCode = Integer.parseInt(data[4]);
            String expectedResponseBody = data[5];

            Response response = RestAssured
                    .given()
                    .contentType(ContentType.JSON)
                    .body(requestBody)
                    .when()
                    .post(url);

            response
                    .then()
                    .statusCode(expectedStatusCode)
                    .body("", equalTo(expectedResponseBody));
        }
    }
}
