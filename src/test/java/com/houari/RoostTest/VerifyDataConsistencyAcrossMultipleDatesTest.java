// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=6bf7bc56ab
ROOST_METHOD_SIG_HASH=bc3085fe0d

 ########## Scenario ########## 

{
  feature: 'Feature: Test API from Alphavantage.co',
  background: null,
  rule: null,
  scenario: {
    title: 'Scenario Outline: Verify data consistency across multiple dates',
    steps: 'Given I have retrieved the daily time series data for AAPL stock\n' +
      'When I check the data for "<date>"\n' +
      'Then it should have all required fields\n' +
      'And the values should be valid numbers',
    examples: 'Examples:\n' +
      '      | date       |\n' +
      '      | 2024-07-09 |\n' +
      '      | 2024-07-08 |\n' +
      '      | 2024-07-05 |\n' +
      '      | 2024-07-03 |\n' +
      '      | 2024-07-02 |'
  }
}

*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class VerifyDataConsistencyAcrossMultipleDatesTest {

    private static String apiKey;
    private static String baseUrl;

    @BeforeAll
    public static void setup() throws IOException {
        // Read API key and base URL from configuration file
        apiKey = Files.readString(Paths.get("config.txt")).trim();
        baseUrl = "https://www.alphavantage.co/query";
    }

    @ParameterizedTest
    @CsvSource({
        "2024-07-09",
        "2024-07-08",
        "2024-07-05",
        "2024-07-03",
        "2024-07-02"
    })
    public void verifyDataConsistencyAcrossMultipleDates(String date) throws IOException {
        // Given I have retrieved the daily time series data for AAPL stock
        Response response = given()
            .queryParam("function", "TIME_SERIES_DAILY")
            .queryParam("symbol", "AAPL")
            .queryParam("apikey", apiKey)
        .when()
            .get(baseUrl);

        // When I check the data for the specific date
        response.then()
            .statusCode(200)
            .body("Time Series (Daily)", hasKey(date));

        // Then it should have all required fields
        response.then()
            .body("Time Series (Daily)." + date, hasKey("1. open"))
            .body("Time Series (Daily)." + date, hasKey("2. high"))
            .body("Time Series (Daily)." + date, hasKey("3. low"))
            .body("Time Series (Daily)." + date, hasKey("4. close"))
            .body("Time Series (Daily)." + date, hasKey("5. volume"));

        // And the values should be valid numbers
        response.then()
            .body("Time Series (Daily)." + date + ".1. open", matchesPattern("^\\d+\\.?\\d*$"))
            .body("Time Series (Daily)." + date + ".2. high", matchesPattern("^\\d+\\.?\\d*$"))
            .body("Time Series (Daily)." + date + ".3. low", matchesPattern("^\\d+\\.?\\d*$"))
            .body("Time Series (Daily)." + date + ".4. close", matchesPattern("^\\d+\\.?\\d*$"))
            .body("Time Series (Daily)." + date + ".5. volume", matchesPattern("^\\d+$"));
    }
}
