// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=1749883a0e
ROOST_METHOD_SIG_HASH=b021e62269

 ########## Scenario ########## 

{
  feature: 'Feature: Test API from Alphavantage.co',
  background: null,
  rule: null,
  scenario: {
    title: 'Scenario: Get Recommendation Trends',
    steps: 'Given the Finnhub API base URL is "https://finnhub.io/api/v1"\n' +
      'When I send a GET request to "/stock/recommendation?symbol=AAPL"\n' +
      'Then the response status code should be 200\n' +
      'And the response should contain recommendation trends',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class GetRecommendationTrendsTest {

    private static final String BASE_URL = "https://finnhub.io/api/v1";
    private static final String API_KEY = "YOUR_API_KEY"; // Replace with your actual Finnhub API key

    @BeforeAll
    public static void setup() {
        RestAssured.baseURI = BASE_URL;
    }

    @Test
    public void testGetRecommendationTrends() {
        // Given the Finnhub API base URL is "https://finnhub.io/api/v1"
        // When I send a GET request to "/stock/recommendation?symbol=AAPL"
        Response response = given()
                .queryParam("symbol", "AAPL")
                .queryParam("token", API_KEY)
                .when()
                .get("/stock/recommendation");

        // Then the response status code should be 200
        response.then().statusCode(200);

        // And the response should contain recommendation trends
        response.then()
                .body("$", not(empty()))
                .body("symbol", hasItem("AAPL"))
                .body("buy", everyItem(greaterThanOrEqualTo(0)))
                .body("hold", everyItem(greaterThanOrEqualTo(0)))
                .body("sell", everyItem(greaterThanOrEqualTo(0)))
                .body("strongBuy", everyItem(greaterThanOrEqualTo(0)))
                .body("strongSell", everyItem(greaterThanOrEqualTo(0)))
                .body("period", everyItem(notNullValue()));
    }
}
