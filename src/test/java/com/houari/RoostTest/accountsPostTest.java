// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test generated for /accounts_post for http method type POST in rest-assured framework

RoostTestHash=53e96f9805


*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

public class AccountsPostTest {
    List<Map<String, String>> envList = new ArrayList<>();

    @Before
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        envList = dataloader.loadData("src/test/java/com/houari/RoostTest/accountsPostTest.csv");
    }

    @Test  
    public void accountsPost_Test() {
        this.setUp();
        for (Map<String, String> map : envList) {
            RestAssured.baseURI = map.get("BASE_URL");  
  
            Response response = given()
                .pathParam("commit-hash", map.get("commit-hash") != null ? map.get("commit-hash") : "")
                .contentType(ContentType.JSON)
                .body("{\n"+
                    "  \"email\": \"" + (map.get("email") != null ? map.get("email") : "") + "\n" +
                    "}")
                .when()
                .post("/accounts")  
                .then()
                .extract().response();    
         
            switch (response.statusCode()) {
                case 201:
                    System.out.println("Description: successful operation");
                    break;
                case 400:
                    validateErrorResponse(response);
                    break;
                default:
                    System.out.println("Description: Unhandled response code");
            }
        }  
    }

    private void validateErrorResponse(Response response) {
        System.out.println("Description: Bad Request");
        assertThat(response.jsonPath().get("error"), instanceOf(String.class));
        assertThat(response.jsonPath().get("description"), instanceOf(String.class));
        assertThat(response.jsonPath().getString("error"), matchesPattern("^validation/.*$"));
        assertThat(response.jsonPath().get("error"), instanceOf(String.class));
        assertThat(response.jsonPath().get("description"), instanceOf(String.class));
        assertThat(response.jsonPath().get("value"), instanceOf(Object.class));
        assertThat(response.jsonPath().get("field"), instanceOf(String.class));
        assertThat(response.jsonPath().get("schema_field"), instanceOf(String.class));
    }
}
