// ********RoostGPT********
/*
Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 

ROOST_METHOD_HASH=7f27d0f027
ROOST_METHOD_SIG_HASH=d5853d6df0

 ########## Scenario ########## 

{
  feature: 'Feature: Test API from Alphavantage.co',
  background: null,
  rule: null,
  scenario: {
    title: 'Scenario: Verify specific date data in time series',
    steps: 'Given I have retrieved the daily time series data for AAPL stock\n' +
      'When I check the data for "2024-07-09"\n' +
      'Then it should have the following values:\n' +
      '      | Field     | Value     |\n' +
      '      | 1. open   | 227.9300  |\n' +
      '      | 2. high   | 229.4000  |\n' +
      '      | 3. low    | 226.3721  |\n' +
      '      | 4. close  | 228.6800  |\n' +
      '      | 5. volume | 48169822  |',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class VerifySpecificDateDataInTimeSeriesTest {

    private static String apiKey;
    private static String baseUrl;
    private static String symbol;
    private static String function;

    @BeforeAll
    public static void setup() {
        // Setup base URL and API key
        baseUrl = "https://www.alphavantage.co/query";
        apiKey = "YOUR_API_KEY"; // Replace with actual API key
        symbol = "AAPL";
        function = "TIME_SERIES_DAILY";

        // Read API specifications from CSV file
        readApiSpecFromCsv();
    }

    private static void readApiSpecFromCsv() {
        try {
            File file = new File("{{ROOST_CSV_FILE_NAME}}");
            Scanner scanner = new Scanner(file);
            // Read and process CSV content
            // This is a placeholder and should be implemented based on actual CSV structure
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void verifySpecificDateDataInTimeSeries() {
        Response response = given()
                .param("function", function)
                .param("symbol", symbol)
                .param("apikey", apiKey)
            .when()
                .get(baseUrl);

        response.then().statusCode(200);

        // Verify specific date data
        String date = "2024-07-09";
        response.then().body("Time Series (Daily)." + date + ".1. open", equalTo("227.9300"));
        response.then().body("Time Series (Daily)." + date + ".2. high", equalTo("229.4000"));
        response.then().body("Time Series (Daily)." + date + ".3. low", equalTo("226.3721"));
        response.then().body("Time Series (Daily)." + date + ".4. close", equalTo("228.6800"));
        response.then().body("Time Series (Daily)." + date + ".5. volume", equalTo("48169822"));
    }
}
