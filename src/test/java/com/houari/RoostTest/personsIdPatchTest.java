// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test generated for /recipients/persons/{id}_patch for http method type PATCH in rest-assured framework

RoostTestHash=1416aa2295


*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

public class personsIdPatchTest {

    List<Map<String, String>> envList = new ArrayList<>();

    @Before
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        envList = dataloader.loadData("src/test/java/com/houari/RoostTest/persons_idPatchTest.csv");
    }

    @Test
    public void personsIdPatch_Test() {
        this.setUp();
        for (Map<String, String> map : envList) {
            RestAssured.baseURI = map.get("BASE_URL");

            Response response = given()
                .pathParam("id", map.getOrDefault("id", ""))
                .contentType(ContentType.JSON)
                .body(map)
                .header("Token", map.get("API_KEY"))
                .when()
                .patch("/recipients/persons/{id}")  
                .then() 
                .extract().response();

            switch (response.statusCode()) {
                case 200:
                    validateSuccessfulResponse(response);
                    break;
                case 400:
                    validateErrorResponse(response);
                    break;
                case 401:
                    validateAuthenticationRequiredResponse(response);
                    break;
                default:
                    throw new IllegalArgumentException("Unexpected HTTP status code: " + response.statusCode());
            }
        }
    }

    private void validateSuccessfulResponse(Response response) {
        System.out.println("Description: successful operation");

        assertThat(response.jsonPath().get("id"), instanceOf(String.class));
        assertThat(response.jsonPath().getString("firstName"), matchesPattern("^[\\p{L} .'-]{1,50}$"));
        assertThat(response.jsonPath().get("firstName"), instanceOf(String.class));
    }

    private void validateErrorResponse(Response response) {
        System.out.println("Description: Bad Request");

        assertThat(response.jsonPath().get("error"), instanceOf(String.class));
        assertThat(response.jsonPath().get("description"), instanceOf(String.class));
        assertThat(response.jsonPath().getString("error"), matchesPattern("^validation/.*$"));
        assertThat(response.jsonPath().get("error"), instanceOf(String.class));
        assertThat(response.jsonPath().get("description"), instanceOf(String.class));
    }

    private void validateAuthenticationRequiredResponse(Response response) {
        System.out.println("Description: Authentication Required");

        assertThat(response.jsonPath().get("error"), instanceOf(String.class));
        assertThat(response.jsonPath().get("description"), instanceOf(String.class));
        assertThat(response.jsonPath().getString("error"), matchesPattern("^validation/.*$"));
        assertThat(response.jsonPath().get("error"), instanceOf(String.class));
        assertThat(response.jsonPath().get("description"), instanceOf(String.class));
    }
}
