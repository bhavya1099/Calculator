// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=f0c8dfdbb0
ROOST_METHOD_SIG_HASH=d3b81bf0e1

 ########## Scenario ########## 

{
  feature: 'Feature: Work Order Management API',
  background: null,
  rule: null,
  scenario: {
    title: 'Scenario: Retrieve work orders by priority',
    steps: 'Given the API endpoint is "/workorders?priority=High"\n' +
      'When I send a GET request to retrieve work orders with priority "High"\n' +
      'Then the response status code should be 200\n' +
      'And the response should contain a list of high priority work orders',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class RetrieveWorkOrdersByPriorityTest {

    private String method;
    private String url;
    private Map<String, String> headers;
    private String requestBody;
    private int expectedStatusCode;
    private JSONArray expectedResponseBody;

    @BeforeEach
    public void setUp() throws Exception {
        String basePath = "src" + System.getProperty("file.separator") + "test" + System.getProperty("file.separator") +
                "java" + System.getProperty("file.separator") + "com" + System.getProperty("file.separator") +
                "houari" + System.getProperty("file.separator") + "RoostTest" + System.getProperty("file.separator") +
                "RetrieveWorkOrdersByPriorityTest.csv";

        try (BufferedReader reader = new BufferedReader(new FileReader(basePath))) {
            String line = reader.readLine(); // Skip headers
            while ((line = reader.readLine()) != null) {
                if (line.isEmpty()) continue;
                String[] data = line.split("\\^\\|\\^");
                method = data[0];
                url = data[1];
                headers = parseHeaders(data[2]);
                requestBody = data[3];
                expectedStatusCode = Integer.parseInt(data[4]);
                expectedResponseBody = new JSONArray(data[5]);
            }
        }
    }

    private Map<String, String> parseHeaders(String headersJson) {
        JSONObject json = new JSONObject(headersJson);
        Map<String, String> headersMap = new HashMap<>();
        for (String key : json.keySet()) {
            headersMap.put(key, json.getString(key));
        }
        return headersMap;
    }

    @Test
    public void testRetrieveWorkOrdersByPriority() {
        // Description: Retrieve work orders by priority "High"
        Response response = given()
                .headers(headers)
                .body(requestBody)
                .contentType(ContentType.JSON)
                .when()
                .request(method, url)
                .then()
                .statusCode(expectedStatusCode)
                .extract()
                .response();

        JSONArray actualResponseBody = new JSONArray(response.asString());
        assertThat(actualResponseBody.length(), is(expectedResponseBody.length()));

        for (int i = 0; i < expectedResponseBody.length(); i++) {
            JSONObject expectedObject = expectedResponseBody.getJSONObject(i);
            JSONObject actualObject = actualResponseBody.getJSONObject(i);

            assertThat(actualObject.getInt("id"), is(expectedObject.getInt("id")));
            assertThat(actualObject.getString("status"), is(expectedObject.getString("status")));
            assertThat(actualObject.getString("priority"), is(expectedObject.getString("priority")));
            assertThat(actualObject.getString("description"), is(expectedObject.getString("description")));
        }
    }
}
