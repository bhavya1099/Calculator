// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test generated for /apikeys_post for http method type POST in rest-assured framework

RoostTestHash=28a54f1579


*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.instanceOf;
import static org.hamcrest.Matchers.matchesPattern;

public class ApiKeysPostTest {

    private List<Map<String, String>> envList = new ArrayList<>();

    @BeforeEach
    public void setUp() {
        TestDataLoader dataLoader = new TestDataLoader();
        envList = dataLoader.loadData("src/test/java/com/houari/RoostTest/apikeysPostTest.csv");
    }

    @Test
    public void apiKeysPostTest() {
        for (Map<String, String> map : envList) {
            RestAssured.baseURI = map.get("BASE_URL");

            Response response = given()
                    .header("Token", map.get("API_KEY"))
                    .when()
                    .post("/apikeys")
                    .then()
                    .extract().response();

            switch(response.statusCode()) {
                case 201:
                    validateSuccessfulResponse(response);
                    break;
                case 400:
                    validateBadRequestResponse(response);
                    break;
                case 401:
                    validateUnauthorizedResponse(response);
                    break;
                default:
                    throw new IllegalStateException("Unexpected status code: " + response.statusCode());
            }
        }
    }

    private void validateSuccessfulResponse(Response response) {
        assertThat(response.jsonPath().get("id"), instanceOf(String.class));
        assertThat(response.jsonPath().get("token"), matchesPattern("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"));
        assertThat(response.jsonPath().get("createdAt"), instanceOf(String.class));
    }

    private void validateBadRequestResponse(Response response) {
        assertThat(response.jsonPath().get("error"), instanceOf(String.class));
        assertThat(response.jsonPath().get("description"), instanceOf(String.class));
        assertThat(response.jsonPath().get("error"), matchesPattern("^validation/.*$"));
        assertThat(response.jsonPath().get("field"), instanceOf(String.class));
        assertThat(response.jsonPath().get("schema_field"), instanceOf(String.class));
    }

    private void validateUnauthorizedResponse(Response response) {
        assertThat(response.jsonPath().get("error"), instanceOf(String.class));
        assertThat(response.jsonPath().get("description"), instanceOf(String.class));
        assertThat(response.jsonPath().get("error"), matchesPattern("^validation/.*$"));
        assertThat(response.jsonPath().get("field"), instanceOf(String.class));
        assertThat(response.jsonPath().get("schema_field"), instanceOf(String.class));
    }
}
