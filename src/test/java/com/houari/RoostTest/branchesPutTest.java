// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test generated for /recipients/branches_put for http method type PUT in rest-assured framework

RoostTestHash=63322ffb26


*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import static io.restassured.RestAssured.given;

public class BranchesPutTest {

    List<Map<String, String>> envList = new ArrayList<>();

    @Before
    public void setUp() {
        TestdataLoader dataloader = new TestdataLoader();
        envList = dataloader.loadData("src/test/java/com/houari/RoostTest/branchesPutTest.csv");
    }

    @Test
    public void branchesPut_Test() {
        setUp();
        for (Map<String, String> map : envList) {
            RestAssured.baseURI = map.get("BASE_URL");

            Response response = given()
                    .contentType(ContentType.JSON)
                    .body(createRequestBody(map))
                    .header("Token", map.get("API_KEY"))
                    .when()
                    .put("/recipients/branches")
                    .then()
                    .extract().response();

            switch (response.statusCode()) {
                case 200:
                    System.out.println("Description: successful operation, existing branch returned");
                    validateSuccessfulResponse(response);
                    break;
                case 201:
                    System.out.println("Description: successful operation, branch created");
                    validateSuccessfulResponse(response);
                    break;
                case 400:
                    System.out.println("Description: Bad Request");
                    validateErrorResponse(response);
                    break;
                case 401:
                    System.out.println("Description: Authentication Required");
                    validateErrorResponse(response);
                    break;
                default:
                    System.out.println("Unexpected status code returned: " + response.statusCode());
            }
        }
    }

    private String createRequestBody(Map<String, String> map) {
        return "{\n" +
                "  \"cocNumber\": \"" + (map.get("cocNumber") != null ? map.get("cocNumber") : "") + "\",\n" +
                "  \"cocBranchNumber\": \"" + (map.get("cocBranchNumber") != null ? map.get("cocBranchNumber") : "") + "\",\n" +
                "  \"city\": \"" + (map.get("city") != null ? map.get("city") : "") + "\",\n" +
                "  \"tradeName\": \"" + (map.get("tradeName") != null ? map.get("tradeName") : "") + "\",\n" +
                "  \"phone\": \"" + (map.get("phone") != null ? map.get("phone") : "") + "\",\n" +
                "  \"email\": \"" + (map.get("email") != null ? map.get("email") : "") + "\"\n" +
                "}";
    }

    private void validateSuccessfulResponse(Response response) {
        assertThat(response.jsonPath().get("id"), is(instanceOf(String.class)));
        assertThat(response.jsonPath().get("email"), is(instanceOf(String.class)));
        assertThat(response.jsonPath().getString("email"), matchesPattern("^[^\s@]+@[^\s@]+\.[^\s@]+$"));
        assertThat(response.jsonPath().get("phone"), is(instanceOf(String.class)));
        assertThat(response.jsonPath().get("cocNumber"), is(instanceOf(String.class)));
        assertThat(response.jsonPath().getString("cocNumber"), matchesPattern("^\d{8}$"));
        assertThat(response.jsonPath().get("cocBranchNumber"), is(instanceOf(String.class)));
        assertThat(response.jsonPath().getString("cocBranchNumber"), matchesPattern("^\d{12}$"));
        assertThat(response.jsonPath().get("tradeName"), is(instanceOf(String.class)));
        assertThat(response.jsonPath().getList("tradeNames"), is(instanceOf(List.class)));
        assertThat(response.jsonPath().get("eoriNumber"), is(instanceOf(String.class)));
        assertThat(response.jsonPath().getString("eoriNumber"), matchesPattern("^NL\d{9}$"));
        assertThat(response.jsonPath().get("deregistrationDate"), is(instanceOf(String.class)));
        assertThat(response.jsonPath().get("createdAt"), is(instanceOf(String.class)));
        assertThat(response.jsonPath().get("updatedAt"), is(instanceOf(String.class)));
    }

    private void validateErrorResponse(Response response) {
        assertThat(response.jsonPath().get("error"), is(instanceOf(String.class)));
        assertThat(response.jsonPath().getString("error"), matchesPattern("^validation/.*$"));
        assertThat(response.jsonPath().get("description"), is(instanceOf(String.class)));
    }
}
