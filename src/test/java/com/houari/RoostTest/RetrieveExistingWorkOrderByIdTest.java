// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 

ROOST_METHOD_HASH=61d8709361
ROOST_METHOD_SIG_HASH=321946d6bd

 ########## Scenario ########## 

{
  feature: 'Feature: Work Order Management API',
  background: null,
  rule: null,
  scenario: {
    title: 'Scenario: Retrieve an existing work order by ID',
    steps: 'Given the API endpoint is "/workorders/{id}"\n' +
      'And the work order ID is "WO123"\n' +
      'When I send a GET request to retrieve the work order\n' +
      'Then the response status code should be 200\n' +
      'And the response should contain the work order details',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.houari.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

import static org.hamcrest.Matchers.*;

public class RetrieveExistingWorkOrderByIdTest {
    private String baseUrl;
    private Map<String, String> headers;
    private String requestBody;
    private int expectedStatusCode;
    private String expectedResponseBody;

    @BeforeEach
    public void setup() throws IOException {
        String path = Paths.get("src", "test", "java", "com", "houari", "RoostTest", "RetrieveExistingWorkOrderByIdTest.csv").toString();
        try (BufferedReader reader = new BufferedReader(new FileReader(path))) {
            String line = reader.readLine(); // skip headers
            while ((line = reader.readLine()) != null) {
                if (line.isEmpty()) continue;
                String[] data = line.split("\\^\\|\\^");
                if (data.length >= 5) {
                    baseUrl = data[1];
                    headers = parseHeaders(data[2]);
                    requestBody = data[3];
                    expectedStatusCode = Integer.parseInt(data[4]);
                    expectedResponseBody = data[5];
                }
            }
        }
    }

    private Map<String, String> parseHeaders(String jsonHeaders) {
        Map<String, String> headerMap = new HashMap<>();
        if (jsonHeaders != null && !jsonHeaders.isEmpty()) {
            jsonHeaders = jsonHeaders.replaceAll("[{}]", "");
            String[] entries = jsonHeaders.split(",");
            for (String entry : entries) {
                String[] keyValue = entry.split(":");
                headerMap.put(keyValue[0].trim(), keyValue[1].trim());
            }
        }
        return headerMap;
    }

    @Test
    public void testRetrieveExistingWorkOrderById() {
        // Given the API endpoint is "/workorders/{id}"
        // And the work order ID is "WO123"
        String workOrderId = "WO123";
        String endpoint = baseUrl.replace("{id}", workOrderId);

        // When I send a GET request to retrieve the work order
        RequestSpecification request = RestAssured.given().headers(headers);

        Response response = request.get(endpoint);

        // Then the response status code should be 200
        // And the response should contain the work order details
        response.then()
                .statusCode(expectedStatusCode)
                .body("id", equalTo(workOrderId))
                .body("status", is(not(emptyOrNullString())))
                .body("details", is(not(emptyOrNullString())));
    }
}
