// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Verify that the "CalculatorUI" function is able to load themes correctly using the "ThemeLoader.loadThemes()" method.
2. Check whether the "CalculatorUI" function is correctly initializing the JFrame with the title "APPLICATION_TITLE".
3. Verify if the window size is set correctly to the dimensions "WINDOW_WIDTH" and "WINDOW_HEIGHT".
4. Confirm that the window position is set relative to the center of the screen by checking the function "window.setLocationRelativeTo(null)".
5. Validate if the "CalculatorUI" function is correctly initializing the input screen using the "initInputScreen(columns, rows)" method with the correct parameters.
6. Check if the "CalculatorUI" function is correctly initializing the calculator buttons using the "initButtons(columns, rows)" method with the correct parameters.
7. Verify if the "CalculatorUI" function is correctly initializing the calculator type selector using the "initCalculatorTypeSelector()" method.
8. Verify if the "CalculatorUI" function is correctly initializing the theme selector using the "initThemeSelector()" method.
9. Confirm that the layout of the window is set to null using the "window.setLayout(null)" method.
10. Verify whether the window is set to non-resizable using the "window.setResizable(false)" method.
11. Check if the window's default close operation is set to "EXIT_ON_CLOSE" using the "window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)" method.
12. Confirm that the window is set to visible after all initialization using the "window.setVisible(true)" method.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.swing.*;

import java.awt.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {

    @Mock
    private ThemeLoader themeLoader;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCalculatorUI() {
        when(themeLoader.loadThemes()).thenReturn(new HashMap<>());

        CalculatorUI calculatorUI = new CalculatorUI();
        
        // Verifying the JFrame properties
        assertEquals(CalculatorUI.APPLICATION_TITLE, calculatorUI.window.getTitle());
        assertEquals(new Dimension(CalculatorUI.WINDOW_WIDTH, CalculatorUI.WINDOW_HEIGHT), calculatorUI.window.getSize());
        assertNull(calculatorUI.window.getContentPane().getLayout());
        assertFalse(calculatorUI.window.isResizable());
        assertEquals(JFrame.EXIT_ON_CLOSE, calculatorUI.window.getDefaultCloseOperation());
        assertTrue(calculatorUI.window.isVisible());

        // Verifying the invocation of 'loadThemes()' method
        verify(themeLoader, times(1)).loadThemes();
    }
}
