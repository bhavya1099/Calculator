// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Check if the JFrame window is properly initialized
- Verify if the window is not null after CalculatorUI constructor is called.
- Check if the window title matches with the constant `APPLICATION_TITLE`.
- Validate if the window size is set correctly as per the constants `WINDOW_WIDTH` and `WINDOW_HEIGHT`.
- Confirm that the window is centered on the screen (location relative to null).

Test Scenario 2: Check the initialization of columns and rows
- Verify that the columns and rows arrays are correctly initialized with the expected values.

Test Scenario 3: Check if the input screen is initialized properly
- Validate whether the `initInputScreen` method is called with the correct arguments (columns and rows).

Test Scenario 4: Check if the buttons are initialized properly
- Confirm that the `initButtons` method is called with the correct arguments (columns and rows).

Test Scenario 5: Check if the calculator type selector is initialized
- Validate if the `initCalculatorTypeSelector` method is called correctly.

Test Scenario 6: Check if the theme selector is initialized
- Confirm that the `initThemeSelector` method is called correctly.

Test Scenario 7: Check JFrame window properties
- Validate if the layout of the window is set to null.
- Confirm that the window is not resizable.
- Check if the default close operation is set to `JFrame.EXIT_ON_CLOSE`.
- Verify if the window visibility is set to true after the CalculatorUI constructor is called.

Test Scenario 8: Check if the themes are loaded correctly
- Validate if the `themesMap` is not null and contains the expected themes after `ThemeLoader.loadThemes()` is called.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import com.houarizegai.calculator.theme.ThemeLoader;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.awt.*;
import javax.swing.*;

import static org.junit.jupiter.api.Assertions.*;

public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {

    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setUp() {
        calculatorUI = new CalculatorUI();
    }

    @AfterEach
    public void tearDown() {
        calculatorUI = null;
    }

    @Test
    public void testCalculatorUIInitialization() {
        // Test if the JFrame window is properly initialized
        JFrame window = calculatorUI.getWindow();
        assertNotNull(window);
        assertEquals(CalculatorUI.APPLICATION_TITLE, window.getTitle());
        assertEquals(new Dimension(CalculatorUI.WINDOW_WIDTH, CalculatorUI.WINDOW_HEIGHT), window.getSize());
        assertNull(window.getLocation());

        // Test if the columns and rows are initialized correctly
        int[] columns = {CalculatorUI.MARGIN_X, CalculatorUI.MARGIN_X + 90, CalculatorUI.MARGIN_X + 90 * 2, CalculatorUI.MARGIN_X + 90 * 3, CalculatorUI.MARGIN_X + 90 * 4};
        int[] rows = {CalculatorUI.MARGIN_Y, CalculatorUI.MARGIN_Y + 100, CalculatorUI.MARGIN_Y + 100 + 80, CalculatorUI.MARGIN_Y + 100 + 80 * 2, CalculatorUI.MARGIN_Y + 100 + 80 * 3, CalculatorUI.MARGIN_Y + 100 + 80 * 4};
        assertArrayEquals(columns, calculatorUI.getColumns());
        assertArrayEquals(rows, calculatorUI.getRows());

        // Test if the input screen is initialized correctly
        JTextField inputScreen = calculatorUI.getInputScreen();
        assertNotNull(inputScreen);
        assertEquals("0", inputScreen.getText());
        assertFalse(inputScreen.isEditable());
        assertEquals(Color.WHITE, inputScreen.getBackground());
        assertEquals(new Font(CalculatorUI.FONT_NAME, Font.PLAIN, 33), inputScreen.getFont());

        // Test if the buttons are initialized correctly
        JButton btnC = calculatorUI.getBtnC();
        assertNotNull(btnC);
        assertEquals("C", btnC.getText());

        // Test if the calculator type selector is initialized correctly
        JComboBox<String> comboCalculatorType = calculatorUI.getComboCalculatorType();
        assertNotNull(comboCalculatorType);
        assertEquals(2, comboCalculatorType.getItemCount());

        // Test if the theme selector is initialized correctly
        JComboBox<String> comboTheme = calculatorUI.getComboTheme();
        assertNotNull(comboTheme);
        assertTrue(comboTheme.getItemCount() > 0);

        // Test if the JFrame window properties are set correctly
        assertNull(window.getLayout());
        assertFalse(window.isResizable());
        assertEquals(JFrame.EXIT_ON_CLOSE, window.getDefaultCloseOperation());
        assertTrue(window.isVisible());

        // Test if the themes are loaded correctly
        assertNotNull(calculatorUI.getThemesMap());
        assertTrue(calculatorUI.getThemesMap().size() > 0);
        assertTrue(calculatorUI.getThemesMap().keySet().containsAll(ThemeLoader.loadThemes().keySet()));
    }
}
