// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Check if the window is created with the correct title 
- Verify if the window is created with the title "APPLICATION_TITLE".

Test Scenario 2: Check window size
- Verify if the window is created with the correct size. The width should be WINDOW_WIDTH and height should be WINDOW_HEIGHT. 

Test Scenario 3: Check window location
- Verify if the window is located in the center of the screen.

Test Scenario 4: Check window layout
- Verify if the window layout is set to null.

Test Scenario 5: Check window resizability
- Verify if the window is not resizable.

Test Scenario 6: Check window default close operation
- Verify if the window's default close operation is set to JFrame.EXIT_ON_CLOSE.

Test Scenario 7: Check if window is visible
- Verify if the window is visible after creation.

Test Scenario 8: Check initialization of the input screen
- Verify if the input screen is properly initialized with the provided columns and rows.

Test Scenario 9: Check initialization of the calculator buttons
- Verify if the calculator buttons are properly initialized with the provided columns and rows.

Test Scenario 10: Check initialization of the calculator type selector
- Verify if the calculator type selector is properly initialized.

Test Scenario 11: Check initialization of the theme selector
- Verify if the theme selector is properly initialized.

Test Scenario 12: Check theme loading
- Verify if the themes are properly loaded into the themesMap from the ThemeLoader.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {

    @Mock
    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        calculatorUI = new CalculatorUI();
    }

    @Test
    public void testWindowCreation() {
        assertEquals(CalculatorUI.APPLICATION_TITLE, calculatorUI.window.getTitle());
        assertEquals(CalculatorUI.WINDOW_WIDTH, calculatorUI.window.getWidth());
        assertEquals(CalculatorUI.WINDOW_HEIGHT, calculatorUI.window.getHeight());
        assertNull(calculatorUI.window.getLayout());
        assertFalse(calculatorUI.window.isResizable());
        assertEquals(JFrame.EXIT_ON_CLOSE, calculatorUI.window.getDefaultCloseOperation());
        assertTrue(calculatorUI.window.isVisible());
    }

    @Test
    public void testInitInputScreen() {
        int[] columns = {20, 110, 200, 290, 380};
        int[] rows = {60, 160, 240, 320, 400, 480};
        calculatorUI.initInputScreen(columns, rows);

        verify(calculatorUI, times(1)).initInputScreen(columns, rows);
        assertEquals("0", calculatorUI.inputScreen.getText());
        assertEquals(columns[0], calculatorUI.inputScreen.getX());
        assertEquals(rows[0], calculatorUI.inputScreen.getY());
        assertEquals(350, calculatorUI.inputScreen.getWidth());
        assertEquals(70, calculatorUI.inputScreen.getHeight());
        assertFalse(calculatorUI.inputScreen.isEditable());
        assertEquals(Color.WHITE, calculatorUI.inputScreen.getBackground());
    }

    @Test
    public void testInitButtons() {
        int[] columns = {20, 110, 200, 290, 380};
        int[] rows = {60, 160, 240, 320, 400, 480};
        calculatorUI.initButtons(columns, rows);

        verify(calculatorUI, times(1)).initButtons(columns, rows);
    }

    @Test
    public void testInitCalculatorTypeSelector() {
        calculatorUI.initCalculatorTypeSelector();

        verify(calculatorUI, times(1)).initCalculatorTypeSelector();
    }

    @Test
    public void testInitThemeSelector() {
        calculatorUI.initThemeSelector();

        verify(calculatorUI, times(1)).initThemeSelector();
    }

    @Test
    public void testThemeLoading() {
        assertNotNull(calculatorUI.themesMap);
        assertTrue(calculatorUI.themesMap.size() > 0);
    }
}
