// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Verify that the "CalculatorUI" function is able to load themes correctly using the "ThemeLoader.loadThemes()" method.
2. Check whether the "CalculatorUI" function correctly initializes the JFrame with the expected title "APPLICATION_TITLE".
3. Verify if the window size is set correctly to the dimensions "WINDOW_WIDTH" and "WINDOW_HEIGHT".
4. Confirm that the window position is set relative to the screen center (null).
5. Test if the "CalculatorUI" function correctly initializes the input screen based on the provided columns and rows.
6. Verify if the "CalculatorUI" function correctly initializes the buttons based on the provided columns and rows.
7. Validate if the "CalculatorUI" function correctly initializes the calculator type selector.
8. Check whether the "CalculatorUI" function correctly initializes the theme selector.
9. Verify if the "CalculatorUI" function correctly sets the layout of the window to null.
10. Confirm that the "CalculatorUI" function correctly sets the window to be non-resizable.
11. Validate if the "CalculatorUI" function correctly sets the default close operation to "EXIT_ON_CLOSE".
12. Check if the "CalculatorUI" function correctly sets the window's visibility to true after all initializations. 
13. Verify that the "CalculatorUI" function correctly calculates the values of the "columns" and "rows" arrays.
14. Check if the "CalculatorUI" function handles exceptions correctly while initializing the components or loading the themes.
15. Validate if the "CalculatorUI" function correctly handles the scenario when the themes could not be loaded.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.houarizegai.calculator.theme.ThemeLoader;
import com.houarizegai.calculator.theme.properties.Theme;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.awt.Rectangle;
import java.util.Collections;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {

    @Mock
    private ThemeLoader themeLoader;

    @InjectMocks
    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setUp() throws JsonProcessingException {
        Map<String, Theme> themesMap = Collections.singletonMap("default", new Theme());
        when(themeLoader.loadThemes()).thenReturn(themesMap);
    }

    @Test
    public void testCalculatorUI() {
        assertNotNull(calculatorUI);

        // Verify that the JFrame window is initialized
        assertNotNull(calculatorUI.window);
        assertEquals(CalculatorUI.APPLICATION_TITLE, calculatorUI.window.getTitle());
        assertEquals(new Rectangle(0, 0, CalculatorUI.WINDOW_WIDTH, CalculatorUI.WINDOW_HEIGHT), calculatorUI.window.getBounds());
        assertFalse(calculatorUI.window.isResizable());
        assertEquals(JFrame.EXIT_ON_CLOSE, calculatorUI.window.getDefaultCloseOperation());
        assertTrue(calculatorUI.window.isVisible());

        // Verify that the components are initialized
        assertNotNull(calculatorUI.inputScreen);
        assertNotNull(calculatorUI.comboCalculatorType);
        assertNotNull(calculatorUI.comboTheme);

        // Verify that the theme was loaded
        verify(themeLoader, times(1)).loadThemes();
        assertEquals(1, calculatorUI.themesMap.size());
    }

    @Test
    public void testCalculatorUI_ThemeLoadFailed() throws JsonProcessingException {
        when(themeLoader.loadThemes()).thenThrow(JsonProcessingException.class);

        assertThrows(RuntimeException.class, () -> calculatorUI = new CalculatorUI());
        verify(themeLoader, times(1)).loadThemes();
    }
}
