// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Verify if the calculator window opens correctly with the specified size and location.
   - **Expected Result:** The CalculatorUI constructor should initialize a JFrame with the title as APPLICATION_TITLE, size as WINDOW_WIDTH and WINDOW_HEIGHT, and the location of the window should be at the center of the screen.

2. **Scenario:** Verify if the calculator window is not resizable and closes when the exit button is clicked.
   - **Expected Result:** The window should not be resizable and should close when the exit button is clicked.

3. **Scenario:** Verify if the calculator window layout is set to null.
   - **Expected Result:** The layout of the window should be null.

4. **Scenario:** Verify if the calculator window is visible after initialization.
   - **Expected Result:** The calculator window should be visible after the CalculatorUI constructor is called.

5. **Scenario:** Verify if the themes are loaded correctly from the ThemeLoader.
   - **Expected Result:** The themesMap should be initialized with the themes loaded from the ThemeLoader.

6. **Scenario:** Verify if the input screen, buttons, calculator type selector, and theme selector are initialized correctly.
   - **Expected Result:** The initInputScreen, initButtons, initCalculatorTypeSelector, and initThemeSelector methods should be called with the correct parameters.

7. **Scenario:** Verify if the correct columns and rows are generated for the calculator UI.
   - **Expected Result:** The columns and rows arrays should be initialized with the correct values, based on MARGIN_X, MARGIN_Y, and the multiples of 90 and 80 respectively. 

8. **Scenario:** Verify if the calculator window is displayed based on themes loaded from the ThemeLoader.
   - **Expected Result:** The calculator window should display based on the themes loaded from the ThemeLoader. 

9. **Scenario:** Verify if the calculator window is displayed with the correct components layout.
   - **Expected Result:** The calculator window should be displayed with the correct components layout based on the initialized input screen, buttons, calculator type selector, and theme selector.

10. **Scenario:** Verify if the calculator window is displayed with the correct calculator type and theme selected.
    - **Expected Result:** The calculator window should be displayed with the correct calculator type and theme selected based on the initialized calculator type selector and theme selector.
*/

// ********RoostGPT********
import com.houarizegai.calculator.CalculatorUI;
import com.houarizegai.calculator.theme.ThemeLoader;
import com.houarizegai.calculator.theme.properties.Theme;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import javax.swing.*;
import java.awt.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {

    private CalculatorUI calculatorUI;
    private JFrame window;

    @BeforeEach
    public void setUp() {
        calculatorUI = new CalculatorUI();
        window = (JFrame) Mockito.mock(JFrame.class);
    }

    @Test
    public void testCalculatorUIConstructor() {
        assertNotNull(calculatorUI);
        verify(window, times(1)).setSize(CalculatorUI.WINDOW_WIDTH, CalculatorUI.WINDOW_HEIGHT);
        verify(window, times(1)).setLocationRelativeTo(null);
        verify(window, times(1)).setLayout(null);
        verify(window, times(1)).setResizable(false);
        verify(window, times(1)).setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        verify(window, times(1)).setVisible(true);
    }

    @Test
    public void testThemesMap() {
        assertNotNull(ThemeLoader.loadThemes());
    }

    @Test
    public void testInitInputScreen() {
        int[] columns = {CalculatorUI.MARGIN_X, CalculatorUI.MARGIN_X + 90, CalculatorUI.MARGIN_X + 90 * 2, CalculatorUI.MARGIN_X + 90 * 3, CalculatorUI.MARGIN_X + 90 * 4};
        int[] rows = {CalculatorUI.MARGIN_Y, CalculatorUI.MARGIN_Y + 100, CalculatorUI.MARGIN_Y + 100 + 80, CalculatorUI.MARGIN_Y + 100 + 80 * 2, CalculatorUI.MARGIN_Y + 100 + 80 * 3, CalculatorUI.MARGIN_Y + 100 + 80 * 4};
        calculatorUI.initInputScreen(columns, rows);
        JTextField inputScreen = (JTextField) Mockito.mock(JTextField.class);
        verify(inputScreen, times(1)).setBounds(columns[0], rows[0], 350, 70);
        verify(inputScreen, times(1)).setEditable(false);
        verify(inputScreen, times(1)).setBackground(Color.WHITE);
    }

    @Test
    public void testInitCalculatorTypeSelector() {
        calculatorUI.initCalculatorTypeSelector();
        JComboBox<String> comboCalculatorType = (JComboBox<String>) Mockito.mock(JComboBox.class);
        verify(comboCalculatorType, times(1)).addItemListener(any());
    }

    @Test
    public void testInitThemeSelector() {
        calculatorUI.initThemeSelector();
        JComboBox<String> comboTheme = (JComboBox<String>) Mockito.mock(JComboBox.class);
        verify(comboTheme, times(1)).addItemListener(any());
    }

    @Test
    public void testApplyTheme() {
        Theme theme = Mockito.mock(Theme.class);
        when(theme.getApplicationBackground()).thenReturn("#FFFFFF");
        when(theme.getTextColor()).thenReturn("#000000");
        when(theme.getNumbersBackground()).thenReturn("#CCCCCC");
        when(theme.getOperatorBackground()).thenReturn("#EEEEEE");
        when(theme.getBtnEqualBackground()).thenReturn("#DDDDDD");
        when(theme.getBtnEqualTextColor()).thenReturn("#111111");
        calculatorUI.applyTheme(theme);
    }
}
