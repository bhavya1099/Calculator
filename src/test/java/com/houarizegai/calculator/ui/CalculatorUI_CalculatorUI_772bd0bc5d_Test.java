// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Verify if the calculator window opens correctly with the specified size and location.
   - **Test Steps:**
      - Call the CalculatorUI() function.
   - **Expected Result:** 
      - The calculator window should open with the size specified by WINDOW_WIDTH and WINDOW_HEIGHT.
      - The window should be located at the center of the screen.

2. **Scenario:** Verify if the calculator window is not resizable.
   - **Test Steps:**
      - Call the CalculatorUI() function.
      - Try to resize the opened window.
   - **Expected Result:** 
      - The window should not be resizable.

3. **Scenario:** Verify if the calculator window closes correctly when the close button is clicked.
   - **Test Steps:**
      - Call the CalculatorUI() function.
      - Click on the close button of the opened window.
   - **Expected Result:** 
      - The calculator window should close without any errors.

4. **Scenario:** Verify if the calculator elements are correctly positioned according to the specified margins and columns.
   - **Test Steps:**
      - Call the CalculatorUI() function.
   - **Expected Result:** 
      - The elements of the calculator should be positioned according to the specified columns and rows.

5. **Scenario:** Verify if the themes are correctly loaded and applied to the calculator.
   - **Test Steps:**
      - Call the CalculatorUI() function.
   - **Expected Result:** 
      - The themes should be correctly loaded and applied to the calculator.

6. **Scenario:** Verify if the calculator type selector is present and functioning correctly.
   - **Test Steps:**
      - Call the CalculatorUI() function.
      - Select different options from the calculator type selector.
   - **Expected Result:** 
      - The calculator type selector should be present and should change the calculator type based on the selected option.

7. **Scenario:** Verify if the calculator buttons are initialized and are functioning correctly.
   - **Test Steps:**
      - Call the CalculatorUI() function.
      - Click on the different buttons of the calculator.
   - **Expected Result:** 
      - The buttons should be present and should function according to their respective functionalities.

8. **Scenario:** Verify if the input screen is correctly initialized and is functioning correctly.
   - **Test Steps:**
      - Call the CalculatorUI() function.
      - Enter inputs in the input screen.
   - **Expected Result:** 
      - The input screen should be present and should accept and display the inputs correctly.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import com.houarizegai.calculator.theme.ThemeLoader;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import javax.swing.*;

import static org.junit.jupiter.api.Assertions.*;

public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {

    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setup() {
        calculatorUI = new CalculatorUI();
    }

    @Test
    public void testWindowProperties() {
        JFrame window = calculatorUI.getWindow();
        assertNotNull(window);
        assertEquals(CalculatorUI.APPLICATION_TITLE, window.getTitle());
        assertFalse(window.isResizable());
        assertEquals(JFrame.EXIT_ON_CLOSE, window.getDefaultCloseOperation());
    }

    @Test
    public void testThemesMapIsLoaded() {
        assertNotNull(calculatorUI.getThemesMap());
        assertTrue(calculatorUI.getThemesMap().size() > 0);
    }

    @Test
    public void testInitInputScreen() {
        JTextField inputScreen = calculatorUI.getInputScreen();
        assertNotNull(inputScreen);
        assertEquals("0", inputScreen.getText());
        assertFalse(inputScreen.isEditable());
    }

    @Test
    public void testInitButtons() {
        assertNotNull(calculatorUI.getBtn0());
        assertNotNull(calculatorUI.getBtn1());
        assertNotNull(calculatorUI.getBtn2());
        assertNotNull(calculatorUI.getBtn3());
        assertNotNull(calculatorUI.getBtn4());
        assertNotNull(calculatorUI.getBtn5());
        assertNotNull(calculatorUI.getBtn6());
        assertNotNull(calculatorUI.getBtn7());
        assertNotNull(calculatorUI.getBtn8());
        assertNotNull(calculatorUI.getBtn9());
        assertNotNull(calculatorUI.getBtnAdd());
        assertNotNull(calculatorUI.getBtnSub());
        assertNotNull(calculatorUI.getBtnMul());
        assertNotNull(calculatorUI.getBtnDiv());
        assertNotNull(calculatorUI.getBtnMod());
        assertNotNull(calculatorUI.getBtnC());
        assertNotNull(calculatorUI.getBtnBack());
        assertNotNull(calculatorUI.getBtnEqual());
        assertNotNull(calculatorUI.getBtnPoint());
        assertNotNull(calculatorUI.getBtnRoot());
        assertNotNull(calculatorUI.getBtnPower());
        assertNotNull(calculatorUI.getBtnLog());
    }

    @Test
    public void testInitCalculatorTypeSelector() {
        JComboBox<String> comboCalculatorType = calculatorUI.getComboCalculatorType();
        assertNotNull(comboCalculatorType);
        assertEquals(2, comboCalculatorType.getItemCount());
        assertEquals("Standard", comboCalculatorType.getItemAt(0));
        assertEquals("Scientific", comboCalculatorType.getItemAt(1));
    }

    @Test
    public void testInitThemeSelector() {
        JComboBox<String> comboTheme = calculatorUI.getComboTheme();
        assertNotNull(comboTheme);
        assertEquals(calculatorUI.getThemesMap().size(), comboTheme.getItemCount());
    }
}
