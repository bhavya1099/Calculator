// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Verify that the "CalculatorUI" function initializes the "themesMap" correctly by loading all themes.
2. Verify that the "CalculatorUI" function creates a new JFrame with the title as "APPLICATION_TITLE".
3. Verify that the JFrame window's size is set to "WINDOW_WIDTH" and "WINDOW_HEIGHT".
4. Verify that the JFrame window is centrally located on the screen.
5. Verify that the "initInputScreen" function is called with the correct "columns" and "rows" parameters.
6. Verify that the "initButtons" function is called with the correct "columns" and "rows" parameters.
7. Verify that the "initCalculatorTypeSelector" function is called during the initialization of the CalculatorUI.
8. Verify that the "initThemeSelector" function is called during the initialization of the CalculatorUI.
9. Verify that the JFrame window's layout is set to null.
10. Verify that the JFrame window's resizable property is set to false.
11. Verify that the JFrame window's default close operation is set to "JFrame.EXIT_ON_CLOSE".
12. Verify that the JFrame window is visible after the CalculatorUI function is called.
13. Verify that the CalculatorUI function correctly calculates the values of the "columns" and "rows" arrays.
14. Verify that the CalculatorUI function throws an exception if invalid values are provided for "WINDOW_WIDTH", "WINDOW_HEIGHT", "MARGIN_X", or "MARGIN_Y".
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.swing.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {

    private CalculatorUI calculatorUI;

    @Mock
    private ThemeLoader themeLoader;

    @BeforeEach
    public void setup() {
        calculatorUI = new CalculatorUI();
    }

    @Test
    public void testCalculatorUIInitialization() {
        when(themeLoader.loadThemes()).thenReturn(null);

        assertNotNull(calculatorUI.window);
        assertEquals(CalculatorUI.APPLICATION_TITLE, calculatorUI.window.getTitle());
        assertEquals(CalculatorUI.WINDOW_WIDTH, calculatorUI.window.getWidth());
        assertEquals(CalculatorUI.WINDOW_HEIGHT, calculatorUI.window.getHeight());
        assertNotNull(calculatorUI.window.getContentPane().getLayout());
        assertFalse(calculatorUI.window.isResizable());
        assertEquals(JFrame.EXIT_ON_CLOSE, calculatorUI.window.getDefaultCloseOperation());
        assertTrue(calculatorUI.window.isVisible());
    }

    @Test
    public void testInitInputScreen() {
        int[] columns = {CalculatorUI.MARGIN_X, CalculatorUI.MARGIN_X + 90, CalculatorUI.MARGIN_X + 90 * 2, CalculatorUI.MARGIN_X + 90 * 3, CalculatorUI.MARGIN_X + 90 * 4};
        int[] rows = {CalculatorUI.MARGIN_Y, CalculatorUI.MARGIN_Y + 100, CalculatorUI.MARGIN_Y + 100 + 80, CalculatorUI.MARGIN_Y + 100 + 80 * 2, CalculatorUI.MARGIN_Y + 100 + 80 * 3, CalculatorUI.MARGIN_Y + 100 + 80 * 4};

        calculatorUI.initInputScreen(columns, rows);

        assertNotNull(calculatorUI.inputScreen);
        assertEquals(columns[0], calculatorUI.inputScreen.getX());
        assertEquals(rows[0], calculatorUI.inputScreen.getY());
        assertEquals(350, calculatorUI.inputScreen.getWidth());
        assertEquals(70, calculatorUI.inputScreen.getHeight());
        assertFalse(calculatorUI.inputScreen.isEditable());
    }

    @Test
    public void testInitButtons() {
        int[] columns = {CalculatorUI.MARGIN_X, CalculatorUI.MARGIN_X + 90, CalculatorUI.MARGIN_X + 90 * 2, CalculatorUI.MARGIN_X + 90 * 3, CalculatorUI.MARGIN_X + 90 * 4};
        int[] rows = {CalculatorUI.MARGIN_Y, CalculatorUI.MARGIN_Y + 100, CalculatorUI.MARGIN_Y + 100 + 80, CalculatorUI.MARGIN_Y + 100 + 80 * 2, CalculatorUI.MARGIN_Y + 100 + 80 * 3, CalculatorUI.MARGIN_Y + 100 + 80 * 4};

        calculatorUI.initButtons(columns, rows);

        assertNotNull(calculatorUI.btnC);
        assertEquals(columns[0], calculatorUI.btnC.getX());
        assertEquals(rows[1], calculatorUI.btnC.getY());
        assertEquals(CalculatorUI.BUTTON_WIDTH, calculatorUI.btnC.getWidth());
        assertEquals(CalculatorUI.BUTTON_HEIGHT, calculatorUI.btnC.getHeight());
    }
}
