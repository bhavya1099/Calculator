// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Check if the application window is initialized correctly
- Verify if the application window is created with the correct title "APPLICATION_TITLE".
- Verify if the window size is set correctly as per the constants WINDOW_WIDTH and WINDOW_HEIGHT.
- Verify if the window is located in the center of the screen (since setLocationRelativeTo(null) is used).
- Verify if the application window is not resizable.
- Verify if the application closes when the window's close button is clicked (since setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE) is used).
- Verify if the application window is visible after initialization.

Test Scenario 2: Check if the theme is loaded correctly
- Verify if the themes are loaded correctly from the theme loader.
- Verify if the theme selector is initialized correctly.

Test Scenario 3: Check if the input screen and buttons are initialized correctly
- Verify if the input screen is initialized at the correct position as per the defined columns and rows.
- Verify if the buttons are initialized at the correct position as per the defined columns and rows.

Test Scenario 4: Check if the Calculator Type Selector is initialized correctly
- Verify if the Calculator Type Selector is initialized correctly.

Test Scenario 5: Check if the layout is set to null
- Verify if the layout of the window is set to null.

Test Scenario 6: Check the functioning of the calculator
- Verify if the calculator performs the basic operations like addition, subtraction, multiplication, and division correctly.
- Verify if the calculator handles invalid operations and displays an appropriate error message.

Test Scenario 7: Check the theme application
- Verify if the theme changes when a different theme is selected from the theme selector.
- Verify if the selected theme is applied across the entire application.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import com.houarizegai.calculator.theme.properties.Theme;
import com.houarizegai.calculator.theme.ThemeLoader;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {

    @Mock
    private ThemeLoader themeLoader;

    @Mock
    private Theme theme;

    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setup() {
        calculatorUI = new CalculatorUI();
    }

    @Test
    public void testWindowInitialization() {
        verify(calculatorUI.getWindow()).setLocationRelativeTo(null);
        verify(calculatorUI.getWindow()).setResizable(false);
        verify(calculatorUI.getWindow()).setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        verify(calculatorUI.getWindow()).setVisible(true);
    }

    @Test
    public void testThemeLoading() {
        when(themeLoader.loadThemes()).thenReturn(themesMap);
        calculatorUI.initThemeSelector();
    }

    @Test
    public void testCalculatorTypeSelectorInitialization() {
        assertNotNull(calculatorUI.getComboCalculatorType());
        assertEquals(2, calculatorUI.getComboCalculatorType().getItemCount());
        assertEquals("Standard", calculatorUI.getComboCalculatorType().getItemAt(0));
        assertEquals("Scientific", calculatorUI.getComboCalculatorType().getItemAt(1));
    }

    @Test
    public void testInputScreenAndButtonsInitialization() {
        assertNotNull(calculatorUI.getInputScreen());
        assertNotNull(calculatorUI.getBtn0());
        assertNotNull(calculatorUI.getBtn1());
        assertNotNull(calculatorUI.getBtn2());
        assertNotNull(calculatorUI.getBtn3());
        assertNotNull(calculatorUI.getBtn4());
        assertNotNull(calculatorUI.getBtn5());
        assertNotNull(calculatorUI.getBtn6());
        assertNotNull(calculatorUI.getBtn7());
        assertNotNull(calculatorUI.getBtn8());
        assertNotNull(calculatorUI.getBtn9());
        assertNotNull(calculatorUI.getBtnPoint());
        assertNotNull(calculatorUI.getBtnEqual());
        assertNotNull(calculatorUI.getBtnRoot());
        assertNotNull(calculatorUI.getBtnPower());
        assertNotNull(calculatorUI.getBtnLog());
    }

    @Test
    public void testLayoutSetting() {
        assertNull(calculatorUI.getWindow().getLayout());
    }

    @Test
    public void testThemeApplication() {
        Theme theme = new Theme();
        theme.setApplicationBackground("#FFFFFF");
        theme.setTextColor("#000000");
        theme.setNumbersBackground("#CCCCCC");
        theme.setOperatorBackground("#DDDDDD");
        theme.setBtnEqualBackground("#EEEEEE");
        theme.setBtnEqualTextColor("#111111");

        Map<String, Theme> themesMap = new HashMap<>();
        themesMap.put("White", theme);

        when(themeLoader.loadThemes()).thenReturn(themesMap);
        
        calculatorUI.applyTheme(theme);

        assertEquals(new Color(255, 255, 255), calculatorUI.getWindow().getContentPane().getBackground());
        assertEquals(new Color(204, 204, 204), calculatorUI.getBtn0().getBackground());
        assertEquals(new Color(221, 221, 221), calculatorUI.getBtnAdd().getBackground());
        assertEquals(new Color(238, 238, 238), calculatorUI.getBtnEqual().getBackground());
    }
}
