// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Check if the JFrame window is properly initialized
- Verify if the window is not null after CalculatorUI constructor is called.
- Check if the window title matches with the constant `APPLICATION_TITLE`.
- Validate if the window size is set correctly as per the constants `WINDOW_WIDTH` and `WINDOW_HEIGHT`.
- Confirm that the window is centered on the screen (location is relative to null).

Test Scenario 2: Check if the JFrame window properties are set correctly
- Validate if the layout of the window is set to null.
- Confirm if the window is not resizable.
- Check if the default close operation of the window is set to `JFrame.EXIT_ON_CLOSE`.
- Verify if the window is made visible after the CalculatorUI constructor is called.

Test Scenario 3: Check the initialization of input screen and buttons
- Verify if the `initInputScreen` method is called with correct parameters.
- Check if the `initButtons` method is called with correct parameters.

Test Scenario 4: Check the initialization of calculator type selector and theme selector
- Confirm if the `initCalculatorTypeSelector` method is called during the CalculatorUI construction.
- Validate if the `initThemeSelector` method is called during the CalculatorUI construction.

Test Scenario 5: Test the theme loading functionality
- Check if the `themesMap` is not null after CalculatorUI constructor is called.
- Verify if the `ThemeLoader.loadThemes()` method is called during the CalculatorUI construction. 

Test Scenario 6: Check the calculations of columns and rows array
- Validate if the calculations for the arrays `columns` and `rows` are done correctly based on the constants `MARGIN_X` and `MARGIN_Y`.
- Confirm if the arrays `columns` and `rows` have expected number of elements.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import com.houarizegai.calculator.theme.ThemeLoader;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import javax.swing.*;

public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {
    private CalculatorUI calculatorUI;
    private JFrame mockedWindow;

    @BeforeEach
    public void setUp() {
        mockedWindow = mock(JFrame.class);
        calculatorUI = new CalculatorUI();
        calculatorUI.window = mockedWindow;
    }

    @Test
    public void testConstructor_WindowProperties() {
        calculatorUI = new CalculatorUI();
        assertNotNull(calculatorUI.window);
        assertEquals(CalculatorUI.APPLICATION_TITLE, calculatorUI.window.getTitle());
        assertEquals(CalculatorUI.WINDOW_WIDTH, calculatorUI.window.getWidth());
        assertEquals(CalculatorUI.WINDOW_HEIGHT, calculatorUI.window.getHeight());
        assertNull(calculatorUI.window.getLocation());
    }

    @Test
    public void testConstructor_WindowSettings() {
        calculatorUI = new CalculatorUI();
        verify(mockedWindow).setLayout(null);
        verify(mockedWindow).setResizable(false);
        verify(mockedWindow).setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        verify(mockedWindow).setVisible(true);
    }

    @Test
    public void testConstructor_InputScreenAndButtonsInit() {
        verify(calculatorUI).initInputScreen(any(int[].class), any(int[].class));
        verify(calculatorUI).initButtons(any(int[].class), any(int[].class));
    }

    @Test
    public void testConstructor_CalculatorTypeAndThemeSelectorInit() {
        verify(calculatorUI).initCalculatorTypeSelector();
        verify(calculatorUI).initThemeSelector();
    }

    @Test
    public void testConstructor_ThemeLoading() {
        assertNotNull(calculatorUI.themesMap);
        assertEquals(ThemeLoader.loadThemes(), calculatorUI.themesMap);
    }

    @Test
    public void testConstructor_ColumnsAndRowsCalculation() {
        int[] expectedColumns = {CalculatorUI.MARGIN_X, CalculatorUI.MARGIN_X + 90, CalculatorUI.MARGIN_X + 90 * 2, CalculatorUI.MARGIN_X + 90 * 3, CalculatorUI.MARGIN_X + 90 * 4};
        int[] expectedRows = {CalculatorUI.MARGIN_Y, CalculatorUI.MARGIN_Y + 100, CalculatorUI.MARGIN_Y + 100 + 80, CalculatorUI.MARGIN_Y + 100 + 80 * 2, CalculatorUI.MARGIN_Y + 100 + 80 * 3, CalculatorUI.MARGIN_Y + 100 + 80 * 4};
        assertArrayEquals(expectedColumns, calculatorUI.columns);
        assertArrayEquals(expectedRows, calculatorUI.rows);
    }
}
