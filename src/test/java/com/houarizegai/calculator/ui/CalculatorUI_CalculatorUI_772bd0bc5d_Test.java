// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Check if the application window is initialized correctly
- Verify if the application window is created with the correct title "APPLICATION_TITLE".
- Verify if the window size is set correctly as per the constants WINDOW_WIDTH and WINDOW_HEIGHT.
- Verify if the window is located in the center of the screen (since setLocationRelativeTo(null) is used).
- Verify if the application window is not resizable.
- Verify if the application closes when the window's close button is clicked (since setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE) is used).
- Verify if the application window is visible after initialization.

Test Scenario 2: Check if the theme is loaded correctly
- Verify if the themes are loaded correctly from the theme loader.
- Verify if the theme is applied correctly to the application window.

Test Scenario 3: Check if the input screen is initialized correctly
- Verify if the input screen is initialized at the correct position as per the 'columns' and 'rows' parameters.
- Verify if the input screen is visible after initialization.

Test Scenario 4: Check if the buttons are initialized correctly
- Verify if the buttons are initialized at the correct positions as per the 'columns' and 'rows' parameters.
- Verify if the buttons are visible after initialization.

Test Scenario 5: Check if the calculator type selector is initialized correctly
- Verify if the calculator type selector is initialized.
- Verify if the calculator type selector is visible after initialization.

Test Scenario 6: Check if the theme selector is initialized correctly
- Verify if the theme selector is initialized.
- Verify if the theme selector is visible after initialization.

Test Scenario 7: Check the layout of the application window
- Verify if the layout of the application window is set to null.

Please note that the actual validation would depend on the implementation details of the methods like initInputScreen(), initButtons(), initCalculatorTypeSelector(), and initThemeSelector().
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.swing.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {

    @Mock
    private JFrame window;

    @Mock
    private ThemeLoader themeLoader;

    @InjectMocks
    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setUp() {
        calculatorUI = new CalculatorUI();
    }

    @Test
    public void testCalculatorUI() {
        verify(themeLoader).loadThemes();

        verify(window).setSize(calculatorUI.WINDOW_WIDTH, calculatorUI.WINDOW_HEIGHT);
        verify(window).setLocationRelativeTo(null);
        verify(window).setLayout(null);
        verify(window).setResizable(false);
        verify(window).setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        verify(window).setVisible(true);

        assertNotNull(calculatorUI.initInputScreen(anyInt(), anyInt()));
        assertNotNull(calculatorUI.initButtons(anyInt(), anyInt()));
        assertNotNull(calculatorUI.initCalculatorTypeSelector());
        assertNotNull(calculatorUI.initThemeSelector());
    }
}
