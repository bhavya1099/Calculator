// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Check if the CalculatorUI loads properly without any exceptions or errors.
2. Test Scenario: Verify if the CalculatorUI loads with the correct application title as set in the APPLICATION_TITLE variable.
3. Test Scenario: Check if the window size of the CalculatorUI is set correctly as per the WINDOW_WIDTH and WINDOW_HEIGHT variables.
4. Test Scenario: Verify if the CalculatorUI window is centered on the screen when it is loaded.
5. Test Scenario: Check if the CalculatorUI initializes the input screen correctly with the specified columns and rows.
6. Test Scenario: Verify if the CalculatorUI initializes the buttons correctly with the specified columns and rows.
7. Test Scenario: Check if the CalculatorUI initializes the CalculatorTypeSelector correctly.
8. Test Scenario: Verify if the CalculatorUI initializes the ThemeSelector correctly.
9. Test Scenario: Check if the CalculatorUI window layout is set to null.
10. Test Scenario: Verify if the CalculatorUI window is not resizable.
11. Test Scenario: Check if the CalculatorUI window closes on clicking the exit button.
12. Test Scenario: Verify if the CalculatorUI window becomes visible when the CalculatorUI function is called.
13. Test Scenario: Check if the themesMap is loaded correctly with all the themes available in the ThemeLoader.
14. Test Scenario: Verify if any change in theme is reflected in the CalculatorUI.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {

    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setUp() {
        calculatorUI = new CalculatorUI();
    }

    @Test
    @DisplayName("Test if CalculatorUI loads correctly")
    public void testIfCalculatorUILoadsCorrectly() {
        assertNotNull(calculatorUI);
    }

    @Test
    @DisplayName("Test if CalculatorUI loads with correct title")
    public void testCalculatorUITitle() {
        assertEquals("Calculator", calculatorUI.window.getTitle());
    }

    @Test
    @DisplayName("Test if CalculatorUI loads with correct window size")
    public void testCalculatorUIWindowSize() {
        assertEquals(410, calculatorUI.window.getWidth());
        assertEquals(600, calculatorUI.window.getHeight());
    }

    @Test
    @DisplayName("Test if CalculatorUI loads in the center of the screen")
    public void testCalculatorUILocation() {
        assertNull(calculatorUI.window.getLocation());
    }

    @Test
    @DisplayName("Test if CalculatorUI initializes the input screen correctly")
    public void testCalculatorUIInputScreenInitialization() {
        assertNotNull(calculatorUI.inputScreen);
    }

    @Test
    @DisplayName("Test if CalculatorUI initializes the buttons correctly")
    public void testCalculatorUIButtonsInitialization() {
        assertNotNull(calculatorUI.btn0);
        assertNotNull(calculatorUI.btn1);
        assertNotNull(calculatorUI.btn2);
        assertNotNull(calculatorUI.btn3);
        assertNotNull(calculatorUI.btn4);
        assertNotNull(calculatorUI.btn5);
        assertNotNull(calculatorUI.btn6);
        assertNotNull(calculatorUI.btn7);
        assertNotNull(calculatorUI.btn8);
        assertNotNull(calculatorUI.btn9);
        assertNotNull(calculatorUI.btnPoint);
        assertNotNull(calculatorUI.btnEqual);
        assertNotNull(calculatorUI.btnRoot);
        assertNotNull(calculatorUI.btnPower);
        assertNotNull(calculatorUI.btnLog);
        assertNotNull(calculatorUI.btnAdd);
        assertNotNull(calculatorUI.btnSub);
        assertNotNull(calculatorUI.btnMul);
        assertNotNull(calculatorUI.btnDiv);
        assertNotNull(calculatorUI.btnMod);
        assertNotNull(calculatorUI.btnBack);
        assertNotNull(calculatorUI.btnC);
    }

    @Test
    @DisplayName("Test if CalculatorUI initializes the CalculatorTypeSelector correctly")
    public void testCalculatorUICalculatorTypeSelectorInitialization() {
        assertNotNull(calculatorUI.comboCalculatorType);
    }

    @Test
    @DisplayName("Test if CalculatorUI initializes the ThemeSelector correctly")
    public void testCalculatorUIThemeSelectorInitialization() {
        assertNotNull(calculatorUI.comboTheme);
    }

    @Test
    @DisplayName("Test if CalculatorUI window layout is set to null")
    public void testCalculatorUIWindowLayout() {
        assertNull(calculatorUI.window.getLayout());
    }

    @Test
    @DisplayName("Test if CalculatorUI window is not resizable")
    public void testCalculatorUIWindowResizable() {
        assertFalse(calculatorUI.window.isResizable());
    }

    @Test
    @DisplayName("Test if CalculatorUI window closes on clicking the exit button")
    public void testCalculatorUIWindowExitOnClose() {
        assertEquals(JFrame.EXIT_ON_CLOSE, calculatorUI.window.getDefaultCloseOperation());
    }

    @Test
    @DisplayName("Test if CalculatorUI window becomes visible when the CalculatorUI function is called")
    public void testCalculatorUIWindowVisible() {
        assertTrue(calculatorUI.window.isVisible());
    }

    @Test
    @DisplayName("Test if themesMap is loaded correctly with all the themes available in the ThemeLoader")
    public void testCalculatorUIThemesMap() {
        assertNotNull(calculatorUI.themesMap);
    }

    @Test
    @DisplayName("Test if any change in theme is reflected in the CalculatorUI")
    public void testCalculatorUIThemeChange() {
        calculatorUI.applyTheme(calculatorUI.themesMap.get("Dark"));
        assertEquals(new Color(0, 0, 0), calculatorUI.window.getContentPane().getBackground());
    }

    @AfterEach
    public void tearDown() {
        calculatorUI = null;
    }
}
