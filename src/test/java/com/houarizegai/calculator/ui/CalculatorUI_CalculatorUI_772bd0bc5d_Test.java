// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Validate the loading of themes
   - Check if the `ThemeLoader.loadThemes()` method is correctly loading the themes into `themesMap`.

2. Scenario: Validate the initialization of the JFrame
   - Check if the `JFrame` is being initialized with the expected title (`APPLICATION_TITLE`).
   - Check if the `JFrame` is being initialized with the expected size (`WINDOW_WIDTH` and `WINDOW_HEIGHT`).
   - Check if the `JFrame` is being centered on the screen (`window.setLocationRelativeTo(null)`).

3. Scenario: Validate the initialization of the calculator layout
   - Check if the `initInputScreen(columns, rows)` method is correctly initializing the input screen.
   - Check if the `initButtons(columns, rows)` method is correctly initializing the calculator buttons.
   - Check if the `initCalculatorTypeSelector()` method is correctly initializing the calculator type selector.

4. Scenario: Validate the initialization of the theme selector
   - Check if the `initThemeSelector()` method is correctly initializing the theme selector.

5. Scenario: Validate the JFrame properties
   - Check if the `JFrame` layout is set to null.
   - Check if the `JFrame` is not resizable.
   - Check if the `JFrame` default close operation is set to `EXIT_ON_CLOSE`.
   - Check if the `JFrame` is visible after initialization.

6. Scenario: Validate the calculator layout
   - Check if the specified margins and spacing between elements (columns and rows) are correctly applied.

7. Scenario: Validate the correct functioning of the calculator
   - Check if the calculator buttons are functioning as expected.
   - Check if the calculator type selector is functioning as expected.
   - Check if the theme selector is functioning as expected.

8. Scenario: Validate the application of selected theme
   - Check if the selected theme is correctly applied to the calculator UI.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Color;
import javax.swing.*;

public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {

    @Mock
    private JFrame window;

    @Mock
    private ThemeLoader themeLoader;

    @InjectMocks
    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCalculatorUI() {
        // Mock ThemeLoader
        when(themeLoader.loadThemes()).thenReturn(new HashMap<>());

        // Execute the method
        calculatorUI = new CalculatorUI();

        // Verify if the JFrame is correctly initialized
        verify(window).setSize(410, 600);
        verify(window).setLocationRelativeTo(null);
        verify(window).setLayout(null);
        verify(window).setResizable(false);
        verify(window).setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        verify(window).setVisible(true);

        // Verify if the themes are correctly loaded
        verify(themeLoader).loadThemes();
    }

    @Test
    public void testCalculate() {
        double result = calculatorUI.calculate(2, 3, '+');
        assertEquals(5, result);
        
        result = calculatorUI.calculate(2, 3, '-');
        assertEquals(-1, result);
        
        result = calculatorUI.calculate(2, 3, '*');
        assertEquals(6, result);
        
        result = calculatorUI.calculate(6, 2, '/');
        assertEquals(3, result);
        
        result = calculatorUI.calculate(10, 3, '%');
        assertEquals(1, result);
        
        result = calculatorUI.calculate(2, 3, '^');
        assertEquals(8, result);
    }
}
