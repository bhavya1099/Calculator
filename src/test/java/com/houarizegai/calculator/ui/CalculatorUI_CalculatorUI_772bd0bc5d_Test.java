// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Verify that the "CalculatorUI" function initializes the "themesMap" correctly by loading all themes.
2. Verify that the "CalculatorUI" function initializes a new JFrame with the title as "APPLICATION_TITLE".
3. Verify that the "CalculatorUI" function sets the JFrame size to "WINDOW_WIDTH" and "WINDOW_HEIGHT".
4. Verify that the "CalculatorUI" function sets the JFrame location to the center of the screen.
5. Test the "CalculatorUI" function to check if the "columns" and "rows" arrays are initialized correctly using the "MARGIN_X" and "MARGIN_Y" values.
6. Verify that the "CalculatorUI" function successfully initializes the input screen using the "initInputScreen" method.
7. Verify that the "CalculatorUI" function successfully initializes the buttons using the "initButtons" method.
8. Verify that the "CalculatorUI" function successfully initializes the calculator type selector using the "initCalculatorTypeSelector" method.
9. Verify that the "CalculatorUI" function successfully initializes the theme selector using the "initThemeSelector" method.
10. Verify that the "CalculatorUI" function sets the JFrame layout to null.
11. Verify that the "CalculatorUI" function sets the JFrame to non-resizable.
12. Verify that the "CalculatorUI" function sets the default operation for the JFrame close button to "EXIT_ON_CLOSE".
13. Verify that the "CalculatorUI" function sets the JFrame to visible after all initializations.
*/

// ********RoostGPT********
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.houarizegai.calculator.theme.ThemeLoader;
import com.houarizegai.calculator.ui.CalculatorUI;
import java.util.HashMap;

public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {

    private CalculatorUI calculatorUI;
    private HashMap<String, Theme> themesMap;

    @BeforeEach
    public void setUp() {
        themesMap = mock(HashMap.class);
        ThemeLoader.loadThemes = mock(ThemeLoader.class);
        when(ThemeLoader.loadThemes()).thenReturn(themesMap);

        calculatorUI = new CalculatorUI();
    }

    @Test
    public void testCalculatorUI() {
        assertNotNull(calculatorUI);
        assertEquals("Calculator", calculatorUI.window.getTitle());
        assertEquals(410, calculatorUI.window.getWidth());
        assertEquals(600, calculatorUI.window.getHeight());
        assertNotNull(calculatorUI.window.getContentPane());
        assertNull(calculatorUI.window.getLayout());
        assertFalse(calculatorUI.window.isResizable());
        assertEquals(JFrame.EXIT_ON_CLOSE, calculatorUI.window.getDefaultCloseOperation());
        assertTrue(calculatorUI.window.isVisible());
        verify(ThemeLoader, times(1)).loadThemes();
        verify(themesMap, times(1)).keySet();
    }

    @Test
    public void testInitInputScreen() {
        int[] columns = {20, 20 + 90, 20 + 90 * 2, 20 + 90 * 3, 20 + 90 * 4};
        int[] rows = {60, 60 + 100, 60 + 100 + 80, 60 + 100 + 80 * 2, 60 + 100 + 80 * 3, 60 + 100 + 80 * 4};
        calculatorUI.initInputScreen(columns, rows);
        assertEquals("0", calculatorUI.inputScreen.getText());
        assertFalse(calculatorUI.inputScreen.isEditable());
    }

    @Test
    public void testInitCalculatorTypeSelector() {
        calculatorUI.initCalculatorTypeSelector();
        assertEquals("Calculator type", calculatorUI.comboCalculatorType.getToolTipText());
    }

    @Test
    public void testInitThemeSelector() {
        calculatorUI.initThemeSelector();
        assertEquals("Theme", calculatorUI.comboTheme.getToolTipText());
    }
}
