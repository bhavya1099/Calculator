// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Validate the loading of themes
   - Check if the `ThemeLoader.loadThemes()` method is correctly loading the themes into `themesMap`.

2. Scenario: Validate the initialization of the JFrame
   - Check if the `window` object is being correctly instantiated as a new `JFrame`.
   - Check if the window is set to the correct size as defined by `WINDOW_WIDTH` and `WINDOW_HEIGHT`.
   - Check if the window location is set to be in the center of the screen (null).

3. Scenario: Validate the setting of columns and rows
   - Check if the `columns` and `rows` arrays are correctly initialized with the expected values.

4. Scenario: Validate the initialization of the input screen
   - Check if the `initInputScreen(columns, rows)` method is correctly initializing the input screen with the correct column and row values.

5. Scenario: Validate the initialization of buttons
   - Check if the `initButtons(columns, rows)` method is correctly initializing the buttons with the correct column and row values.

6. Scenario: Validate the initialization of the calculator type selector
   - Check if the `initCalculatorTypeSelector()` method is correctly initializing the calculator type selector.

7. Scenario: Validate the initialization of the theme selector
   - Check if the `initThemeSelector()` method is correctly initializing the theme selector.

8. Scenario: Validate JFrame properties
   - Check if the layout of the window is set to null.
   - Check if the window is correctly set to be non-resizable.
   - Check if the default close operation of the window is set to `JFrame.EXIT_ON_CLOSE`.
   - Check if the window is set to be visible.

9. Scenario: Validate the application title
   - Check if the window title is correctly set to `APPLICATION_TITLE`.

10. Scenario: Validate the theme application
    - Change the theme using the theme selector and check if the new theme is correctly applied to the calculator.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import com.houarizegai.calculator.theme.ThemeLoader;
import com.houarizegai.calculator.theme.properties.Theme;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.swing.*;
import java.awt.*;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {

    @Mock
    private ThemeLoader themeLoader;

    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setUp() {
        calculatorUI = new CalculatorUI();
    }

    @Test
    public void testCalculatorUI() {
        Map<String, Theme> themesMap = new HashMap<>();
        when(themeLoader.loadThemes()).thenReturn(themesMap);

        calculatorUI = new CalculatorUI();
        
        JFrame window = calculatorUI.getWindow();

        assertNotNull(window);
        assertEquals("Calculator", window.getTitle());
        assertEquals(new Dimension(410, 600), window.getSize());
        assertNull(window.getLocation());
        assertFalse(window.isResizable());
        assertEquals(JFrame.EXIT_ON_CLOSE, window.getDefaultCloseOperation());
        assertTrue(window.isVisible());

        int[] columns = calculatorUI.getColumns();
        int[] rows = calculatorUI.getRows();

        assertNotNull(columns);
        assertEquals(5, columns.length);
        for(int i = 0; i < columns.length; i++) {
            assertEquals(20 + 90 * i, columns[i]);
        }

        assertNotNull(rows);
        assertEquals(6, rows.length);
        for(int i = 0; i < rows.length; i++) {
            assertEquals(60 + 100 + 80 * i, rows[i]);
        }

        JTextField inputScreen = calculatorUI.getInputScreen();
        assertNotNull(inputScreen);
        assertEquals("0", inputScreen.getText());

        JButton btnC = calculatorUI.getBtnC();
        assertNotNull(btnC);
        assertEquals("C", btnC.getText());

        JComboBox<String> comboCalculatorType = calculatorUI.getComboCalculatorType();
        assertNotNull(comboCalculatorType);
        assertEquals(2, comboCalculatorType.getItemCount());

        JComboBox<String> comboTheme = calculatorUI.getComboTheme();
        assertNotNull(comboTheme);
        assertEquals(themesMap.size(), comboTheme.getItemCount());
    }
}
