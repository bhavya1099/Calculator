// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Verify that the "CalculatorUI" function initializes the "themesMap" with the expected values from "ThemeLoader.loadThemes()".

2. Verify that the "CalculatorUI" function creates a new JFrame with the title "APPLICATION_TITLE".

3. Verify that the "CalculatorUI" function sets the size of the window to "WINDOW_WIDTH" and "WINDOW_HEIGHT".

4. Verify that the "CalculatorUI" function positions the window in the center of the screen.

5. Verify that the "CalculatorUI" function correctly initializes the "columns" and "rows" arrays with the expected values.

6. Verify that the "CalculatorUI" function calls the "initInputScreen" method with the correct "columns" and "rows" parameters.

7. Verify that the "CalculatorUI" function calls the "initButtons" method with the correct "columns" and "rows" parameters.

8. Verify that the "CalculatorUI" function calls the "initCalculatorTypeSelector" method.

9. Verify that the "CalculatorUI" function calls the "initThemeSelector" method.

10. Verify that the "CalculatorUI" function sets the layout of the window to "null".

11. Verify that the "CalculatorUI" function sets the window as not resizable.

12. Verify that the "CalculatorUI" function sets the default close operation of the window to "JFrame.EXIT_ON_CLOSE".

13. Verify that the "CalculatorUI" function sets the window as visible.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.awt.*;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {

    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setup() {
        calculatorUI = new CalculatorUI();
    }

    @Test
    public void testCalculatorUI() {
        Theme theme = new Theme();
        theme.setApplicationBackground("#000000");
        theme.setTextColor("#FFFFFF");
        theme.setNumbersBackground("#000000");
        theme.setOperatorBackground("#000000");
        theme.setBtnEqualBackground("#000000");
        theme.setBtnEqualTextColor("#FFFFFF");

        Map<String, Theme> themes = Map.of("Default", theme);

        try (MockedStatic<ThemeLoader> mocked = Mockito.mockStatic(ThemeLoader.class)) {
            mocked.when(ThemeLoader::loadThemes).thenReturn(themes);

            calculatorUI = new CalculatorUI();

            JFrame window = calculatorUI.getWindow();

            assertEquals("Calculator", window.getTitle());
            assertEquals(new Dimension(410, 600), window.getSize());
            assertEquals(JFrame.EXIT_ON_CLOSE, window.getDefaultCloseOperation());
            assertFalse(window.isResizable());
            assertTrue(window.isVisible());

            verify(mocked, times(1)).loadThemes();
        }
    }
}
