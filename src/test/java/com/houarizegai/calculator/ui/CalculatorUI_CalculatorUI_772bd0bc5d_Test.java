// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Verify that the "CalculatorUI" function initializes the "themesMap" correctly by loading all themes.
2. Verify that the "CalculatorUI" function initializes a new JFrame with the title as "APPLICATION_TITLE".
3. Verify that the "CalculatorUI" function sets the JFrame size to "WINDOW_WIDTH" and "WINDOW_HEIGHT".
4. Verify that the "CalculatorUI" function sets the JFrame location to the center of the screen.
5. Test the "CalculatorUI" function to check if the "columns" and "rows" arrays are initialized correctly using the "MARGIN_X" and "MARGIN_Y" values.
6. Verify that the "CalculatorUI" function successfully calls the "initInputScreen" method with "columns" and "rows" arrays as arguments.
7. Verify that the "CalculatorUI" function successfully calls the "initButtons" method with "columns" and "rows" arrays as arguments.
8. Verify that the "CalculatorUI" function successfully calls the "initCalculatorTypeSelector" method.
9. Verify that the "CalculatorUI" function successfully calls the "initThemeSelector" method.
10. Test the "CalculatorUI" function to check if it sets the JFrame layout to null.
11. Verify that the "CalculatorUI" function sets the JFrame to non-resizable.
12. Verify that the "CalculatorUI" function sets the default close operation of the JFrame to "EXIT_ON_CLOSE".
13. Test the "CalculatorUI" function to check if it sets the JFrame to visible.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import com.houarizegai.calculator.theme.properties.Theme;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.swing.*;

import java.awt.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {

    @InjectMocks
    private CalculatorUI calculatorUI;

    @Mock
    private Theme theme;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCalculatorUI() {
        // Mock JFrame
        JFrame windowMock = mock(JFrame.class);
        calculatorUI.window = windowMock;
        
        // Call the method under test
        calculatorUI.CalculatorUI();

        // Verify that the window title was set correctly
        verify(windowMock).setTitle(eq(CalculatorUI.APPLICATION_TITLE));

        // Verify that the window size was set correctly
        verify(windowMock).setSize(eq(CalculatorUI.WINDOW_WIDTH), eq(CalculatorUI.WINDOW_HEIGHT));

        // Verify that the window location was set to the center of the screen
        verify(windowMock).setLocationRelativeTo(null);

        // Verify that the window layout was set to null
        verify(windowMock).setLayout(eq(null));

        // Verify that the window was set to non-resizable
        verify(windowMock).setResizable(false);

        // Verify that the window's default close operation was set to EXIT_ON_CLOSE
        verify(windowMock).setDefaultCloseOperation(eq(JFrame.EXIT_ON_CLOSE));

        // Verify that the window visibility was set to true
        verify(windowMock).setVisible(true);

        // Verify that the theme was loaded
        assertNotNull(calculatorUI.themesMap);

        // Verify that the initInputScreen, initButtons, initCalculatorTypeSelector, and initThemeSelector methods were called
        verify(calculatorUI).initInputScreen(any(), any());
        verify(calculatorUI).initButtons(any(), any());
        verify(calculatorUI).initCalculatorTypeSelector();
        verify(calculatorUI).initThemeSelector();
    }
}
