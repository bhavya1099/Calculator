// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Verify the initialization of the CalculatorUI, where we check if the JFrame window is created with the correct title, size, and location.
2. Scenario: Verify if the window layout is null, the window is not resizable, and the default close operation is set to EXIT_ON_CLOSE.
3. Scenario: Verify the visibility of the window, the window should be visible after the CalculatorUI initialization.
4. Scenario: Verify the dimensions of the columns and rows used in the layout of the CalculatorUI. The dimensions should match with the given values.
5. Scenario: Verify the initialization of the input screen and buttons with the given column and row values.
6. Scenario: Verify the initialization of CalculatorTypeSelector, which should be present in the CalculatorUI.
7. Scenario: Verify the initialization of ThemeSelector, which should be present in the CalculatorUI.
8. Scenario: Verify if the theme map is correctly loaded from the ThemeLoader.
9. Scenario: Verify the behavior of the application when different themes are selected from the ThemeSelector.
10. Scenario: Verify that all the elements (input screen, buttons, theme selector, calculator type selector) are correctly placed according to the given rows and columns.
11. Scenario: Verify the behavior of the application when the window is closed. It should exit without any errors.
12. Scenario: Verify the behavior of the application when any button is pressed. It should respond accordingly.
13. Scenario: Verify the behavior of the application when different calculator types are selected from the CalculatorTypeSelector.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import javax.swing.*;

@ExtendWith(MockitoExtension.class)
public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {

    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setUp() {
        calculatorUI = new CalculatorUI();
    }

    @AfterEach
    public void tearDown() {
        calculatorUI = null;
    }

    @Test
    public void testCalculatorUIInitialization() {
        JFrame window = calculatorUI.getWindow();
        assertNotNull(window);
        assertEquals(calculatorUI.APPLICATION_TITLE, window.getTitle());
        assertEquals(calculatorUI.WINDOW_WIDTH, window.getWidth());
        assertEquals(calculatorUI.WINDOW_HEIGHT, window.getHeight());
        assertEquals(JFrame.EXIT_ON_CLOSE, window.getDefaultCloseOperation());
        assertFalse(window.isResizable());
        assertNull(window.getLayout());
        assertTrue(window.isVisible());
    }

    @Test
    public void testCalculatorUIComponents() {
        assertNotNull(calculatorUI.getComboCalculatorType());
        assertNotNull(calculatorUI.getComboTheme());
        assertNotNull(calculatorUI.getInputScreen());
        assertNotNull(calculatorUI.getThemesMap());
    }

    @Test
    public void testCalculatorUIButtonInitialization() {
        assertNotNull(calculatorUI.getBtnC());
        assertNotNull(calculatorUI.getBtnBack());
        assertNotNull(calculatorUI.getBtnMod());
        assertNotNull(calculatorUI.getBtnDiv());
        assertNotNull(calculatorUI.getBtnMul());
        assertNotNull(calculatorUI.getBtnSub());
        assertNotNull(calculatorUI.getBtnAdd());
        assertNotNull(calculatorUI.getBtn0());
        assertNotNull(calculatorUI.getBtn1());
        assertNotNull(calculatorUI.getBtn2());
        assertNotNull(calculatorUI.getBtn3());
        assertNotNull(calculatorUI.getBtn4());
        assertNotNull(calculatorUI.getBtn5());
        assertNotNull(calculatorUI.getBtn6());
        assertNotNull(calculatorUI.getBtn7());
        assertNotNull(calculatorUI.getBtn8());
        assertNotNull(calculatorUI.getBtn9());
        assertNotNull(calculatorUI.getBtnPoint());
        assertNotNull(calculatorUI.getBtnEqual());
        assertNotNull(calculatorUI.getBtnRoot());
        assertNotNull(calculatorUI.getBtnPower());
        assertNotNull(calculatorUI.getBtnLog());
    }
}
