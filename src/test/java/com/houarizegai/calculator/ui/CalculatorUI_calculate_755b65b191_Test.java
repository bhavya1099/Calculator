// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Here are some test scenarios for the function calculate:

1. Test Scenario: Addition of two positive numbers
   - Input: firstNumber = 4, secondNumber = 5, operator = '+'
   - Expected Output: 9.0

2. Test Scenario: Subtraction of two positive numbers where the first number is greater than the second
   - Input: firstNumber = 10, secondNumber = 5, operator = '-'
   - Expected Output: 5.0

3. Test Scenario: Subtraction of two positive numbers where the second number is greater than the first
   - Input: firstNumber = 2, secondNumber = 5, operator = '-'
   - Expected Output: -3.0

4. Test Scenario: Multiplication of two positive numbers
   - Input: firstNumber = 3, secondNumber = 5, operator = '*'
   - Expected Output: 15.0

5. Test Scenario: Division of two positive numbers where the first number is greater than the second
   - Input: firstNumber = 10, secondNumber = 5, operator = '/'
   - Expected Output: 2.0

6. Test Scenario: Division of two positive numbers where the second number is greater than the first
   - Input: firstNumber = 5, secondNumber = 10, operator = '/'
   - Expected Output: 0.5

7. Test Scenario: Division by zero
   - Input: firstNumber = 5, secondNumber = 0, operator = '/'
   - Expected Output: Infinity

8. Test Scenario: Modulus operation where the first number is greater than the second
   - Input: firstNumber = 10, secondNumber = 3, operator = '%'
   - Expected Output: 1.0

9. Test Scenario: Modulus operation where the second number is greater than the first
   - Input: firstNumber = 3, secondNumber = 10, operator = '%'
   - Expected Output: 3.0

10. Test Scenario: Power operation
    - Input: firstNumber = 2, secondNumber = 3, operator = '^'
    - Expected Output: 8.0

11. Test Scenario: Invalid operator
    - Input: firstNumber = 2, secondNumber = 3, operator = 'a'
    - Expected Output: 3.0

*/

// ********RoostGPT********
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import com.houarizegai.calculator.ui.CalculatorUI;

public class CalculatorUI_calculate_755b65b191_Test {

    private CalculatorUI calculatorUI = new CalculatorUI();

    @Test
    @DisplayName("Test Addition of two positive numbers")
    public void testAddition() {
        Assertions.assertEquals(9.0, calculatorUI.calculate(4, 5, '+'));
    }

    @Test
    @DisplayName("Test Subtraction of two positive numbers where the first number is greater than the second")
    public void testSubtractionFirstGreaterThanSecond() {
        Assertions.assertEquals(5.0, calculatorUI.calculate(10, 5, '-'));
    }

    @Test
    @DisplayName("Test Subtraction of two positive numbers where the second number is greater than the first")
    public void testSubtractionSecondGreaterThanFirst() {
        Assertions.assertEquals(-3.0, calculatorUI.calculate(2, 5, '-'));
    }

    @Test
    @DisplayName("Test Multiplication of two positive numbers")
    public void testMultiplication() {
        Assertions.assertEquals(15.0, calculatorUI.calculate(3, 5, '*'));
    }

    @Test
    @DisplayName("Test Division of two positive numbers where the first number is greater than the second")
    public void testDivisionFirstGreaterThanSecond() {
        Assertions.assertEquals(2.0, calculatorUI.calculate(10, 5, '/'));
    }

    @Test
    @DisplayName("Test Division of two positive numbers where the second number is greater than the first")
    public void testDivisionSecondGreaterThanFirst() {
        Assertions.assertEquals(0.5, calculatorUI.calculate(5, 10, '/'));
    }

    @Test
    @DisplayName("Test Division by zero")
    public void testDivisionByZero() {
        Assertions.assertEquals(Double.POSITIVE_INFINITY, calculatorUI.calculate(5, 0, '/'));
    }

    @Test
    @DisplayName("Test Modulus operation where the first number is greater than the second")
    public void testModulusFirstGreaterThanSecond() {
        Assertions.assertEquals(1.0, calculatorUI.calculate(10, 3, '%'));
    }

    @Test
    @DisplayName("Test Modulus operation where the second number is greater than the first")
    public void testModulusSecondGreaterThanFirst() {
        Assertions.assertEquals(3.0, calculatorUI.calculate(3, 10, '%'));
    }

    @Test
    @DisplayName("Test Power operation")
    public void testPower() {
        Assertions.assertEquals(8.0, calculatorUI.calculate(2, 3, '^'));
    }

    @Test
    @DisplayName("Test Invalid operator")
    public void testInvalidOperator() {
        Assertions.assertEquals(3.0, calculatorUI.calculate(2, 3, 'a'));
    }
}
