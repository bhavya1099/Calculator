// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Positive Numbers Addition
- Input: firstNumber = 5, secondNumber = 10, operator = '+'
- Expected Output: 15

Test Scenario 2: Negative Numbers Addition
- Input: firstNumber = -5, secondNumber = -10, operator = '+'
- Expected Output: -15

Test Scenario 3: Positive and Negative Numbers Addition
- Input: firstNumber = 5, secondNumber = -10, operator = '+'
- Expected Output: -5

Test Scenario 4: Positive Numbers Subtraction
- Input: firstNumber = 10, secondNumber = 5, operator = '-'
- Expected Output: 5

Test Scenario 5: Negative Numbers Subtraction
- Input: firstNumber = -5, secondNumber = -10, operator = '-'
- Expected Output: 5

Test Scenario 6: Positive and Negative Numbers Subtraction
- Input: firstNumber = 10, secondNumber = -5, operator = '-'
- Expected Output: 15

Test Scenario 7: Positive Numbers Multiplication
- Input: firstNumber = 5, secondNumber = 10, operator = '*'
- Expected Output: 50

Test Scenario 8: Negative Numbers Multiplication
- Input: firstNumber = -5, secondNumber = -10, operator = '*'
- Expected Output: 50

Test Scenario 9: Positive and Negative Numbers Multiplication
- Input: firstNumber = 5, secondNumber = -10, operator = '*'
- Expected Output: -50

Test Scenario 10: Positive Numbers Division
- Input: firstNumber = 10, secondNumber = 2, operator = '/'
- Expected Output: 5

Test Scenario 11: Negative Numbers Division
- Input: firstNumber = -10, secondNumber = -2, operator = '/'
- Expected Output: 5

Test Scenario 12: Positive and Negative Numbers Division
- Input: firstNumber = 10, secondNumber = -2, operator = '/'
- Expected Output: -5

Test Scenario 13: Division by Zero
- Input: firstNumber = 10, secondNumber = 0, operator = '/'
- Expected Output: Infinity 

Test Scenario 14: Modulus Operation
- Input: firstNumber = 10, secondNumber = 3, operator = '%'
- Expected Output: 1

Test Scenario 15: Power Operation
- Input: firstNumber = 2, secondNumber = 3, operator = '^'
- Expected Output: 8

Test Scenario 16: Invalid Operator
- Input: firstNumber = 5, secondNumber = 10, operator = 'a'
- Expected Output: 10
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import static org.junit.jupiter.api.Assertions.*;

class CalculatorUI_calculate_755b65b191_Test {

    private CalculatorUI calculatorUI;

    @BeforeEach
    void init() {
        calculatorUI = new CalculatorUI();
    }

    @Test
    void testCalculateAddition() {
        assertEquals(15, calculatorUI.calculate(5, 10, '+'));
        assertEquals(-15, calculatorUI.calculate(-5, -10, '+'));
        assertEquals(-5, calculatorUI.calculate(5, -10, '+'));
    }

    @Test
    void testCalculateSubtraction() {
        assertEquals(5, calculatorUI.calculate(10, 5, '-'));
        assertEquals(5, calculatorUI.calculate(-5, -10, '-'));
        assertEquals(15, calculatorUI.calculate(10, -5, '-'));
    }

    @Test
    void testCalculateMultiplication() {
        assertEquals(50, calculatorUI.calculate(5, 10, '*'));
        assertEquals(50, calculatorUI.calculate(-5, -10, '*'));
        assertEquals(-50, calculatorUI.calculate(5, -10, '*'));
    }

    @Test
    void testCalculateDivision() {
        assertEquals(5, calculatorUI.calculate(10, 2, '/'));
        assertEquals(5, calculatorUI.calculate(-10, -2, '/'));
        assertEquals(-5, calculatorUI.calculate(10, -2, '/'));
        assertEquals(Double.POSITIVE_INFINITY, calculatorUI.calculate(10, 0, '/'));
    }

    @Test
    void testCalculateModulus() {
        assertEquals(1, calculatorUI.calculate(10, 3, '%'));
    }

    @Test
    void testCalculatePower() {
        assertEquals(8, calculatorUI.calculate(2, 3, '^'));
    }

    @Test
    void testCalculateInvalidOperator() {
        assertEquals(10, calculatorUI.calculate(5, 10, 'a'));
    }
}
