// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1:
Test Name: testCalculateAddition
Purpose: To test the addition operation in the calculate function.
Input: calculate(2, 3, '+')
Expected Output: 5

Test Scenario 2:
Test Name: testCalculateSubtraction
Purpose: To test the subtraction operation in the calculate function.
Input: calculate(5, 3, '-')
Expected Output: 2

Test Scenario 3:
Test Name: testCalculateMultiplication
Purpose: To test the multiplication operation in the calculate function.
Input: calculate(5, 3, '*')
Expected Output: 15

Test Scenario 4:
Test Name: testCalculateDivision
Purpose: To test the division operation in the calculate function.
Input: calculate(6, 3, '/')
Expected Output: 2

Test Scenario 5:
Test Name: testCalculateModulo
Purpose: To test the modulo operation in the calculate function.
Input: calculate(10, 3, '%')
Expected Output: 1

Test Scenario 6:
Test Name: testCalculatePower
Purpose: To test the power operation in the calculate function.
Input: calculate(2, 3, '^')
Expected Output: 8

Test Scenario 7:
Test Name: testCalculateInvalidOperation
Purpose: To test the calculate function with an invalid operation.
Input: calculate(2, 3, '&')
Expected Output: 3

Test Scenario 8:
Test Name: testCalculateDivisionByZero
Purpose: To test the division operation in the calculate function with second number as zero.
Input: calculate(5, 0, '/')
Expected Output: Infinity or Exception depending on the handling of division by zero.

*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CalculatorUI_calculate_755b65b191_Test {

    @Test
    public void testCalculateAddition() {
        CalculatorUI calculator = new CalculatorUI();
        double result = calculator.calculate(2, 3, '+');
        assertEquals(5, result);
    }

    @Test
    public void testCalculateSubtraction() {
        CalculatorUI calculator = new CalculatorUI();
        double result = calculator.calculate(5, 3, '-');
        assertEquals(2, result);
    }

    @Test
    public void testCalculateMultiplication() {
        CalculatorUI calculator = new CalculatorUI();
        double result = calculator.calculate(5, 3, '*');
        assertEquals(15, result);
    }

    @Test
    public void testCalculateDivision() {
        CalculatorUI calculator = new CalculatorUI();
        double result = calculator.calculate(6, 3, '/');
        assertEquals(2, result);
    }

    @Test
    public void testCalculateModulo() {
        CalculatorUI calculator = new CalculatorUI();
        double result = calculator.calculate(10, 3, '%');
        assertEquals(1, result);
    }

    @Test
    public void testCalculatePower() {
        CalculatorUI calculator = new CalculatorUI();
        double result = calculator.calculate(2, 3, '^');
        assertEquals(8, result);
    }

    @Test
    public void testCalculateInvalidOperation() {
        CalculatorUI calculator = new CalculatorUI();
        double result = calculator.calculate(2, 3, '&');
        assertEquals(3, result);
    }

    @Test
    public void testCalculateDivisionByZero() {
        CalculatorUI calculator = new CalculatorUI();
        double result = calculator.calculate(5, 0, '/');
        assertEquals(Double.POSITIVE_INFINITY, result);
    }
}
