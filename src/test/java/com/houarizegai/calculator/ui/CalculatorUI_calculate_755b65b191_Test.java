// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Addition
- Given: firstNumber = 5, secondNumber = 10, operator = '+'
- Expected Result: 15 (5+10)

Test Scenario 2: Subtraction
- Given: firstNumber = 20, secondNumber = 10, operator = '-'
- Expected Result: 10 (20-10)

Test Scenario 3: Multiplication
- Given: firstNumber = 7, secondNumber = 6, operator = '*'
- Expected Result: 42 (7*6)

Test Scenario 4: Division
- Given: firstNumber = 100, secondNumber = 20, operator = '/'
- Expected Result: 5 (100/20)

Test Scenario 5: Division by Zero
- Given: firstNumber = 100, secondNumber = 0, operator = '/'
- Expected Result: Infinity 

Test Scenario 6: Modulus
- Given: firstNumber = 10, secondNumber = 3, operator = '%'
- Expected Result: 1 (10%3)

Test Scenario 7: Power
- Given: firstNumber = 2, secondNumber = 3, operator = '^'
- Expected Result: 8 (2^3)

Test Scenario 8: Default Case
- Given: firstNumber = 5, secondNumber = 10, operator = 'a' (invalid operator)
- Expected Result: 10 (returns secondNumber)

Test Scenario 9: Negative Numbers
- Given: firstNumber = -5, secondNumber = -10, operator = '+'
- Expected Result: -15 (-5 + -10)

Test Scenario 10: Floating Point Numbers
- Given: firstNumber = 1.5, secondNumber = 2.5, operator = '+'
- Expected Result: 4 (1.5 + 2.5)
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CalculatorUI_calculate_755b65b191_Test {

    CalculatorUI calculatorUI = new CalculatorUI();

    @Test
    public void testCalculate_Addition() {
        assertEquals(15, calculatorUI.calculate(5, 10, '+'));
    }

    @Test
    public void testCalculate_Subtraction() {
        assertEquals(10, calculatorUI.calculate(20, 10, '-'));
    }

    @Test
    public void testCalculate_Multiplication() {
        assertEquals(42, calculatorUI.calculate(7, 6, '*'));
    }

    @Test
    public void testCalculate_Division() {
        assertEquals(5, calculatorUI.calculate(100, 20, '/'));
    }

    @Test
    public void testCalculate_DivisionByZero() {
        assertEquals(Double.POSITIVE_INFINITY, calculatorUI.calculate(100, 0, '/'));
    }

    @Test
    public void testCalculate_Modulus() {
        assertEquals(1, calculatorUI.calculate(10, 3, '%'));
    }

    @Test
    public void testCalculate_Power() {
        assertEquals(8, calculatorUI.calculate(2, 3, '^'));
    }

    @Test
    public void testCalculate_DefaultCase() {
        assertEquals(10, calculatorUI.calculate(5, 10, 'a'));
    }

    @Test
    public void testCalculate_NegativeNumbers() {
        assertEquals(-15, calculatorUI.calculate(-5, -10, '+'));
    }

    @Test
    public void testCalculate_FloatingPointNumbers() {
        assertEquals(4, calculatorUI.calculate(1.5, 2.5, '+'));
    }
}
