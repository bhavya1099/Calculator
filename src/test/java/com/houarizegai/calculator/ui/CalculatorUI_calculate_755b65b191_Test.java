// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Addition
- Given the first number as 2.0 and the second number as 3.0 with operator '+'
- When the calculate function is called
- Then the result should be 5.0

Test Scenario 2: Subtraction
- Given the first number as 5.0 and the second number as 2.0 with operator '-'
- When the calculate function is called
- Then the result should be 3.0

Test Scenario 3: Multiplication
- Given the first number as 3.0 and the second number as 2.0 with operator '*'
- When the calculate function is called
- Then the result should be 6.0

Test Scenario 4: Division
- Given the first number as 6.0 and the second number as 2.0 with operator '/'
- When the calculate function is called
- Then the result should be 3.0

Test Scenario 5: Modulus
- Given the first number as 10.0 and the second number as 3.0 with operator '%'
- When the calculate function is called
- Then the result should be 1.0

Test Scenario 6: Power
- Given the first number as 2.0 and the second number as 3.0 with operator '^'
- When the calculate function is called
- Then the result should be 8.0

Test Scenario 7: Invalid Operator
- Given the first number as 2.0 and the second number as 3.0 with operator 'x'
- When the calculate function is called
- Then the result should be equal to the second number i.e., 3.0

Test Scenario 8: Division by Zero
- Given the first number as 2.0 and the second number as 0.0 with operator '/'
- When the calculate function is called
- Then there should be a provision to handle division by zero error
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class CalculatorUI_calculate_755b65b191_Test {
    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setup() {
        calculatorUI = new CalculatorUI();
    }

    @Test
    public void testCalculate_Addition() {
        double result = calculatorUI.calculate(2.0, 3.0, '+');
        assertEquals(5.0, result);
    }

    @Test
    public void testCalculate_Subtraction() {
        double result = calculatorUI.calculate(5.0, 2.0, '-');
        assertEquals(3.0, result);
    }

    @Test
    public void testCalculate_Multiplication() {
        double result = calculatorUI.calculate(3.0, 2.0, '*');
        assertEquals(6.0, result);
    }

    @Test
    public void testCalculate_Division() {
        double result = calculatorUI.calculate(6.0, 2.0, '/');
        assertEquals(3.0, result);
    }

    @Test
    public void testCalculate_Modulus() {
        double result = calculatorUI.calculate(10.0, 3.0, '%');
        assertEquals(1.0, result);
    }

    @Test
    public void testCalculate_Power() {
        double result = calculatorUI.calculate(2.0, 3.0, '^');
        assertEquals(8.0, result);
    }

    @Test
    public void testCalculate_InvalidOperator() {
        double result = calculatorUI.calculate(2.0, 3.0, 'x');
        assertEquals(3.0, result);
    }

    @Test
    public void testCalculate_DivisionByZero() {
        assertThrows(ArithmeticException.class, () -> calculatorUI.calculate(2.0, 0.0, '/'));
    }
}
