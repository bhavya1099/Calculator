// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1:
- Description: Test the addition functionality of the calculate function.
- Input: firstNumber = 5, secondNumber = 3, operator = '+'
- Expected Output: 8

Test Scenario 2:
- Description: Test the subtraction functionality of the calculate function.
- Input: firstNumber = 10, secondNumber = 7, operator = '-'
- Expected Output: 3

Test Scenario 3:
- Description: Test the multiplication functionality of the calculate function.
- Input: firstNumber = 4, secondNumber = 2, operator = '*'
- Expected Output: 8

Test Scenario 4:
- Description: Test the division functionality of the calculate function.
- Input: firstNumber = 10, secondNumber = 2, operator = '/'
- Expected Output: 5

Test Scenario 5:
- Description: Test the modulus functionality of the calculate function.
- Input: firstNumber = 10, secondNumber = 3, operator = '%'
- Expected Output: 1

Test Scenario 6:
- Description: Test the power functionality of the calculate function.
- Input: firstNumber = 2, secondNumber = 3, operator = '^'
- Expected Output: 8

Test Scenario 7:
- Description: Test the calculate function with an invalid operator.
- Input: firstNumber = 5, secondNumber = 3, operator = '&'
- Expected Output: 3

Test Scenario 8:
- Description: Test the division functionality of the calculate function with secondNumber as 0.
- Input: firstNumber = 10, secondNumber = 0, operator = '/'
- Expected Output: Infinity

Test Scenario 9:
- Description: Test the modulus functionality of the calculate function with secondNumber as 0.
- Input: firstNumber = 10, secondNumber = 0, operator = '%'
- Expected Output: NaN

Test Scenario 10:
- Description: Test the calculate function with negative numbers.
- Input: firstNumber = -5, secondNumber = -3, operator = '+'
- Expected Output: -8
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CalculatorUI_calculate_755b65b191_Test {

    @Test
    public void testCalculateAddition() {
        double result = CalculatorUI.calculate(5, 3, '+');
        assertEquals(8, result);
    }

    @Test
    public void testCalculateSubtraction() {
        double result = CalculatorUI.calculate(10, 7, '-');
        assertEquals(3, result);
    }

    @Test
    public void testCalculateMultiplication() {
        double result = CalculatorUI.calculate(4, 2, '*');
        assertEquals(8, result);
    }

    @Test
    public void testCalculateDivision() {
        double result = CalculatorUI.calculate(10, 2, '/');
        assertEquals(5, result);
    }

    @Test
    public void testCalculateModulus() {
        double result = CalculatorUI.calculate(10, 3, '%');
        assertEquals(1, result);
    }

    @Test
    public void testCalculatePower() {
        double result = CalculatorUI.calculate(2, 3, '^');
        assertEquals(8, result);
    }

    @Test
    public void testCalculateInvalidOperator() {
        double result = CalculatorUI.calculate(5, 3, '&');
        assertEquals(3, result);
    }

    @Test
    public void testCalculateDivisionByZero() {
        double result = CalculatorUI.calculate(10, 0, '/');
        assertEquals(Double.POSITIVE_INFINITY, result);
    }

    @Test
    public void testCalculateModulusByZero() {
        double result = CalculatorUI.calculate(10, 0, '%');
        assertEquals(Double.NaN, result);
    }

    @Test
    public void testCalculateAdditionNegativeNumbers() {
        double result = CalculatorUI.calculate(-5, -3, '+');
        assertEquals(-8, result);
    }
}
