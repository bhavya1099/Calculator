// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1:
Test Name: testCalculateAddition
Purpose: To test the addition operation in calculate function.
Inputs: firstNumber = 10, secondNumber = 5, operator = '+'
Expected Result: 15

Test Scenario 2:
Test Name: testCalculateSubtraction
Purpose: To test the subtraction operation in calculate function.
Inputs: firstNumber = 10, secondNumber = 5, operator = '-'
Expected Result: 5

Test Scenario 3:
Test Name: testCalculateMultiplication
Purpose: To test the multiplication operation in calculate function.
Inputs: firstNumber = 10, secondNumber = 5, operator = '*'
Expected Result: 50

Test Scenario 4:
Test Name: testCalculateDivision
Purpose: To test the division operation in calculate function.
Inputs: firstNumber = 10, secondNumber = 5, operator = '/'
Expected Result: 2

Test Scenario 5:
Test Name: testCalculateModulus
Purpose: To test the modulus operation in calculate function.
Inputs: firstNumber = 10, secondNumber = 3, operator = '%'
Expected Result: 1

Test Scenario 6:
Test Name: testCalculatePower
Purpose: To test the power operation in calculate function.
Inputs: firstNumber = 2, secondNumber = 3, operator = '^'
Expected Result: 8

Test Scenario 7:
Test Name: testCalculateInvalidOperator
Purpose: To test the calculate function with an invalid operator.
Inputs: firstNumber = 10, secondNumber = 5, operator = '!'
Expected Result: 5

Test Scenario 8:
Test Name: testCalculateDivisionByZero
Purpose: To test the division operation in calculate function when the second number is zero.
Inputs: firstNumber = 10, secondNumber = 0, operator = '/'
Expected Result: Test should fail or return Infinity

Test Scenario 9:
Test Name: testCalculateModulusByZero
Purpose: To test the modulus operation in calculate function when the second number is zero.
Inputs: firstNumber = 10, secondNumber = 0, operator = '%'
Expected Result: Test should fail or return NaN

Test Scenario 10:
Test Name: testCalculateNegativeNumbers
Purpose: To test the calculate function with negative numbers.
Inputs: firstNumber = -10, secondNumber = -5, operator = '+'
Expected Result: -15
*/

// ********RoostGPT********
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CalculatorUI_calculate_755b65b191_Test {

    @Test
    public void testCalculateAddition() {
        CalculatorUI obj = new CalculatorUI();
        assertEquals(15, obj.calculate(10, 5, '+'));
    }

    @Test
    public void testCalculateSubtraction() {
        CalculatorUI obj = new CalculatorUI();
        assertEquals(5, obj.calculate(10, 5, '-'));
    }

    @Test
    public void testCalculateMultiplication() {
        CalculatorUI obj = new CalculatorUI();
        assertEquals(50, obj.calculate(10, 5, '*'));
    }

    @Test
    public void testCalculateDivision() {
        CalculatorUI obj = new CalculatorUI();
        assertEquals(2, obj.calculate(10, 5, '/'));
    }

    @Test
    public void testCalculateModulus() {
        CalculatorUI obj = new CalculatorUI();
        assertEquals(1, obj.calculate(10, 3, '%'));
    }

    @Test
    public void testCalculatePower() {
        CalculatorUI obj = new CalculatorUI();
        assertEquals(8, obj.calculate(2, 3, '^'));
    }

    @Test
    public void testCalculateInvalidOperator() {
        CalculatorUI obj = new CalculatorUI();
        assertEquals(5, obj.calculate(10, 5, '!'));
    }

    @Test
    public void testCalculateDivisionByZero() {
        CalculatorUI obj = new CalculatorUI();
        assertEquals(Double.POSITIVE_INFINITY, obj.calculate(10, 0, '/'));
    }

    @Test
    public void testCalculateModulusByZero() {
        CalculatorUI obj = new CalculatorUI();
        assertEquals(Double.NaN, obj.calculate(10, 0, '%'));
    }

    @Test
    public void testCalculateNegativeNumbers() {
        CalculatorUI obj = new CalculatorUI();
        assertEquals(-15, obj.calculate(-10, -5, '+'));
    }
}
