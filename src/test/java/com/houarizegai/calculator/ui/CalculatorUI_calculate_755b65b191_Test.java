// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: 
Description: Test the addition operation.
Steps: Pass two numbers and the '+' operator to the calculate function.
Expected Result: The function should return the sum of the two numbers.

Test Scenario 2: 
Description: Test the subtraction operation.
Steps: Pass two numbers and the '-' operator to the calculate function.
Expected Result: The function should return the difference of the two numbers.

Test Scenario 3: 
Description: Test the multiplication operation.
Steps: Pass two numbers and the '*' operator to the calculate function.
Expected Result: The function should return the product of the two numbers.

Test Scenario 4: 
Description: Test the division operation.
Steps: Pass two numbers and the '/' operator to the calculate function.
Expected Result: The function should return the quotient of the two numbers.

Test Scenario 5: 
Description: Test the modulus operation.
Steps: Pass two numbers and the '%' operator to the calculate function.
Expected Result: The function should return the remainder of the first number divided by the second number.

Test Scenario 6: 
Description: Test the power operation.
Steps: Pass two numbers and the '^' operator to the calculate function.
Expected Result: The function should return the first number raised to the power of the second number.

Test Scenario 7: 
Description: Test the default case.
Steps: Pass two numbers and an operator not defined in the function to the calculate function.
Expected Result: The function should return the second number.

Test Scenario 8: 
Description: Test the division operation with the second number as zero.
Steps: Pass a number and zero with the '/' operator to the calculate function.
Expected Result: The function should handle the divide by zero scenario gracefully.

Test Scenario 9: 
Description: Test the modulus operation with the second number as zero.
Steps: Pass a number and zero with the '%' operator to the calculate function.
Expected Result: The function should handle the divide by zero scenario gracefully.

Test Scenario 10: 
Description: Test with negative numbers.
Steps: Pass two negative numbers and an operator to the calculate function.
Expected Result: The function should handle negative numbers correctly.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CalculatorUI_calculate_755b65b191_Test {

    @Test
    public void testCalculateAddition() {
        CalculatorUI calculatorUI = new CalculatorUI();
        assertEquals(10.0, calculatorUI.calculate(5.0, 5.0, '+'));
    }

    @Test
    public void testCalculateSubtraction() {
        CalculatorUI calculatorUI = new CalculatorUI();
        assertEquals(0.0, calculatorUI.calculate(5.0, 5.0, '-'));
    }

    @Test
    public void testCalculateMultiplication() {
        CalculatorUI calculatorUI = new CalculatorUI();
        assertEquals(25.0, calculatorUI.calculate(5.0, 5.0, '*'));
    }

    @Test
    public void testCalculateDivision() {
        CalculatorUI calculatorUI = new CalculatorUI();
        assertEquals(1.0, calculatorUI.calculate(5.0, 5.0, '/'));
    }

    @Test
    public void testCalculateModulus() {
        CalculatorUI calculatorUI = new CalculatorUI();
        assertEquals(0.0, calculatorUI.calculate(5.0, 5.0, '%'));
    }

    @Test
    public void testCalculatePower() {
        CalculatorUI calculatorUI = new CalculatorUI();
        assertEquals(3125.0, calculatorUI.calculate(5.0, 5.0, '^'));
    }

    @Test
    public void testCalculateDefault() {
        CalculatorUI calculatorUI = new CalculatorUI();
        assertEquals(5.0, calculatorUI.calculate(5.0, 5.0, 'x'));
    }

    @Test
    public void testCalculateDivisionByZero() {
        CalculatorUI calculatorUI = new CalculatorUI();
        assertEquals(Double.POSITIVE_INFINITY, calculatorUI.calculate(5.0, 0.0, '/'));
    }

    @Test
    public void testCalculateModulusByZero() {
        CalculatorUI calculatorUI = new CalculatorUI();
        assertEquals(Double.NaN, calculatorUI.calculate(5.0, 0.0, '%'));
    }

    @Test
    public void testCalculateWithNegativeNumbers() {
        CalculatorUI calculatorUI = new CalculatorUI();
        assertEquals(10.0, calculatorUI.calculate(-5.0, -5.0, '+'));
    }
}
