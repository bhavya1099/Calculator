// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Positive Numbers Addition
- Input: First Number: 5, Second Number: 10, Operator: '+'
- Expected Output: 15

Test Scenario 2: Negative Numbers Addition
- Input: First Number: -5, Second Number: -10, Operator: '+'
- Expected Output: -15

Test Scenario 3: Positive and Negative Numbers Addition
- Input: First Number: -5, Second Number: 10, Operator: '+'
- Expected Output: 5

Test Scenario 4: Positive Numbers Subtraction
- Input: First Number: 10, Second Number: 5, Operator: '-'
- Expected Output: 5

Test Scenario 5: Negative Numbers Subtraction
- Input: First Number: -5, Second Number: -10, Operator: '-'
- Expected Output: 5

Test Scenario 6: Positive and Negative Numbers Subtraction
- Input: First Number: -5, Second Number: 10, Operator: '-'
- Expected Output: -15

Test Scenario 7: Positive Numbers Multiplication
- Input: First Number: 5, Second Number: 10, Operator: '*'
- Expected Output: 50

Test Scenario 8: Negative Numbers Multiplication
- Input: First Number: -5, Second Number: -10, Operator: '*'
- Expected Output: 50

Test Scenario 9: Positive and Negative Numbers Multiplication
- Input: First Number: -5, Second Number: 10, Operator: '*'
- Expected Output: -50

Test Scenario 10: Positive Numbers Division
- Input: First Number: 10, Second Number: 5, Operator: '/'
- Expected Output: 2

Test Scenario 11: Negative Numbers Division
- Input: First Number: -10, Second Number: -5, Operator: '/'
- Expected Output: 2

Test Scenario 12: Positive and Negative Numbers Division
- Input: First Number: -10, Second Number: 5, Operator: '/'
- Expected Output: -2

Test Scenario 13: Division by Zero
- Input: First Number: 10, Second Number: 0, Operator: '/'
- Expected Output: Infinity 

Test Scenario 14: Power Calculation
- Input: First Number: 2, Second Number: 3, Operator: '^'
- Expected Output: 8

Test Scenario 15: Invalid Operator
- Input: First Number: 2, Second Number: 3, Operator: '!'
- Expected Output: 3

Test Scenario 16: Modulus Operation
- Input: First Number: 10, Second Number: 3, Operator: '%'
- Expected Output: 1
*/

// ********RoostGPT********
import com.houarizegai.calculator.CalculatorUI;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class CalculatorUI_calculate_755b65b191_Test {
    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setup() {
        calculatorUI = new CalculatorUI();
    }

    @Test
    public void testCalculate_PositiveNumbersAddition() {
        assertEquals(15, calculatorUI.calculate(5, 10, '+'));
    }

    @Test
    public void testCalculate_NegativeNumbersAddition() {
        assertEquals(-15, calculatorUI.calculate(-5, -10, '+'));
    }

    @Test
    public void testCalculate_PositiveAndNegativeNumbersAddition() {
        assertEquals(5, calculatorUI.calculate(-5, 10, '+'));
    }

    @Test
    public void testCalculate_PositiveNumbersSubtraction() {
        assertEquals(5, calculatorUI.calculate(10, 5, '-'));
    }

    @Test
    public void testCalculate_NegativeNumbersSubtraction() {
        assertEquals(5, calculatorUI.calculate(-5, -10, '-'));
    }

    @Test
    public void testCalculate_PositiveAndNegativeNumbersSubtraction() {
        assertEquals(-15, calculatorUI.calculate(-5, 10, '-'));
    }

    @Test
    public void testCalculate_PositiveNumbersMultiplication() {
        assertEquals(50, calculatorUI.calculate(5, 10, '*'));
    }

    @Test
    public void testCalculate_NegativeNumbersMultiplication() {
        assertEquals(50, calculatorUI.calculate(-5, -10, '*'));
    }

    @Test
    public void testCalculate_PositiveAndNegativeNumbersMultiplication() {
        assertEquals(-50, calculatorUI.calculate(-5, 10, '*'));
    }

    @Test
    public void testCalculate_PositiveNumbersDivision() {
        assertEquals(2, calculatorUI.calculate(10, 5, '/'));
    }

    @Test
    public void testCalculate_NegativeNumbersDivision() {
        assertEquals(2, calculatorUI.calculate(-10, -5, '/'));
    }

    @Test
    public void testCalculate_PositiveAndNegativeNumbersDivision() {
        assertEquals(-2, calculatorUI.calculate(-10, 5, '/'));
    }

    @Test
    public void testCalculate_DivisionByZero() {
        assertEquals(Double.POSITIVE_INFINITY, calculatorUI.calculate(10, 0, '/'));
    }

    @Test
    public void testCalculate_PowerCalculation() {
        assertEquals(8, calculatorUI.calculate(2, 3, '^'));
    }

    @Test
    public void testCalculate_InvalidOperator() {
        assertEquals(3, calculatorUI.calculate(2, 3, '!'));
    }

    @Test
    public void testCalculate_ModulusOperation() {
        assertEquals(1, calculatorUI.calculate(10, 3, '%'));
    }
}
