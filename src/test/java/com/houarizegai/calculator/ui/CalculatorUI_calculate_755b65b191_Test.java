// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: 
- Description: Validate the addition operation in the calculate function.
- Steps:
  - Call the calculate function with the firstNumber as 5, secondNumber as 2 and operator as '+'.
  - Check if the returned value is 7.

Test Scenario 2: 
- Description: Validate the subtraction operation in the calculate function.
- Steps:
  - Call the calculate function with the firstNumber as 5, secondNumber as 2 and operator as '-'.
  - Check if the returned value is 3.

Test Scenario 3: 
- Description: Validate the multiplication operation in the calculate function.
- Steps:
  - Call the calculate function with the firstNumber as 5, secondNumber as 2 and operator as '*'.
  - Check if the returned value is 10.

Test Scenario 4: 
- Description: Validate the division operation in the calculate function.
- Steps:
  - Call the calculate function with the firstNumber as 10, secondNumber as 2 and operator as '/'.
  - Check if the returned value is 5.

Test Scenario 5: 
- Description: Validate the modulus operation in the calculate function.
- Steps:
  - Call the calculate function with the firstNumber as 10, secondNumber as 3 and operator as '%'.
  - Check if the returned value is 1.

Test Scenario 6: 
- Description: Validate the power operation in the calculate function.
- Steps:
  - Call the calculate function with the firstNumber as 2, secondNumber as 3 and operator as '^'.
  - Check if the returned value is 8.

Test Scenario 7: 
- Description: Validate the calculate function with an invalid operator.
- Steps:
  - Call the calculate function with the firstNumber as 5, secondNumber as 2 and operator as 'a'.
  - Check if the returned value is 2 (the second number).

Test Scenario 8: 
- Description: Validate the calculate function with zero as the second number in a division operation.
- Steps:
  - Call the calculate function with the firstNumber as 5, secondNumber as 0 and operator as '/'.
  - Check if the returned value is Infinity or a specific exception is thrown.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CalculatorUI_calculate_755b65b191_Test {

    @Test
    public void testCalculateAddition() {
        CalculatorUI calculatorUI = new CalculatorUI();
        double result = calculatorUI.calculate(5, 2, '+');
        assertEquals(7, result, "Failed to add numbers correctly");
    }

    @Test
    public void testCalculateSubtraction() {
        CalculatorUI calculatorUI = new CalculatorUI();
        double result = calculatorUI.calculate(5, 2, '-');
        assertEquals(3, result, "Failed to subtract numbers correctly");
    }

    @Test
    public void testCalculateMultiplication() {
        CalculatorUI calculatorUI = new CalculatorUI();
        double result = calculatorUI.calculate(5, 2, '*');
        assertEquals(10, result, "Failed to multiply numbers correctly");
    }

    @Test
    public void testCalculateDivision() {
        CalculatorUI calculatorUI = new CalculatorUI();
        double result = calculatorUI.calculate(10, 2, '/');
        assertEquals(5, result, "Failed to divide numbers correctly");
    }

    @Test
    public void testCalculateModulus() {
        CalculatorUI calculatorUI = new CalculatorUI();
        double result = calculatorUI.calculate(10, 3, '%');
        assertEquals(1, result, "Failed to modulate numbers correctly");
    }

    @Test
    public void testCalculatePower() {
        CalculatorUI calculatorUI = new CalculatorUI();
        double result = calculatorUI.calculate(2, 3, '^');
        assertEquals(8, result, "Failed to power numbers correctly");
    }

    @Test
    public void testCalculateWithInvalidOperator() {
        CalculatorUI calculatorUI = new CalculatorUI();
        double result = calculatorUI.calculate(5, 2, 'a');
        assertEquals(2, result, "Failed to return the second number when operator is invalid");
    }

    @Test
    public void testCalculateDivisionByZero() {
        CalculatorUI calculatorUI = new CalculatorUI();
        assertThrows(ArithmeticException.class, () -> calculatorUI.calculate(5, 0, '/'), "Failed to throw exception when divide by zero");
    }
}
