// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenarios:

1. Scenario: Validating addition operation
   - Given the first number is 5 and the second number is 3
   - When I call the `calculate` function with '+' operator
   - Then the function should return 8

2. Scenario: Validating subtraction operation
   - Given the first number is 10 and the second number is 4
   - When I call the `calculate` function with '-' operator
   - Then the function should return 6

3. Scenario: Validating multiplication operation
   - Given the first number is 7 and the second number is 3
   - When I call the `calculate` function with '*' operator
   - Then the function should return 21

4. Scenario: Validating division operation
   - Given the first number is 20 and the second number is 4
   - When I call the `calculate` function with '/' operator
   - Then the function should return 5

5. Scenario: Validating modulus operation
   - Given the first number is 10 and the second number is 3
   - When I call the `calculate` function with '%' operator
   - Then the function should return 1

6. Scenario: Validating power operation
   - Given the first number is 2 and the second number is 3
   - When I call the `calculate` function with '^' operator
   - Then the function should return 8

7. Scenario: Validating with an invalid operator
   - Given the first number is 5 and the second number is 3
   - When I call the `calculate` function with an invalid operator
   - Then the function should return the second number

8. Scenario: Validating division by zero
   - Given the first number is 10 and the second number is 0
   - When I call the `calculate` function with '/' operator
   - Then the function should return Infinity or throw an ArithmeticException depending on the implementation

9. Scenario: Validating negative numbers
   - Given the first number is -5 and the second number is 3
   - When I call the `calculate` function with '+' operator
   - Then the function should return -2

*/

// ********RoostGPT********
import com.houarizegai.calculator.CalculatorUI;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class CalculatorUI_calculate_755b65b191_Test {

    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setUp() {
        calculatorUI = new CalculatorUI();
    }

    @Test
    public void testCalculateAddition() {
        Assertions.assertEquals(8, calculatorUI.calculate(5, 3, '+'));
    }

    @Test
    public void testCalculateSubtraction() {
        Assertions.assertEquals(6, calculatorUI.calculate(10, 4, '-'));
    }

    @Test
    public void testCalculateMultiplication() {
        Assertions.assertEquals(21, calculatorUI.calculate(7, 3, '*'));
    }

    @Test
    public void testCalculateDivision() {
        Assertions.assertEquals(5, calculatorUI.calculate(20, 4, '/'));
    }

    @Test
    public void testCalculateModulus() {
        Assertions.assertEquals(1, calculatorUI.calculate(10, 3, '%'));
    }

    @Test
    public void testCalculatePower() {
        Assertions.assertEquals(8, calculatorUI.calculate(2, 3, '^'));
    }

    @Test
    public void testCalculateInvalidOperator() {
        Assertions.assertEquals(3, calculatorUI.calculate(5, 3, 'x'));
    }

    @Test
    public void testCalculateDivisionByZero() {
        Assertions.assertEquals(Double.POSITIVE_INFINITY, calculatorUI.calculate(10, 0, '/'));
    }

    @Test
    public void testCalculateNegativeNumbers() {
        Assertions.assertEquals(-2, calculatorUI.calculate(-5, 3, '+'));
    }
}
