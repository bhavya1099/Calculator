// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Addition
- Given: firstNumber = 5, secondNumber = 10, operator = '+'
- Expected: The function should return 15

Test Scenario 2: Subtraction
- Given: firstNumber = 20, secondNumber = 10, operator = '-'
- Expected: The function should return 10

Test Scenario 3: Multiplication
- Given: firstNumber = 7, secondNumber = 3, operator = '*'
- Expected: The function should return 21

Test Scenario 4: Division
- Given: firstNumber = 50, secondNumber = 10, operator = '/'
- Expected: The function should return 5

Test Scenario 5: Division by zero
- Given: firstNumber = 50, secondNumber = 0, operator = '/'
- Expected: The function should return a value indicating an error or infinity

Test Scenario 6: Modulo operation
- Given: firstNumber = 10, secondNumber = 3, operator = '%'
- Expected: The function should return 1

Test Scenario 7: Exponentiation
- Given: firstNumber = 2, secondNumber = 3, operator = '^'
- Expected: The function should return 8

Test Scenario 8: Invalid Operator
- Given: firstNumber = 2, secondNumber = 3, operator = '&'
- Expected: The function should return the second number, 3

Test Scenario 9: Negative Numbers
- Given: firstNumber = -2, secondNumber = 3, operator = '*'
- Expected: The function should return -6

Test Scenario 10: Floating Point Numbers
- Given: firstNumber = 1.5, secondNumber = 2.5, operator = '+'
- Expected: The function should return 4
*/

// ********RoostGPT********
import com.houarizegai.calculator.ui.CalculatorUI;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class CalculatorUI_calculate_755b65b191_Test {

    CalculatorUI calculatorUI = new CalculatorUI();
    
    @Test
    void testCalculateAddition() {
        assertEquals(15, calculatorUI.calculate(5, 10, '+'));
    }

    @Test
    void testCalculateSubtraction() {
        assertEquals(10, calculatorUI.calculate(20, 10, '-'));
    }

    @Test
    void testCalculateMultiplication() {
        assertEquals(21, calculatorUI.calculate(7, 3, '*'));
    }

    @Test
    void testCalculateDivision() {
        assertEquals(5, calculatorUI.calculate(50, 10, '/'));
    }

    @Test
    void testCalculateDivisionByZero() {
        assertThrows(ArithmeticException.class, () -> calculatorUI.calculate(50, 0, '/'));
    }

    @Test
    void testCalculateModulo() {
        assertEquals(1, calculatorUI.calculate(10, 3, '%'));
    }

    @Test
    void testCalculateExponentiation() {
        assertEquals(8, calculatorUI.calculate(2, 3, '^'));
    }

    @Test
    void testCalculateInvalidOperator() {
        assertEquals(3, calculatorUI.calculate(2, 3, '&'));
    }

    @Test
    void testCalculateNegativeNumbers() {
        assertEquals(-6, calculatorUI.calculate(-2, 3, '*'));
    }

    @Test
    void testCalculateFloatingPointNumbers() {
        assertEquals(4, calculatorUI.calculate(1.5, 2.5, '+'));
    }
}
