// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1:
Verify that the calculate function returns the correct output when the operator is '+'. 
Input: firstNumber=2, secondNumber=3, operator='+'
Expected Output: 5

Test Scenario 2:
Verify that the calculate function returns the correct output when the operator is '-'. 
Input: firstNumber=5, secondNumber=2, operator='-'
Expected Output: 3

Test Scenario 3:
Verify that the calculate function returns the correct output when the operator is '*'. 
Input: firstNumber=4, secondNumber=3, operator='*'
Expected Output: 12

Test Scenario 4:
Verify that the calculate function returns the correct output when the operator is '/'. 
Input: firstNumber=6, secondNumber=2, operator='/'
Expected Output: 3

Test Scenario 5:
Verify that the calculate function returns the correct output when the operator is '%'. 
Input: firstNumber=10, secondNumber=3, operator='%'
Expected Output: 1

Test Scenario 6:
Verify that the calculate function returns the correct output when the operator is '^'. 
Input: firstNumber=2, secondNumber=3, operator='^'
Expected Output: 8

Test Scenario 7:
Verify that the calculate function returns the second number when the operator is not recognized.
Input: firstNumber=2, secondNumber=3, operator='&'
Expected Output: 3

Test Scenario 8:
Verify that the calculate function handles division by zero correctly (should return infinity or throw an exception based on your application's requirements).
Input: firstNumber=2, secondNumber=0, operator='/'
Expected Output: Infinity or Exception

Test Scenario 9:
Verify that the calculate function handles the modulus operation with zero correctly (should return NaN or throw an exception based on your application's requirements).
Input: firstNumber=2, secondNumber=0, operator='%'
Expected Output: NaN or Exception
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class CalculatorUI_calculate_755b65b191_Test {

    @Test
    public void testCalculate_Addition() {
        double result = new CalculatorUI().calculate(2, 3, '+');
        assertEquals(5, result);
    }

    @Test
    public void testCalculate_Subtraction() {
        double result = new CalculatorUI().calculate(5, 2, '-');
        assertEquals(3, result);
    }

    @Test
    public void testCalculate_Multiplication() {
        double result = new CalculatorUI().calculate(4, 3, '*');
        assertEquals(12, result);
    }

    @Test
    public void testCalculate_Division() {
        double result = new CalculatorUI().calculate(6, 2, '/');
        assertEquals(3, result);
    }

    @Test
    public void testCalculate_Modulus() {
        double result = new CalculatorUI().calculate(10, 3, '%');
        assertEquals(1, result);
    }

    @Test
    public void testCalculate_Power() {
        double result = new CalculatorUI().calculate(2, 3, '^');
        assertEquals(8, result);
    }

    @Test
    public void testCalculate_UnrecognizedOperator() {
        double result = new CalculatorUI().calculate(2, 3, '&');
        assertEquals(3, result);
    }

    @Test
    public void testCalculate_DivisionByZero() {
        assertThrows(ArithmeticException.class, () -> new CalculatorUI().calculate(2, 0, '/'));
    }

    @Test
    public void testCalculate_ModulusByZero() {
        assertThrows(ArithmeticException.class, () -> new CalculatorUI().calculate(2, 0, '%'));
    }
}
