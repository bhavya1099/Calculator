// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Addition
- Given: firstNumber = 5, secondNumber = 10, operator = '+'
- Expected Result: 15 (5+10)

Test Scenario 2: Subtraction
- Given: firstNumber = 20, secondNumber = 10, operator = '-'
- Expected Result: 10 (20-10)

Test Scenario 3: Multiplication
- Given: firstNumber = 7, secondNumber = 6, operator = '*'
- Expected Result: 42 (7*6)

Test Scenario 4: Division
- Given: firstNumber = 100, secondNumber = 20, operator = '/'
- Expected Result: 5 (100/20)

Test Scenario 5: Division by Zero
- Given: firstNumber = 100, secondNumber = 0, operator = '/'
- Expected Result: Exception or Infinity

Test Scenario 6: Remainder
- Given: firstNumber = 100, secondNumber = 20, operator = '%'
- Expected Result: 0 (100%20)

Test Scenario 7: Power
- Given: firstNumber = 2, secondNumber = 3, operator = '^'
- Expected Result: 8 (2^3)

Test Scenario 8: Invalid Operator
- Given: firstNumber = 2, secondNumber = 3, operator = '!'
- Expected Result: 3 (Return second number)

Test Scenario 9: Negative Numbers
- Given: firstNumber = -5, secondNumber = -10, operator = '+'
- Expected Result: -15 (-5+-10)

Test Scenario 10: Floating Point Numbers
- Given: firstNumber = 1.5, secondNumber = 2.5, operator = '+'
- Expected Result: 4 (1.5+2.5)
*/

// ********RoostGPT********
import com.houarizegai.calculator.ui.CalculatorUI;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CalculatorUITest {
    CalculatorUI calculator = new CalculatorUI();

    @Test
    public void testCalculateAddition() {
        assertEquals(15, calculator.calculate(5, 10, '+'));
    }

    @Test
    public void testCalculateSubtraction() {
        assertEquals(10, calculator.calculate(20, 10, '-'));
    }

    @Test
    public void testCalculateMultiplication() {
        assertEquals(42, calculator.calculate(7, 6, '*'));
    }

    @Test
    public void testCalculateDivision() {
        assertEquals(5, calculator.calculate(100, 20, '/'));
    }

    @Test
    public void testCalculateDivisionByZero() {
        assertThrows(ArithmeticException.class, () -> calculator.calculate(100, 0, '/'));
    }

    @Test
    public void testCalculateRemainder() {
        assertEquals(0, calculator.calculate(100, 20, '%'));
    }

    @Test
    public void testCalculatePower() {
        assertEquals(8, calculator.calculate(2, 3, '^'));
    }

    @Test
    public void testCalculateInvalidOperator() {
        assertEquals(3, calculator.calculate(2, 3, '!'));
    }

    @Test
    public void testCalculateNegativeNumbers() {
        assertEquals(-15, calculator.calculate(-5, -10, '+'));
    }

    @Test
    public void testCalculateFloatingPointNumbers() {
        assertEquals(4, calculator.calculate(1.5, 2.5, '+'));
    }
}
