// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1:
Test the calculate function with the "+" operator
- Input: firstNumber = 2, secondNumber = 3, operator = '+'
- Expected output: 5

Test Scenario 2:
Test the calculate function with the "-" operator
- Input: firstNumber = 5, secondNumber = 2, operator = '-'
- Expected output: 3

Test Scenario 3:
Test the calculate function with the "*" operator
- Input: firstNumber = 2, secondNumber = 3, operator = '*'
- Expected output: 6

Test Scenario 4:
Test the calculate function with the "/" operator
- Input: firstNumber = 6, secondNumber = 2, operator = '/'
- Expected output: 3

Test Scenario 5:
Test the calculate function with the "%" operator
- Input: firstNumber = 10, secondNumber = 3, operator = '%'
- Expected output: 1

Test Scenario 6:
Test the calculate function with the "^" operator
- Input: firstNumber = 2, secondNumber = 3, operator = '^'
- Expected output: 8

Test Scenario 7:
Test the calculate function with an invalid operator
- Input: firstNumber = 2, secondNumber = 3, operator = '!'
- Expected output: 3

Test Scenario 8:
Test the calculate function with division by zero
- Input: firstNumber = 2, secondNumber = 0, operator = '/'
- Expected output: Infinity (or Exception, depending on how you handle this case)

Test Scenario 9:
Test the calculate function with negative numbers
- Input: firstNumber = -2, secondNumber = 3, operator = '+'
- Expected output: 1

Test Scenario 10:
Test the calculate function with floating point numbers
- Input: firstNumber = 2.5, secondNumber = 3.5, operator = '*'
- Expected output: 8.75
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CalculatorUI_calculate_755b65b191_Test {

    @Test
    public void testCalculate() {
        CalculatorUI calculator = new CalculatorUI();

        // Test Scenario 1
        assertEquals(5, calculator.calculate(2, 3, '+'));

        // Test Scenario 2
        assertEquals(3, calculator.calculate(5, 2, '-'));

        // Test Scenario 3
        assertEquals(6, calculator.calculate(2, 3, '*'));

        // Test Scenario 4
        assertEquals(3, calculator.calculate(6, 2, '/'));

        // Test Scenario 5
        assertEquals(1, calculator.calculate(10, 3, '%'));

        // Test Scenario 6
        assertEquals(8, calculator.calculate(2, 3, '^'));

        // Test Scenario 7
        assertEquals(3, calculator.calculate(2, 3, '!'));

        // Test Scenario 8
        assertEquals(Double.POSITIVE_INFINITY, calculator.calculate(2, 0, '/'));

        // Test Scenario 9
        assertEquals(1, calculator.calculate(-2, 3, '+'));

        // Test Scenario 10
        assertEquals(8.75, calculator.calculate(2.5, 3.5, '*'));
    }
}
