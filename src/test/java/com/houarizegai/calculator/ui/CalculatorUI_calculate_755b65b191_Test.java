// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1:
Test Name: TestCalculate_Addition
Description: Test the 'calculate' function with operator '+' to validate the addition functionality.
Input: firstNumber = 5, secondNumber = 3, operator = '+'
Expected Output: 8.0

Test Scenario 2:
Test Name: TestCalculate_Subtraction
Description: Test the 'calculate' function with operator '-' to validate the subtraction functionality.
Input: firstNumber = 9, secondNumber = 4, operator = '-'
Expected Output: 5.0

Test Scenario 3:
Test Name: TestCalculate_Multiplication
Description: Test the 'calculate' function with operator '*' to validate the multiplication functionality.
Input: firstNumber = 7, secondNumber = 6, operator = '*'
Expected Output: 42.0

Test Scenario 4:
Test Name: TestCalculate_Division
Description: Test the 'calculate' function with operator '/' to validate the division functionality.
Input: firstNumber = 10, secondNumber = 2, operator = '/'
Expected Output: 5.0

Test Scenario 5:
Test Name: TestCalculate_Modulo
Description: Test the 'calculate' function with operator '%' to validate the modulo functionality.
Input: firstNumber = 15, secondNumber = 4, operator = '%'
Expected Output: 3.0

Test Scenario 6:
Test Name: TestCalculate_Power
Description: Test the 'calculate' function with operator '^' to validate the power functionality.
Input: firstNumber = 2, secondNumber = 3, operator = '^'
Expected Output: 8.0

Test Scenario 7:
Test Name: TestCalculate_InvalidOperator
Description: Test the 'calculate' function with an invalid operator to verify the function's handling of invalid input.
Input: firstNumber = 7, secondNumber = 3, operator = '$'
Expected Output: 3.0

Test Scenario 8:
Test Name: TestCalculate_ZeroDivision
Description: Test the 'calculate' function with operator '/' and secondNumber as 0 to verify the function's handling of division by zero.
Input: firstNumber = 10, secondNumber = 0, operator = '/'
Expected Output: Infinity or Exception depending on the implementation.
*/

// ********RoostGPT********
public class Calculator {
    public double calculate(double firstNumber, double secondNumber, char operator) {
        switch(operator) {
            case '+':
                return firstNumber + secondNumber;
            case '-':
                return firstNumber - secondNumber;
            case '*':
                return firstNumber * secondNumber;
            case '/':
                return firstNumber / secondNumber;
            case '%':
                return firstNumber % secondNumber;
            case '^':
                return Math.pow(firstNumber, secondNumber);
            default:
                return secondNumber;
        }
    }
}
