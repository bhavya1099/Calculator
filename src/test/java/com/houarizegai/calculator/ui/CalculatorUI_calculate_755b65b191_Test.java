// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Addition
- Given: firstNumber = 5, secondNumber = 10, operator = '+'
- Expected Result: 15 (5+10)

Test Scenario 2: Subtraction
- Given: firstNumber = 20, secondNumber = 10, operator = '-'
- Expected Result: 10 (20-10)

Test Scenario 3: Multiplication
- Given: firstNumber = 7, secondNumber = 6, operator = '*'
- Expected Result: 42 (7*6)

Test Scenario 4: Division
- Given: firstNumber = 30, secondNumber = 5, operator = '/'
- Expected Result: 6 (30/5)

Test Scenario 5: Division by Zero
- Given: firstNumber = 30, secondNumber = 0, operator = '/'
- Expected Result: Exception or Infinity (since dividing by zero is undefined)

Test Scenario 6: Modulus
- Given: firstNumber = 30, secondNumber = 7, operator = '%'
- Expected Result: 2 (30%7)

Test Scenario 7: Exponentiation
- Given: firstNumber = 2, secondNumber = 3, operator = '^'
- Expected Result: 8 (2^3)

Test Scenario 8: Invalid Operator
- Given: firstNumber = 2, secondNumber = 3, operator = 'a'
- Expected Result: 3 (as per the default case in the switch statement)

Test Scenario 9: Negative Numbers
- Given: firstNumber = -2, secondNumber = 3, operator = '*'
- Expected Result: -6 (-2*3)

Test Scenario 10: Decimal Numbers
- Given: firstNumber = 2.5, secondNumber = 4.5, operator = '+'
- Expected Result: 7 (2.5+4.5) 

Test Scenario 11: Large Numbers
- Given: firstNumber = 1e+18, secondNumber = 1e+18, operator = '+'
- Expected Result: 2e+18 (1e+18 + 1e+18)
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class CalculatorUI_calculate_755b65b191_Test {
    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setUp() {
        calculatorUI = new CalculatorUI();
    }

    @Test
    public void testCalculate_Addition() {
        assertEquals(15, calculatorUI.calculate(5, 10, '+'));
    }

    @Test
    public void testCalculate_Subtraction() {
        assertEquals(10, calculatorUI.calculate(20, 10, '-'));
    }

    @Test
    public void testCalculate_Multiplication() {
        assertEquals(42, calculatorUI.calculate(7, 6, '*'));
    }

    @Test
    public void testCalculate_Division() {
        assertEquals(6, calculatorUI.calculate(30, 5, '/'));
    }

    @Test
    public void testCalculate_DivisionByZero() {
        assertThrows(ArithmeticException.class, () -> calculatorUI.calculate(30, 0, '/'));
    }

    @Test
    public void testCalculate_Modulus() {
        assertEquals(2, calculatorUI.calculate(30, 7, '%'));
    }

    @Test
    public void testCalculate_Exponentiation() {
        assertEquals(8, calculatorUI.calculate(2, 3, '^'));
    }

    @Test
    public void testCalculate_InvalidOperator() {
        assertEquals(3, calculatorUI.calculate(2, 3, 'a'));
    }

    @Test
    public void testCalculate_NegativeNumbers() {
        assertEquals(-6, calculatorUI.calculate(-2, 3, '*'));
    }

    @Test
    public void testCalculate_DecimalNumbers() {
        assertEquals(7, calculatorUI.calculate(2.5, 4.5, '+'));
    }

    @Test
    public void testCalculate_LargeNumbers() {
        assertEquals(2e+18, calculatorUI.calculate(1e+18, 1e+18, '+'));
    }
}
