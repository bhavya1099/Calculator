// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Here are some test scenarios that can be written for the calculate function:

1. Test calculation with addition operator:
   - Input: calculate(5, 3, '+')
   - Expected output: 8

2. Test calculation with subtraction operator:
   - Input: calculate(9, 4, '-')
   - Expected output: 5

3. Test calculation with multiplication operator:
   - Input: calculate(7, 6, '*')
   - Expected output: 42

4. Test calculation with division operator:
   - Input: calculate(20, 5, '/')
   - Expected output: 4

5. Test calculation with modulus operator:
   - Input: calculate(25, 7, '%')
   - Expected output: 4

6. Test calculation with power operator:
   - Input: calculate(2, 3, '^')
   - Expected output: 8

7. Test calculation with invalid operator:
   - Input: calculate(5, 2, '&')
   - Expected output: 2

8. Test calculation with division by zero:
   - Input: calculate(5, 0, '/')
   - Expected output: It should throw an exception or return Infinity based on how you handle the exception in your code.

9. Test calculation with large numbers:
   - Input: calculate(123456789, 987654321, '+')
   - Expected output: 1111111110

10. Test calculation with negative numbers:
    - Input: calculate(-5, -3, '+')
    - Expected output: -8

Remember, these are just test scenarios. You would need to implement them in a testing framework like JUnit to actually test your function.
*/

// ********RoostGPT********
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class CalculatorUI_calculate_755b65b191_Test {

    @Test
    public void testCalculateAddition() {
        assertEquals(8, calculate(5, 3, '+'));
    }

    @Test
    public void testCalculateSubtraction() {
        assertEquals(5, calculate(9, 4, '-'));
    }

    @Test
    public void testCalculateMultiplication() {
        assertEquals(42, calculate(7, 6, '*'));
    }

    @Test
    public void testCalculateDivision() {
        assertEquals(4, calculate(20, 5, '/'));
    }

    @Test
    public void testCalculateModulus() {
        assertEquals(4, calculate(25, 7, '%'));
    }

    @Test
    public void testCalculatePower() {
        assertEquals(8, calculate(2, 3, '^'));
    }

    @Test
    public void testCalculateInvalidOperator() {
        assertEquals(2, calculate(5, 2, '&'));
    }

    @Test
    public void testCalculateDivisionByZero() {
        assertThrows(ArithmeticException.class, () -> calculate(5, 0, '/'));
    }

    @Test
    public void testCalculateLargeNumbers() {
        assertEquals(1111111110, calculate(123456789, 987654321, '+'));
    }

    @Test
    public void testCalculateNegativeNumbers() {
        assertEquals(-8, calculate(-5, -3, '+'));
    }

    public double calculate(double firstNumber, double secondNumber, char operator) {
        switch (operator) {
            case '+':
                return firstNumber + secondNumber;
            case '-':
                return firstNumber - secondNumber;
            case '*':
                return firstNumber * secondNumber;
            case '/':
                if(secondNumber == 0)
                    throw new ArithmeticException("Cannot divide by zero");
                return firstNumber / secondNumber;
            case '%':
                return firstNumber % secondNumber;
            case '^':
                return Math.pow(firstNumber, secondNumber);
            default:
                return secondNumber;
        }
    }
}
