// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Here are some test scenarios for the function calculate:

1. Test Scenario: Addition of two positive numbers
   - Input: firstNumber = 4, secondNumber = 5, operator = '+'
   - Expected Output: 9.0

2. Test Scenario: Subtraction of two positive numbers where the first number is greater than the second
   - Input: firstNumber = 10, secondNumber = 5, operator = '-'
   - Expected Output: 5.0

3. Test Scenario: Subtraction of two positive numbers where the second number is greater than the first
   - Input: firstNumber = 2, secondNumber = 5, operator = '-'
   - Expected Output: -3.0

4. Test Scenario: Multiplication of two positive numbers
   - Input: firstNumber = 3, secondNumber = 5, operator = '*'
   - Expected Output: 15.0

5. Test Scenario: Division of two positive numbers where the first number is greater than the second
   - Input: firstNumber = 10, secondNumber = 5, operator = '/'
   - Expected Output: 2.0

6. Test Scenario: Division of two positive numbers where the second number is greater than the first
   - Input: firstNumber = 5, secondNumber = 10, operator = '/'
   - Expected Output: 0.5

7. Test Scenario: Division by zero
   - Input: firstNumber = 5, secondNumber = 0, operator = '/'
   - Expected Output: Infinity (or throw an exception)

8. Test Scenario: Modulus of two positive numbers
   - Input: firstNumber = 10, secondNumber = 3, operator = '%'
   - Expected Output: 1.0

9. Test Scenario: Power of two positive numbers
   - Input: firstNumber = 2, secondNumber = 3, operator = '^'
   - Expected Output: 8.0

10. Test Scenario: Invalid operator
    - Input: firstNumber = 2, secondNumber = 3, operator = 'a'
    - Expected Output: 3.0
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import com.houarizegai.calculator.CalculatorUI;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class CalculatorUI_calculate_755b65b191_Test {

    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setUp() {
        calculatorUI = new CalculatorUI();
    }

    @Test
    public void testCalculate_Addition() {
        Assertions.assertEquals(9.0, calculatorUI.calculate(4, 5, '+'));
    }

    @Test
    public void testCalculate_Subtraction_FirstNumberGreaterThanSecondNumber() {
        Assertions.assertEquals(5.0, calculatorUI.calculate(10, 5, '-'));
    }

    @Test
    public void testCalculate_Subtraction_SecondNumberGreaterThanFirstNumber() {
        Assertions.assertEquals(-3.0, calculatorUI.calculate(2, 5, '-'));
    }

    @Test
    public void testCalculate_Multiplication() {
        Assertions.assertEquals(15.0, calculatorUI.calculate(3, 5, '*'));
    }

    @Test
    public void testCalculate_Division_FirstNumberGreaterThanSecondNumber() {
        Assertions.assertEquals(2.0, calculatorUI.calculate(10, 5, '/'));
    }

    @Test
    public void testCalculate_Division_SecondNumberGreaterThanFirstNumber() {
        Assertions.assertEquals(0.5, calculatorUI.calculate(5, 10, '/'));
    }

    @Test
    public void testCalculate_Division_ByZero() {
        Assertions.assertEquals(Double.POSITIVE_INFINITY, calculatorUI.calculate(5, 0, '/'));
    }

    @Test
    public void testCalculate_Modulus() {
        Assertions.assertEquals(1.0, calculatorUI.calculate(10, 3, '%'));
    }

    @Test
    public void testCalculate_Power() {
        Assertions.assertEquals(8.0, calculatorUI.calculate(2, 3, '^'));
    }

    @Test
    public void testCalculate_InvalidOperator() {
        Assertions.assertEquals(3.0, calculatorUI.calculate(2, 3, 'a'));
    }
}
