// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1:
- Description: Verify that the function correctly adds two positive numbers.
- Test Steps:
  - Call the calculate function with the inputs (2, 3, '+').
- Expected Result: The function should return 5.

Test Scenario 2:
- Description: Verify that the function correctly subtracts two positive numbers.
- Test Steps:
  - Call the calculate function with the inputs (5, 3, '-').
- Expected Result: The function should return 2.

Test Scenario 3:
- Description: Verify that the function correctly multiplies two positive numbers.
- Test Steps:
  - Call the calculate function with the inputs (2, 3, '*').
- Expected Result: The function should return 6.

Test Scenario 4:
- Description: Verify that the function correctly divides two positive numbers.
- Test Steps:
  - Call the calculate function with the inputs (6, 3, '/').
- Expected Result: The function should return 2.

Test Scenario 5:
- Description: Verify that the function correctly calculates the modulus of two positive numbers.
- Test Steps:
  - Call the calculate function with the inputs (10, 3, '%').
- Expected Result: The function should return 1.

Test Scenario 6:
- Description: Verify that the function correctly calculates the power of two positive numbers.
- Test Steps:
  - Call the calculate function with the inputs (2, 3, '^').
- Expected Result: The function should return 8.

Test Scenario 7:
- Description: Verify that the function returns the second number when an invalid operator is used.
- Test Steps:
  - Call the calculate function with the inputs (2, 3, 'x').
- Expected Result: The function should return 3.

Test Scenario 8:
- Description: Verify that the function correctly handles zero values.
- Test Steps:
  - Call the calculate function with the inputs (0, 5, '+').
- Expected Result: The function should return 5.

Test Scenario 9:
- Description: Verify that the function correctly handles division by zero.
- Test Steps:
  - Call the calculate function with the inputs (5, 0, '/').
- Expected Result: The function should return infinity or a defined error message.

Test Scenario 10:
- Description: Verify that the function correctly handles negative numbers.
- Test Steps:
  - Call the calculate function with the inputs (-2, -3, '+').
- Expected Result: The function should return -5.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class CalculatorUI_calculate_755b65b191_Test {

    @Test
    public void testCalculate_addition() {
        double result = new CalculatorUI().calculate(2, 3, '+');
        Assertions.assertEquals(5, result);
    }

    @Test
    public void testCalculate_subtraction() {
        double result = new CalculatorUI().calculate(5, 3, '-');
        Assertions.assertEquals(2, result);
    }

    @Test
    public void testCalculate_multiplication() {
        double result = new CalculatorUI().calculate(2, 3, '*');
        Assertions.assertEquals(6, result);
    }

    @Test
    public void testCalculate_division() {
        double result = new CalculatorUI().calculate(6, 3, '/');
        Assertions.assertEquals(2, result);
    }

    @Test
    public void testCalculate_modulus() {
        double result = new CalculatorUI().calculate(10, 3, '%');
        Assertions.assertEquals(1, result);
    }

    @Test
    public void testCalculate_power() {
        double result = new CalculatorUI().calculate(2, 3, '^');
        Assertions.assertEquals(8, result);
    }

    @Test
    public void testCalculate_invalidOperator() {
        double result = new CalculatorUI().calculate(2, 3, 'x');
        Assertions.assertEquals(3, result);
    }

    @Test
    public void testCalculate_zeroValues() {
        double result = new CalculatorUI().calculate(0, 5, '+');
        Assertions.assertEquals(5, result);
    }

    @Test
    public void testCalculate_divisionByZero() {
        Assertions.assertThrows(ArithmeticException.class, () -> {
            new CalculatorUI().calculate(5, 0, '/');
        });
    }

    @Test
    public void testCalculate_negativeNumbers() {
        double result = new CalculatorUI().calculate(-2, -3, '+');
        Assertions.assertEquals(-5, result);
    }
}
