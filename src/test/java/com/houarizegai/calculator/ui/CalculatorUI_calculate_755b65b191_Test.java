// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1:
Test the calculate function with operator '+' for two positive numbers.
Expected Result: The result should be the sum of the two numbers.

Test Scenario 2:
Test the calculate function with operator '+' for a positive and a negative number.
Expected Result: The result should be the subtraction of the second number from the first.

Test Scenario 3:
Test the calculate function with operator '-' for two positive numbers where the first number is greater than the second.
Expected Result: The result should be the subtraction of the second number from the first.

Test Scenario 4:
Test the calculate function with operator '-' for two positive numbers where the second number is greater than the first.
Expected Result: The result should be a negative number.

Test Scenario 5:
Test the calculate function with operator '*' for two positive numbers.
Expected Result: The result should be the multiplication of the two numbers.

Test Scenario 6:
Test the calculate function with operator '*' for a positive and a negative number.
Expected Result: The result should be a negative number.

Test Scenario 7:
Test the calculate function with operator '/' for two positive numbers where the first number is greater than the second.
Expected Result: The result should be the division of the first number by the second.

Test Scenario 8:
Test the calculate function with operator '/' for two positive numbers where the first number is less than the second.
Expected Result: The result should be a number less than 1.

Test Scenario 9:
Test the calculate function with operator '/' for a positive number and zero.
Expected Result: The function should return infinity or an error message.

Test Scenario 10:
Test the calculate function with operator '%' for two positive numbers where the first number is greater than the second.
Expected Result: The result should be the remainder when the first number is divided by the second.

Test Scenario 11:
Test the calculate function with operator '%' for two positive numbers where the first number is less than the second.
Expected Result: The result should be the first number.

Test Scenario 12:
Test the calculate function with operator '^' for two positive numbers.
Expected Result: The result should be the first number raised to the power of the second number.

Test Scenario 13:
Test the calculate function with an operator not defined in the function.
Expected Result: The result should be the second number.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CalculatorUI_calculate_755b65b191_Test {

    @Test
    public void testCalculateAddition() {
        assertEquals(5.0, new CalculatorUI().calculate(2.0, 3.0, '+'));
    }

    @Test
    public void testCalculateSubtraction() {
        assertEquals(-1.0, new CalculatorUI().calculate(2.0, 3.0, '-'));
    }

    @Test
    public void testCalculateMultiplication() {
        assertEquals(6.0, new CalculatorUI().calculate(2.0, 3.0, '*'));
    }

    @Test
    public void testCalculateDivision() {
        assertEquals(2.0, new CalculatorUI().calculate(6.0, 3.0, '/'));
    }

    @Test
    public void testCalculateModulo() {
        assertEquals(2.0, new CalculatorUI().calculate(8.0, 3.0, '%'));
    }

    @Test
    public void testCalculatePower() {
        assertEquals(8.0, new CalculatorUI().calculate(2.0, 3.0, '^'));
    }

    @Test
    public void testCalculateInvalidOperator() {
        assertEquals(3.0, new CalculatorUI().calculate(2.0, 3.0, 'x'));
    }

    @Test
    public void testCalculateDivisionByZero() {
        assertThrows(ArithmeticException.class, () -> new CalculatorUI().calculate(2.0, 0.0, '/'));
    }
}
