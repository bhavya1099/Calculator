// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Addition
- Given: firstNumber = 5, secondNumber = 10, operator = '+'
- Expected: The function should return 15

Test Scenario 2: Subtraction
- Given: firstNumber = 20, secondNumber = 10, operator = '-'
- Expected: The function should return 10

Test Scenario 3: Multiplication
- Given: firstNumber = 7, secondNumber = 3, operator = '*'
- Expected: The function should return 21

Test Scenario 4: Division
- Given: firstNumber = 50, secondNumber = 10, operator = '/'
- Expected: The function should return 5

Test Scenario 5: Modulus
- Given: firstNumber = 15, secondNumber = 4, operator = '%'
- Expected: The function should return 3 

Test Scenario 6: Power
- Given: firstNumber = 2, secondNumber = 3, operator = '^'
- Expected: The function should return 8

Test Scenario 7: Unknown Operator
- Given: firstNumber = 5, secondNumber = 10, operator = '@'
- Expected: The function should return the secondNumber, i.e., 10

Test Scenario 8: Division by Zero
- Given: firstNumber = 10, secondNumber = 0, operator = '/'
- Expected: The function should return NaN or Infinity depending on the language's handling of division by zero

Test Scenario 9: Negative Numbers
- Given: firstNumber = -5, secondNumber = -10, operator = '+'
- Expected: The function should return -15

Test Scenario 10: Decimal Numbers
- Given: firstNumber = 1.5, secondNumber = 2.5, operator = '*'
- Expected: The function should return 3.75
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CalculatorUI_calculate_755b65b191_Test {

    @Test
    public void testCalculate() {
        CalculatorUI calculator = new CalculatorUI();

        assertEquals(15, calculator.calculate(5, 10, '+'));
        assertEquals(10, calculator.calculate(20, 10, '-'));
        assertEquals(21, calculator.calculate(7, 3, '*'));
        assertEquals(5, calculator.calculate(50, 10, '/'));
        assertEquals(3, calculator.calculate(15, 4, '%'));
        assertEquals(8, calculator.calculate(2, 3, '^'));
        assertEquals(10, calculator.calculate(5, 10, '@'));
        assertTrue(Double.isInfinite(calculator.calculate(10, 0, '/')));
        assertEquals(-15, calculator.calculate(-5, -10, '+'));
        assertEquals(3.75, calculator.calculate(1.5, 2.5, '*'));
    }
}
