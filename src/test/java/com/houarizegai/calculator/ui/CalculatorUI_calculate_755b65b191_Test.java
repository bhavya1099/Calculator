// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Addition
- Given firstNumber as 5.0 and secondNumber as 3.0 with operator as '+'
- Expected result is 8.0

Test Scenario 2: Subtraction
- Given firstNumber as 5.0 and secondNumber as 3.0 with operator as '-'
- Expected result is 2.0

Test Scenario 3: Multiplication
- Given firstNumber as 5.0 and secondNumber as 3.0 with operator as '*'
- Expected result is 15.0

Test Scenario 4: Division
- Given firstNumber as 6.0 and secondNumber as 3.0 with operator as '/'
- Expected result is 2.0

Test Scenario 5: Division by zero
- Given firstNumber as 5.0 and secondNumber as 0.0 with operator as '/'
- Expected result is Infinity since division by zero is undefined in mathematics

Test Scenario 6: Modulus
- Given firstNumber as 5.0 and secondNumber as 3.0 with operator as '%'
- Expected result is 2.0

Test Scenario 7: Power
- Given firstNumber as 5.0 and secondNumber as 3.0 with operator as '^'
- Expected result is 125.0

Test Scenario 8: Invalid Operator
- Given firstNumber as 5.0 and secondNumber as 3.0 with operator as '#'
- Expected result is 3.0 since the default case in the switch statement returns the secondNumber

Test Scenario 9: Negative Numbers
- Given firstNumber as -5.0 and secondNumber as -3.0 with operator as '+'
- Expected result is -8.0

Test Scenario 10: Fractional Numbers
- Given firstNumber as 5.5 and secondNumber as 3.5 with operator as '*'
- Expected result is 19.25
*/

// ********RoostGPT********
import com.houarizegai.calculator.ui.CalculatorUI;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class CalculatorUI_calculate_755b65b191_Test {
    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setup() {
        calculatorUI = new CalculatorUI();
    }

    @Test
    public void testCalculate_Addition() {
        Assertions.assertEquals(8.0, calculatorUI.calculate(5.0, 3.0, '+'));
    }

    @Test
    public void testCalculate_Subtraction() {
        Assertions.assertEquals(2.0, calculatorUI.calculate(5.0, 3.0, '-'));
    }

    @Test
    public void testCalculate_Multiplication() {
        Assertions.assertEquals(15.0, calculatorUI.calculate(5.0, 3.0, '*'));
    }

    @Test
    public void testCalculate_Division() {
        Assertions.assertEquals(2.0, calculatorUI.calculate(6.0, 3.0, '/'));
    }

    @Test
    public void testCalculate_DivisionByZero() {
        Assertions.assertEquals(Double.POSITIVE_INFINITY, calculatorUI.calculate(5.0, 0.0, '/'));
    }

    @Test
    public void testCalculate_Modulus() {
        Assertions.assertEquals(2.0, calculatorUI.calculate(5.0, 3.0, '%'));
    }

    @Test
    public void testCalculate_Power() {
        Assertions.assertEquals(125.0, calculatorUI.calculate(5.0, 3.0, '^'));
    }

    @Test
    public void testCalculate_InvalidOperator() {
        Assertions.assertEquals(3.0, calculatorUI.calculate(5.0, 3.0, '#'));
    }

    @Test
    public void testCalculate_NegativeNumbers() {
        Assertions.assertEquals(-8.0, calculatorUI.calculate(-5.0, -3.0, '+'));
    }

    @Test
    public void testCalculate_FractionalNumbers() {
        Assertions.assertEquals(19.25, calculatorUI.calculate(5.5, 3.5, '*'));
    }
}
