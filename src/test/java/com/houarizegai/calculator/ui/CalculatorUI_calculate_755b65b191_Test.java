// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1:
Test Name: testCalculateAddition
Purpose: To test the addition operation in calculate function.
Inputs: firstNumber = 10, secondNumber = 5, operator = '+'
Expected Result: 15

Test Scenario 2:
Test Name: testCalculateSubtraction
Purpose: To test the subtraction operation in calculate function.
Inputs: firstNumber = 10, secondNumber = 5, operator = '-'
Expected Result: 5

Test Scenario 3:
Test Name: testCalculateMultiplication
Purpose: To test the multiplication operation in calculate function.
Inputs: firstNumber = 10, secondNumber = 5, operator = '*'
Expected Result: 50

Test Scenario 4:
Test Name: testCalculateDivision
Purpose: To test the division operation in calculate function.
Inputs: firstNumber = 10, secondNumber = 5, operator = '/'
Expected Result: 2

Test Scenario 5:
Test Name: testCalculateModulus
Purpose: To test the modulus operation in calculate function.
Inputs: firstNumber = 10, secondNumber = 3, operator = '%'
Expected Result: 1

Test Scenario 6:
Test Name: testCalculatePower
Purpose: To test the power operation in calculate function.
Inputs: firstNumber = 10, secondNumber = 2, operator = '^'
Expected Result: 100

Test Scenario 7:
Test Name: testCalculateInvalidOperator
Purpose: To test the calculate function with an invalid operator.
Inputs: firstNumber = 10, secondNumber = 5, operator = '!'
Expected Result: 5

Test Scenario 8:
Test Name: testCalculateDivisionByZero
Purpose: To test the division operation in calculate function when the second number is zero.
Inputs: firstNumber = 10, secondNumber = 0, operator = '/'
Expected Result: Infinity or Exception depending on how the function handles this case.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CalculatorUI_calculate_755b65b191_Test {

    @Test
    public void testCalculateAddition() {
        CalculatorUI calculator = new CalculatorUI();
        double actualResult = calculator.calculate(10, 5, '+');
        assertEquals(15, actualResult);
    }

    @Test
    public void testCalculateSubtraction() {
        CalculatorUI calculator = new CalculatorUI();
        double actualResult = calculator.calculate(10, 5, '-');
        assertEquals(5, actualResult);
    }

    @Test
    public void testCalculateMultiplication() {
        CalculatorUI calculator = new CalculatorUI();
        double actualResult = calculator.calculate(10, 5, '*');
        assertEquals(50, actualResult);
    }

    @Test
    public void testCalculateDivision() {
        CalculatorUI calculator = new CalculatorUI();
        double actualResult = calculator.calculate(10, 5, '/');
        assertEquals(2, actualResult);
    }

    @Test
    public void testCalculateModulus() {
        CalculatorUI calculator = new CalculatorUI();
        double actualResult = calculator.calculate(10, 3, '%');
        assertEquals(1, actualResult);
    }

    @Test
    public void testCalculatePower() {
        CalculatorUI calculator = new CalculatorUI();
        double actualResult = calculator.calculate(10, 2, '^');
        assertEquals(100, actualResult);
    }

    @Test
    public void testCalculateInvalidOperator() {
        CalculatorUI calculator = new CalculatorUI();
        double actualResult = calculator.calculate(10, 5, '!');
        assertEquals(5, actualResult);
    }

    @Test
    public void testCalculateDivisionByZero() {
        CalculatorUI calculator = new CalculatorUI();
        double actualResult = calculator.calculate(10, 0, '/');
        assertEquals(Double.POSITIVE_INFINITY, actualResult);
    }
}
