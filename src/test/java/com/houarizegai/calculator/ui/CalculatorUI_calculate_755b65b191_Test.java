// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: 
Test the addition operation. 
- Input: firstNumber = 2, secondNumber = 3, operator = '+'
- Expected Output: 5

Test Scenario 2: 
Test the subtraction operation. 
- Input: firstNumber = 2, secondNumber = 3, operator = '-'
- Expected Output: -1

Test Scenario 3: 
Test the multiplication operation. 
- Input: firstNumber = 2, secondNumber = 3, operator = '*'
- Expected Output: 6

Test Scenario 4: 
Test the division operation. 
- Input: firstNumber = 6, secondNumber = 3, operator = '/'
- Expected Output: 2

Test Scenario 5: 
Test the modulus operation. 
- Input: firstNumber = 10, secondNumber = 3, operator = '%'
- Expected Output: 1

Test Scenario 6: 
Test the power operation. 
- Input: firstNumber = 2, secondNumber = 3, operator = '^'
- Expected Output: 8

Test Scenario 7: 
Test with an invalid operator. 
- Input: firstNumber = 2, secondNumber = 3, operator = '&'
- Expected Output: 3

Test Scenario 8: 
Test division by zero.
- Input: firstNumber = 2, secondNumber = 0, operator = '/'
- Expected Output: Infinity or some kind of exception or error message depending on how you want your function to handle this case.

Test Scenario 9: 
Test the power operation with negative exponent.
- Input: firstNumber = 2, secondNumber = -3, operator = '^'
- Expected Output: 0.125
*/

// ********RoostGPT********
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import com.houarizegai.calculator.ui.CalculatorUI;

public class CalculatorUI_calculate_755b65b191_Test {

    @Test
    public void testCalculate() {
        CalculatorUI calculator = new CalculatorUI();

        assertEquals(5, calculator.calculate(2, 3, '+'), "Test Scenario 1: Addition failed");
        assertEquals(-1, calculator.calculate(2, 3, '-'), "Test Scenario 2: Subtraction failed");
        assertEquals(6, calculator.calculate(2, 3, '*'), "Test Scenario 3: Multiplication failed");
        assertEquals(2, calculator.calculate(6, 3, '/'), "Test Scenario 4: Division failed");
        assertEquals(1, calculator.calculate(10, 3, '%'), "Test Scenario 5: Modulus failed");
        assertEquals(8, calculator.calculate(2, 3, '^'), "Test Scenario 6: Power failed");
        assertEquals(3, calculator.calculate(2, 3, '&'), "Test Scenario 7: Invalid operator failed");
        assertEquals(Double.POSITIVE_INFINITY, calculator.calculate(2, 0, '/'), "Test Scenario 8: Division by zero failed");
        assertEquals(0.125, calculator.calculate(2, -3, '^'), "Test Scenario 9: Power with negative exponent failed");
    }
}
