// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Addition
- Given: firstNumber = 5, secondNumber = 10, operator = '+'
- Expected Result: 15 (5+10)

Test Scenario 2: Subtraction
- Given: firstNumber = 20, secondNumber = 10, operator = '-'
- Expected Result: 10 (20-10)

Test Scenario 3: Multiplication
- Given: firstNumber = 7, secondNumber = 6, operator = '*'
- Expected Result: 42 (7*6)

Test Scenario 4: Division
- Given: firstNumber = 100, secondNumber = 20, operator = '/'
- Expected Result: 5 (100/20)

Test Scenario 5: Division by Zero
- Given: firstNumber = 100, secondNumber = 0, operator = '/'
- Expected Result: Exception or Infinity

Test Scenario 6: Remainder
- Given: firstNumber = 100, secondNumber = 20, operator = '%'
- Expected Result: 0 (100%20)

Test Scenario 7: Power
- Given: firstNumber = 2, secondNumber = 3, operator = '^'
- Expected Result: 8 (2^3)

Test Scenario 8: Invalid Operator
- Given: firstNumber = 2, secondNumber = 3, operator = '!'
- Expected Result: 3 (Return second number)

Test Scenario 9: Negative Numbers
- Given: firstNumber = -5, secondNumber = -10, operator = '+'
- Expected Result: -15 (-5+-10)

Test Scenario 10: Floating Point Numbers
- Given: firstNumber = 1.5, secondNumber = 2.5, operator = '+'
- Expected Result: 4 (1.5+2.5)
*/

// ********RoostGPT********
import com.houarizegai.calculator.CalculatorUI;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class CalculatorUI_calculate_755b65b191_Test {

    private CalculatorUI calculatorUI;

    @BeforeEach
    public void setUp() {
        calculatorUI = new CalculatorUI();
    }

    @Test
    public void testCalculate_Addition() {
        double result = calculatorUI.calculate(5, 10, '+');
        Assertions.assertEquals(15, result);
    }

    @Test
    public void testCalculate_Subtraction() {
        double result = calculatorUI.calculate(20, 10, '-');
        Assertions.assertEquals(10, result);
    }

    @Test
    public void testCalculate_Multiplication() {
        double result = calculatorUI.calculate(7, 6, '*');
        Assertions.assertEquals(42, result);
    }

    @Test
    public void testCalculate_Division() {
        double result = calculatorUI.calculate(100, 20, '/');
        Assertions.assertEquals(5, result);
    }

    @Test
    public void testCalculate_DivisionByZero() {
        Assertions.assertThrows(ArithmeticException.class, () -> calculatorUI.calculate(100, 0, '/'));
    }

    @Test
    public void testCalculate_Remainder() {
        double result = calculatorUI.calculate(100, 20, '%');
        Assertions.assertEquals(0, result);
    }

    @Test
    public void testCalculate_Power() {
        double result = calculatorUI.calculate(2, 3, '^');
        Assertions.assertEquals(8, result);
    }

    @Test
    public void testCalculate_InvalidOperator() {
        double result = calculatorUI.calculate(2, 3, '!');
        Assertions.assertEquals(3, result);
    }

    @Test
    public void testCalculate_NegativeNumbers() {
        double result = calculatorUI.calculate(-5, -10, '+');
        Assertions.assertEquals(-15, result);
    }

    @Test
    public void testCalculate_FloatingPointNumbers() {
        double result = calculatorUI.calculate(1.5, 2.5, '+');
        Assertions.assertEquals(4, result);
    }
}
