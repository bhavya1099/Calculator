// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Addition
- Given: firstNumber = 5, secondNumber = 10, operator = '+'
- Expected Result: 15 (5+10)

Test Scenario 2: Subtraction
- Given: firstNumber = 20, secondNumber = 10, operator = '-'
- Expected Result: 10 (20-10)

Test Scenario 3: Multiplication
- Given: firstNumber = 7, secondNumber = 6, operator = '*'
- Expected Result: 42 (7*6)

Test Scenario 4: Division
- Given: firstNumber = 100, secondNumber = 20, operator = '/'
- Expected Result: 5 (100/20)

Test Scenario 5: Division by Zero
- Given: firstNumber = 100, secondNumber = 0, operator = '/'
- Expected Result: Infinity 

Test Scenario 6: Modulus
- Given: firstNumber = 10, secondNumber = 3, operator = '%'
- Expected Result: 1 (10%3)

Test Scenario 7: Power
- Given: firstNumber = 2, secondNumber = 3, operator = '^'
- Expected Result: 8 (2^3)

Test Scenario 8: Default Case
- Given: firstNumber = 5, secondNumber = 10, operator = 'a' (invalid operator)
- Expected Result: 10 (returns secondNumber)

Test Scenario 9: Negative Numbers
- Given: firstNumber = -5, secondNumber = -10, operator = '+'
- Expected Result: -15 (-5 + -10)

Test Scenario 10: Floating Point Numbers
- Given: firstNumber = 1.5, secondNumber = 2.5, operator = '*'
- Expected Result: 3.75 (1.5 * 2.5)

Test Scenario 11: Zero Numbers
- Given: firstNumber = 0, secondNumber = 0, operator = '+'
- Expected Result: 0 (0 + 0)
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CalculatorUI_calculate_755b65b191_Test {

    @Test
    public void testCalculate() {
        CalculatorUI calculator = new CalculatorUI();

        // Test Scenario 1: Addition
        assertEquals(15, calculator.calculate(5, 10, '+'));

        // Test Scenario 2: Subtraction
        assertEquals(10, calculator.calculate(20, 10, '-'));

        // Test Scenario 3: Multiplication
        assertEquals(42, calculator.calculate(7, 6, '*'));

        // Test Scenario 4: Division
        assertEquals(5, calculator.calculate(100, 20, '/'));

        // Test Scenario 5: Division by Zero
        assertEquals(Double.POSITIVE_INFINITY, calculator.calculate(100, 0, '/'));

        // Test Scenario 6: Modulus
        assertEquals(1, calculator.calculate(10, 3, '%'));

        // Test Scenario 7: Power
        assertEquals(8, calculator.calculate(2, 3, '^'));

        // Test Scenario 8: Default Case
        assertEquals(10, calculator.calculate(5, 10, 'a'));

        // Test Scenario 9: Negative Numbers
        assertEquals(-15, calculator.calculate(-5, -10, '+'));

        // Test Scenario 10: Floating Point Numbers
        assertEquals(3.75, calculator.calculate(1.5, 2.5, '*'));

        // Test Scenario 11: Zero Numbers
        assertEquals(0, calculator.calculate(0, 0, '+'));
    }
}
