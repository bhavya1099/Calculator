// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1:
- Description: Test the calculate function with '+' operator
- Input: firstNumber = 5, secondNumber = 3, operator = '+'
- Expected Output: 8

Test Scenario 2:
- Description: Test the calculate function with '-' operator
- Input: firstNumber = 7, secondNumber = 2, operator = '-'
- Expected Output: 5

Test Scenario 3:
- Description: Test the calculate function with '*' operator
- Input: firstNumber = 4, secondNumber = 3, operator = '*'
- Expected Output: 12

Test Scenario 4:
- Description: Test the calculate function with '/' operator
- Input: firstNumber = 10, secondNumber = 2, operator = '/'
- Expected Output: 5

Test Scenario 5:
- Description: Test the calculate function with '%' operator
- Input: firstNumber = 10, secondNumber = 3, operator = '%'
- Expected Output: 1

Test Scenario 6:
- Description: Test the calculate function with '^' operator
- Input: firstNumber = 2, secondNumber = 3, operator = '^'
- Expected Output: 8

Test Scenario 7:
- Description: Test the calculate function with an invalid operator
- Input: firstNumber = 5, secondNumber = 2, operator = '#'
- Expected Output: 2

Test Scenario 8:
- Description: Test the calculate function with '/' operator and secondNumber = 0
- Input: firstNumber = 5, secondNumber = 0, operator = '/'
- Expected Output: Double.INFINITY or Exception depending on the programming language's handling of division by zero

Test Scenario 9:
- Description: Test the calculate function with '%' operator and secondNumber = 0
- Input: firstNumber = 5, secondNumber = 0, operator = '%'
- Expected Output: NaN or Exception depending on the programming language's handling of modulus by zero

Test Scenario 10:
- Description: Test the calculate function with '^' operator and secondNumber = 0
- Input: firstNumber = 5, secondNumber = 0, operator = '^'
- Expected Output: 1
*/

// ********RoostGPT********
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import com.houarizegai.calculator.CalculatorUI;

public class CalculatorUI_calculate_755b65b191_Test {

    private CalculatorUI calculatorUI = new CalculatorUI();

    @Test
    public void testCalculateAddition() {
        double result = calculatorUI.calculate(5, 3, '+');
        assertEquals(8, result);
    }

    @Test
    public void testCalculateSubtraction() {
        double result = calculatorUI.calculate(7, 2, '-');
        assertEquals(5, result);
    }

    @Test
    public void testCalculateMultiplication() {
        double result = calculatorUI.calculate(4, 3, '*');
        assertEquals(12, result);
    }

    @Test
    public void testCalculateDivision() {
        double result = calculatorUI.calculate(10, 2, '/');
        assertEquals(5, result);
    }

    @Test
    public void testCalculateModulus() {
        double result = calculatorUI.calculate(10, 3, '%');
        assertEquals(1, result);
    }

    @Test
    public void testCalculatePower() {
        double result = calculatorUI.calculate(2, 3, '^');
        assertEquals(8, result);
    }

    @Test
    public void testCalculateInvalidOperator() {
        double result = calculatorUI.calculate(5, 2, '#');
        assertEquals(2, result);
    }

    @Test
    public void testCalculateDivisionByZero() {
        double result = calculatorUI.calculate(5, 0, '/');
        assertEquals(Double.POSITIVE_INFINITY, result);
    }

    @Test
    public void testCalculateModulusByZero() {
        double result = calculatorUI.calculate(5, 0, '%');
        assertEquals(Double.NaN, result);
    }

    @Test
    public void testCalculatePowerByZero() {
        double result = calculatorUI.calculate(5, 0, '^');
        assertEquals(1, result);
    }
}
