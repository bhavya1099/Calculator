// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1:
- Description: Test the calculate function with '+' operator
- Input: firstNumber = 5, secondNumber = 3, operator = '+'
- Expected Output: 8

Test Scenario 2:
- Description: Test the calculate function with '-' operator
- Input: firstNumber = 7, secondNumber = 2, operator = '-'
- Expected Output: 5

Test Scenario 3:
- Description: Test the calculate function with '*' operator
- Input: firstNumber = 4, secondNumber = 3, operator = '*'
- Expected Output: 12

Test Scenario 4:
- Description: Test the calculate function with '/' operator
- Input: firstNumber = 10, secondNumber = 2, operator = '/'
- Expected Output: 5

Test Scenario 5:
- Description: Test the calculate function with '%' operator
- Input: firstNumber = 10, secondNumber = 3, operator = '%'
- Expected Output: 1

Test Scenario 6:
- Description: Test the calculate function with '^' operator
- Input: firstNumber = 2, secondNumber = 3, operator = '^'
- Expected Output: 8

Test Scenario 7:
- Description: Test the calculate function with an invalid operator
- Input: firstNumber = 5, secondNumber = 2, operator = '#'
- Expected Output: 2

Test Scenario 8:
- Description: Test the calculate function with '/' operator and secondNumber = 0
- Input: firstNumber = 5, secondNumber = 0, operator = '/'
- Expected Output: Double.INFINITY or Exception depending on the programming language's handling of division by zero

Test Scenario 9:
- Description: Test the calculate function with '%' operator and secondNumber = 0
- Input: firstNumber = 5, secondNumber = 0, operator = '%'
- Expected Output: NaN or Exception depending on the programming language's handling of modulus by zero

Test Scenario 10:
- Description: Test the calculate function with '^' operator and secondNumber < 0
- Input: firstNumber = 2, secondNumber = -3, operator = '^'
- Expected Output: 0.125
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CalculatorUI_calculate_755b65b191_Test {

    @Test
    public void testCalculate() {
        CalculatorUI calculator = new CalculatorUI();

        // Test Scenario 1
        assertEquals(8, calculator.calculate(5, 3, '+'), "Test the calculate function with '+' operator");

        // Test Scenario 2
        assertEquals(5, calculator.calculate(7, 2, '-'), "Test the calculate function with '-' operator");

        // Test Scenario 3
        assertEquals(12, calculator.calculate(4, 3, '*'), "Test the calculate function with '*' operator");

        // Test Scenario 4
        assertEquals(5, calculator.calculate(10, 2, '/'), "Test the calculate function with '/' operator");

        // Test Scenario 5
        assertEquals(1, calculator.calculate(10, 3, '%'), "Test the calculate function with '%' operator");

        // Test Scenario 6
        assertEquals(8, calculator.calculate(2, 3, '^'), "Test the calculate function with '^' operator");

        // Test Scenario 7
        assertEquals(2, calculator.calculate(5, 2, '#'), "Test the calculate function with an invalid operator");

        // Test Scenario 8
        assertEquals(Double.POSITIVE_INFINITY, calculator.calculate(5, 0, '/'), "Test the calculate function with '/' operator and secondNumber = 0");

        // Test Scenario 9
        assertTrue(Double.isNaN(calculator.calculate(5, 0, '%')), "Test the calculate function with '%' operator and secondNumber = 0");

        // Test Scenario 10
        assertEquals(0.125, calculator.calculate(2, -3, '^'), "Test the calculate function with '^' operator and secondNumber < 0");
    }
}
