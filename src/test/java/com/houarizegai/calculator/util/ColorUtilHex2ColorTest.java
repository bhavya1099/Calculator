// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=hex2Color_b74d630591
ROOST_METHOD_SIG_HASH=hex2Color_e227804b01
"""
Scenario 1: Test the conversion of valid color hex code to Color object
TestName: testValidHexToColorConversion
Description: This test is meant to check the correct conversion of a valid hex color code into a java.awt.Color object.
Execution:
  Arrange: The input is a valid hex color code.
  Act: Pass the valid hex color code to the hex2Color method.
  Assert: The returned Color object should match the expected Color object based on the input hex color code.
Validation:
  The assertion verifies that the hex2Color method correctly converts a valid hex color code into a Color object. Success in this test means that the color conversion is working correctly.
Scenario 2: Test the handling of invalid color hex code
TestName: testInvalidHexToColorConversion
Description: This test is meant to check the handling of an invalid hex color code (those hex codes which doesn't represent a color).
Execution:
  Arrange: The input is an invalid hex color code.
  Act: Pass the invalid hex color code to the hex2Color method.
  Assert: The method should return null.
Validation:
  The assertion verifies that the hex2Color method returns null for invalid hex color codes. This is expected since the method should not convert such values and returns Optional's empty case as null.
Scenario 3: Test the handling of null input
TestName: testNullInputHandling
Description: This test is meant to check if the method correctly handles a null input.
Execution:
  Arrange: The input is null.
  Act: Pass null to the hex2Color method.
  Assert: The method should return null.
Validation:
  The assertion verifies that the hex2Color method returns null when the input is null. This is expected behavior handling the Optional's empty case, it is safe from NullPointerExceptions.
Scenario 4: Test the handling of color hex code with less than six characters.
TestName: testShortHexCodeHandling
Description: This test is meant to check the handling of hex color codes that are valid but too short (less than six characters).
Execution:
  Arrange: The input is a valid but short hex color code.
  Act: Pass the short hex color code to the hex2Color method.
  Assert: An exception is expected to be thrown, namely StringIndexOutOfBoundsException.
Validation:
  The assertion verifies that the hex2Color method throws a StringIndexOutOfBoundsException when the hex color code is too short. This shows that the method properly expects color hex codes of six characters.
"""
*/
// ********RoostGPT********
package com.houarizegai.calculator.util;

import java.awt.Color;
import java.util.Optional;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.awt.*;
import org.junit.jupiter.api.*;

@Tag("com.houarizegai.calculator.util")
@Tag("com.houarizegai.calculator.util.hex2Color")
@Tag("roostTest1")
@Tag("roostTest2")
public class ColorUtilHex2ColorTest {

	@Test
	public void testValidHexToColorConversion() {
		String colorHex = "A52A2A";
		Optional<Color> expectedColor = Optional.of(new Color(165, 42, 42));
		assertEquals(expectedColor.get(), ColorUtil.hex2Color(colorHex));
	}

	@Test
	public void testInvalidHexToColorConversion() {
		String colorHex = "ZZZZZZ";
		assertNull(ColorUtil.hex2Color(colorHex));
	}

	@Test
	public void testNullInputHandling() {
		assertNull(ColorUtil.hex2Color(null));
	}

	@Test
	public void testShortHexCodeHandling() {
		String colorHex = "1234";
		assertThrows(StringIndexOutOfBoundsException.class, () -> {
			ColorUtil.hex2Color(colorHex);
		});
	}

}