// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=hex2Color_d9059f75c2
ROOST_METHOD_SIG_HASH=hex2Color_923328bd45

================================VULNERABILITIES================================
Vulnerability: Improper Input Validation (CWE-20)
Issue: The hex2Color function does not validate the input colorHex string. Consequently, if the colorHex string is not a proper hexadecimal color string or if its length is less than 6, it might cause IndexOutOfBoundsException.
Solution: It is recommended to add checks for null, length, and content of colorHex string. A proper regular expression can be used to validate the hexadecimal color format.

Vulnerability: Information Exposure (CWE-200)
Issue: The application might expose sensitive exception information when there is an exception (e.g., NumberFormatException when calling Integer.valueOf for a non-number string) which results in debugging information disclosure.
Solution: To avoid exposing sensitive information, handle exceptions properly and log the necessary debugging information instead of exposing it to the user.

Vulnerability: NullPointerException (CWE-476)
Issue: In case of an exception or invalid colorHex input, null will be returned which might lead to unexpected NullPointerException in the caller's code.
Solution: Define a default return value for abnormal cases and document it appropriately to let callers handle the returned value accordingly. Use java.util.Optional for better null safety.

================================================================================
Scenario 1: Valid color hex conversion
Details:
  TestName: convertValidColorHex.
  Description: This test checks if the method correctly converts a valid color hex into a Color object.
Execution:
  Arrange: Provide a valid color hex string such as "FFFFFF" for white.
  Act: Invoke the method hex2Color with the valid color hex.
  Assert: Assert that the Color object returned matches with the expected color object.
Validation:
  This validates the main functionality of the hex2Color to return a valid Color object for a given valid color hex value. This is significant for converting color hex values of UI components to their corresponding Color objects.

Scenario 2: Null color hex conversion
Details:
  TestName: convertNullColorHex.
  Description: This test checks how the method handles when provided null as color hex.
Execution:
  Arrange: Provide null as color hex.
  Act: Invoke the method hex2Color with null color hex.
  Assert: Assert that the returned value is null.
Validation:
  This test validates the null handling of the given method. Itâ€™s expected to return null, when it receives null input. This is essential in avoiding NullPointerExceptions in the system.

Scenario 3: Invalid color hex conversion
Details:
  TestName: convertInvalidColorHex.
  Description: This test checks how the method handles when an invalid color hex is provided.
Execution:
  Arrange: Provide an invalid color hex such as a string with less than 6 hexadecimal digits, or a string with characters other than hexadecimal digits.
  Act: Invoke the method hex2Color with the invalid color hex.
  Assert: Assert that an exception is thrown.
Validation:
  This validates the error handling of the method. The method should be able to detect invalid inputs and respond appropriately, in this case, by throwing an exception. This is critical for ensuring that the program can handle improper usage without crashing or producing incorrect outputs.

Scenario 4: Color hex conversion with lowercase hex values
Details:
  TestName: convertLowercaseColorHex.
  Description: This test checks if the method correctly converts a color hex with lowercase hexadecimal digits into a Color object.
Execution:
  Arrange: Provide a color hex with lowercase hexadecimal digits such as "ffffff" for white.
  Act: Invoke the method hex2Color with the color hex.
  Assert: Assert that the Color object returned matches with the expected color object.
Validation:
  This test confirms that the method can correctly handle color hexes with lowercase hexadecimal digits. This is important for ensuring flexibility of inputs and consistency of the method's functionality.
*/

// ********RoostGPT********
package com.houarizegai.calculator.util;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThrows;

import java.awt.Color;

import org.junit.Test;

public class ColorUtilHex2ColorTest {

	@Test
	public void convertValidColorHex() {
		Color expectedColor = new Color(255, 255, 255);
		Color actualColor = ColorUtil.hex2Color("FFFFFF");
		assertEquals(expectedColor, actualColor);
	}

	@Test
	public void convertNullColorHex() {
		assertNull(ColorUtil.hex2Color(null));
	}

	@Test
	public void convertInvalidColorHex() {
		assertThrows(Exception.class, () -> {
			ColorUtil.hex2Color("FFF");
		});
	}

	@Test
	public void convertLowercaseColorHex() {
		Color expectedColor = new Color(255, 255, 255);
		Color actualColor = ColorUtil.hex2Color("ffffff");
		assertEquals(expectedColor, actualColor);
	}

}
