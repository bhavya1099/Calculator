// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=hex2Color_b74d630591
ROOST_METHOD_SIG_HASH=hex2Color_e227804b01
"""
  Scenario 1: Valid Hexadecimal Color Code
  Details:
    TestName: testValidHexColorCode.
    Description: The test is designed to validate the hex2Color method when provided with a valid hexadecimal color code.
  Execution:
    Arrange: Provide a valid hex color code, for example "FFA500" which represents the color orange in hexadecimal format.
    Act: Invoke the hex2Color method with the valid hex color code as a parameter.
    Assert: Use JUnit assertions to compare the actual Color object returned by the method against the expected Color object.
  Validation:
    The assertion verifies that the method correctly converts a valid hexadecimal color code into a Color object. If the expected and actual Color objects match, it demonstrates that the method is functioning as expected.
  Scenario 2: Invalid Hexadecimal Color Code
  Details:
    TestName: testInvalidHexColorCode.
    Description: The test is designed to validate the hex2Color method when provided with an invalid hexadecimal color code.
  Execution:
    Arrange: Provide an invalid hex color code, for example "ZZA500".
    Act: Invoke the hex2Color method with the invalid hex color code as a parameter.
    Assert: Use JUnit assertions to compare the actual Color object returned by the method against null, which is the expected output when an invalid hex color code is provided.
  Validation:
    The assertion verifies that the method correctly handles an invalid hexadecimal color code by returning null. This demonstrates that the method has appropriate error handling.
  Scenario 3: Null Hexadecimal Color Code
  Details:
    TestName: testNullHexColorCode.
    Description: The test is designed to validate the hex2Color method when provided with a null value.
  Execution:
    Arrange: Provide a null value as a parameter.
    Act: Invoke the hex2Color method with the null value.
    Assert: Use JUnit assertions to compare the actual Color object returned by the method against null, which is the expected output when a null value is provided.
  Validation:
    The assertion verifies that the method correctly handles a null value by returning null. This demonstrates that the method has appropriate error handling.
"""
*/
// ********RoostGPT********
package com.houarizegai.calculator.util;

import java.awt.*;
import java.util.Optional;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ColorUtilHex2ColorTest {

	@Test
	public void testValidHexColorCode() {
		String validHexColorCode = "FFA500";
		Color expectedColor = new Color(255, 165, 0);
		Color actualColor = ColorUtil.hex2Color(validHexColorCode);
		assertEquals(expectedColor, actualColor);
	}

	@Test
	public void testInvalidHexColorCode() {
		String invalidHexColorCode = "ZZA500";
		Color actualColor = ColorUtil.hex2Color(invalidHexColorCode);
		assertNull(actualColor);
	}

	@Test    public void testNullHexColorCode() {        String nullHexColorCode = null;        Color actualColor = ColorUtil.hex2Color(nullHexColorCode);        assertNull(actualColor);
import org.junit.experimental.categories.Category;
import org.junit.Test;

@Category({Categories.hex2Color.class,Categories.roostTestTag1.class,Categories.roostTestTag2.class})    }

}