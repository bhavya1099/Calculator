// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Positive Test Scenario: 
    - Input: Pass a valid hexadecimal color code as a string.
    - Expected Output: The function should return the corresponding Color object without any error.
    
2. Negative Test Scenario: 
    - Input: Pass an invalid hexadecimal color code as a string.
    - Expected Output: The function should return null.

3. Negative Test Scenario: 
    - Input: Pass a hexadecimal color code with length less than 6.
    - Expected Output: The function should return null because the substring function will throw an exception.

4. Negative Test Scenario: 
    - Input: Pass a hexadecimal color code with length more than 6.
    - Expected Output: The function should return a Color object corresponding to the first 6 characters of the input string.

5. Negative Test Scenario: 
    - Input: Pass a null value.
    - Expected Output: The function should return null.

6. Positive Test Scenario:
    - Input: Pass a hexadecimal color code in uppercase.
    - Expected Output: The function should return the corresponding Color object because hexadecimal color codes are case-insensitive.

7. Negative Test Scenario:
    - Input: Pass a hexadecimal color code that includes characters outside the range of 0-9 and A-F.
    - Expected Output: The function should return null because such a string is not a valid hexadecimal color code.

8. Negative Test Scenario:
    - Input: Pass an empty string.
    - Expected Output: The function should return null.

9. Positive Test Scenario:
    - Input: Pass a hexadecimal color code that represents a color with full opacity.
    - Expected Output: The function should return a Color object representing a fully opaque color.

10. Positive Test Scenario:
    - Input: Pass a hexadecimal color code that represents a color with full transparency.
    - Expected Output: The function should return a Color object representing a fully transparent color.
*/

// ********RoostGPT********
package com.houarizegai.calculator.util;

import java.awt.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ColorUtil_hex2Color_e227804b01_Test {
    
    @Test
    public void testValidHexCode() {
        String colorHex = "FFFFFF";
        Color expected = new Color(255, 255, 255);
        Color actual = ColorUtil.hex2Color(colorHex);
        assertEquals(expected, actual);
    }
    
    @Test
    public void testInvalidHexCode() {
        String colorHex = "ZZZZZZ";
        Color actual = ColorUtil.hex2Color(colorHex);
        assertNull(actual);
    }

    @Test
    public void testShortHexCode() {
        String colorHex = "FF";
        Color actual = ColorUtil.hex2Color(colorHex);
        assertNull(actual);
    }

    @Test
    public void testLongHexCode() {
        String colorHex = "FFFFFF00";
        Color expected = new Color(255, 255, 255);
        Color actual = ColorUtil.hex2Color(colorHex);
        assertEquals(expected, actual);
    }

    @Test
    public void testNullHexCode() {
        String colorHex = null;
        Color actual = ColorUtil.hex2Color(colorHex);
        assertNull(actual);
    }

    @Test
    public void testUppercaseHexCode() {
        String colorHex = "FFFFFF";
        Color expected = new Color(255, 255, 255);
        Color actual = ColorUtil.hex2Color(colorHex);
        assertEquals(expected, actual);
    }

    @Test
    public void testHexCodeWithInvalidCharacters() {
        String colorHex = "FFGZZZ";
        Color actual = ColorUtil.hex2Color(colorHex);
        assertNull(actual);
    }

    @Test
    public void testEmptyHexCode() {
        String colorHex = "";
        Color actual = ColorUtil.hex2Color(colorHex);
        assertNull(actual);
    }

    @Test
    public void testOpacityHexCode() {
        String colorHex = "000000";
        Color expected = new Color(0, 0, 0);
        Color actual = ColorUtil.hex2Color(colorHex);
        assertEquals(expected, actual);
    }

    @Test
    public void testTransparencyHexCode() {
        String colorHex = "FFFFFF";
        Color expected = new Color(255, 255, 255);
        Color actual = ColorUtil.hex2Color(colorHex);
        assertEquals(expected, actual);
    }
}
