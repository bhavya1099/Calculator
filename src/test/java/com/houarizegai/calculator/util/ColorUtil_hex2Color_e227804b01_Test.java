// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Positive Test Scenario: 
    - Input a valid hexadecimal color code. The function should return the corresponding Color object. 

2. Negative Test Scenario: 
    - Input a null value. The function should return null.

3. Negative Test Scenario: 
    - Input an empty string. The function should throw a StringIndexOutOfBoundsException.

4. Negative Test Scenario: 
    - Input a string that doesn't represent a valid hexadecimal color code. The function should throw a NumberFormatException.

5. Negative Test Scenario: 
    - Input a string that represents a valid hexadecimal color code, but is too short. The function should throw a StringIndexOutOfBoundsException.

6. Negative Test Scenario: 
    - Input a string that represents a valid hexadecimal color code, but is too long. The function should return a Color object, but might not be the expected color due to ignoring any characters after the first six.

7. Positive Test Scenario: 
    - Input a string that represents a valid hexadecimal color code with uppercase letters. The function should return the corresponding Color object.

8. Positive Test Scenario: 
    - Input a string that represents a valid hexadecimal color code with lowercase letters. The function should return the corresponding Color object.

9. Positive Test Scenario: 
    - Input a string that represents a valid hexadecimal color code with a mix of lowercase and uppercase letters. The function should return the corresponding Color object.

10. Negative Test Scenario: 
    - Input a string that contains non-hexadecimal characters. The function should throw a NumberFormatException.
*/

// ********RoostGPT********
package com.houarizegai.calculator.util;

import java.awt.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ColorUtil_hex2Color_e227804b01_Test {

    @Test
    public void testHex2ColorWithValidHex() {
        Color expectedColor = new Color(255, 255, 255);
        assertEquals(expectedColor, ColorUtil.hex2Color("FFFFFF"));
    }

    @Test
    public void testHex2ColorWithNullInput() {
        assertNull(ColorUtil.hex2Color(null));
    }

    @Test
    public void testHex2ColorWithEmptyString() {
        assertThrows(StringIndexOutOfBoundsException.class, () -> ColorUtil.hex2Color(""));
    }

    @Test
    public void testHex2ColorWithInvalidHex() {
        assertThrows(NumberFormatException.class, () -> ColorUtil.hex2Color("ZZZZZZ"));
    }

    @Test
    public void testHex2ColorWithShortHex() {
        assertThrows(StringIndexOutOfBoundsException.class, () -> ColorUtil.hex2Color("FFF"));
    }

    @Test
    public void testHex2ColorWithLongHex() {
        Color expectedColor = new Color(255, 255, 255);
        assertEquals(expectedColor, ColorUtil.hex2Color("FFFFFFFF"));
    }

    @Test
    public void testHex2ColorWithUppercaseHex() {
        Color expectedColor = new Color(0, 0, 0);
        assertEquals(expectedColor, ColorUtil.hex2Color("000000"));
    }

    @Test
    public void testHex2ColorWithLowercaseHex() {
        Color expectedColor = new Color(0, 0, 0);
        assertEquals(expectedColor, ColorUtil.hex2Color("000000"));
    }

    @Test
    public void testHex2ColorWithMixedCaseHex() {
        Color expectedColor = new Color(170, 170, 170);
        assertEquals(expectedColor, ColorUtil.hex2Color("AaAaAa"));
    }

    @Test
    public void testHex2ColorWithNonHexChars() {
        assertThrows(NumberFormatException.class, () -> ColorUtil.hex2Color("GHIJKL"));
    }

}
