/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Positive Test Scenario: 
    - Input a valid hexadecimal color code (for example: "FFA500") and check if the function returns the correct Color object (in this case, the color orange).
  
2. Negative Test Scenario: 
    - Input a hexadecimal code that is not 6 characters long (for example: "FFA5") and check if the function returns null.
  
3. Negative Test Scenario: 
    - Input a hexadecimal code that contains non-hexadecimal characters (for example: "ZZA500") and check if the function returns null or throws an exception.
  
4. Positive Test Scenario: 
    - Input a valid hexadecimal color code with lowercase letters (for example: "ffa500") and check if the function returns the correct Color object (in this case, the color orange).
  
5. Negative Test Scenario: 
    - Input a null value and check if the function returns null.
  
6. Positive Test Scenario: 
    - Input a valid hexadecimal color code for black ("000000") and check if the function returns the correct Color object (in this case, the color black).
  
7. Positive Test Scenario: 
    - Input a valid hexadecimal color code for white ("FFFFFF") and check if the function returns the correct Color object (in this case, the color white).
  
8. Negative Test Scenario: 
    - Input an empty string and check if the function returns null.
  
9. Negative Test Scenario: 
    - Input a string with whitespace characters (for example: " FFA500") and check if the function returns null or throws an exception.
  
10. Positive Test Scenario: 
    - Input a valid hexadecimal color code with no leading "#" (for example: "FFA500") and check if the function returns the correct Color object (in this case, the color orange).
*/
package com.houarizegai.calculator.util;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ColorUtil_hex2Color_e227804b01_Test {

    @Test
    public void testValidHexColorCode() {
        String hexCode = "FFA500";
        Color expectedColor = new Color(255, 165, 0);
        assertEquals(expectedColor, ColorUtil.hex2Color(hexCode));
    }

    @Test
    public void testInvalidLengthHexColorCode() {
        String hexCode = "FFA5";
        assertNull(ColorUtil.hex2Color(hexCode));
    }

    @Test
    public void testNonHexadecimalColorCode() {
        String hexCode = "ZZA500";
        assertThrows(NumberFormatException.class, () -> ColorUtil.hex2Color(hexCode));
    }

    @Test
    public void testValidLowercaseHexColorCode() {
        String hexCode = "ffa500";
        Color expectedColor = new Color(255, 165, 0);
        assertEquals(expectedColor, ColorUtil.hex2Color(hexCode));
    }

    @Test
    public void testNullHexColorCode() {
        assertNull(ColorUtil.hex2Color(null));
    }

    @Test
    public void testBlackHexColorCode() {
        String hexCode = "000000";
        Color expectedColor = new Color(0, 0, 0);
        assertEquals(expectedColor, ColorUtil.hex2Color(hexCode));
    }

    @Test
    public void testWhiteHexColorCode() {
        String hexCode = "FFFFFF";
        Color expectedColor = new Color(255, 255, 255);
        assertEquals(expectedColor, ColorUtil.hex2Color(hexCode));
    }

    @Test
    public void testEmptyHexColorCode() {
        String hexCode = "";
        assertNull(ColorUtil.hex2Color(hexCode));
    }

    @Test
    public void testWhitespaceHexColorCode() {
        String hexCode = " FFA500";
        assertThrows(NumberFormatException.class, () -> ColorUtil.hex2Color(hexCode));
    }

    @Test
    public void testValidHexColorCodeWithoutHash() {
        String hexCode = "FFA500";
        Color expectedColor = new Color(255, 165, 0);
        assertEquals(expectedColor, ColorUtil.hex2Color(hexCode));
    }
}
