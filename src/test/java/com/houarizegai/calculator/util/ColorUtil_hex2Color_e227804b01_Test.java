// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Test when the `colorHex` string is null.
    - **Expected Result:** The function should return null.

2. **Scenario:** Test when the `colorHex` string is empty.
    - **Expected Result:** The function should throw a `StringIndexOutOfBoundsException`.

3. **Scenario:** Test when the `colorHex` string is less than 6 characters long.
    - **Expected Result:** The function should throw a `StringIndexOutOfBoundsException`.

4. **Scenario:** Test when the `colorHex` string is 6 characters long and contains valid hexadecimal values.
    - **Expected Result:** The function should return a `Color` object with the correct RGB values.

5. **Scenario:** Test when the `colorHex` string is more than 6 characters long.
    - **Expected Result:** The function should only consider the first 6 characters and return a `Color` object with the corresponding RGB values.

6. **Scenario:** Test when the `colorHex` string contains non-hexadecimal characters.
    - **Expected Result:** The function should throw a `NumberFormatException`.

7. **Scenario:** Test when the `colorHex` string contains uppercase hexadecimal characters.
    - **Expected Result:** The function should not be case-sensitive and return a `Color` object with the correct RGB values.

8. **Scenario:** Test when the `colorHex` string is "FFFFFF" (white in hexadecimal color code).
    - **Expected Result:** The function should return a `Color` object representing white.

9. **Scenario:** Test when the `colorHex` string is "000000" (black in hexadecimal color code).
    - **Expected Result:** The function should return a `Color` object representing black. 

10. **Scenario:** Test when the `colorHex` string is "FF0000" (red in hexadecimal color code).
    - **Expected Result:** The function should return a `Color` object representing red. 

11. **Scenario:** Test when the `colorHex` string is "00FF00" (green in hexadecimal color code).
    - **Expected Result:** The function should return a `Color` object representing green. 

12. **Scenario:** Test when the `colorHex` string is "0000FF" (blue in hexadecimal color code).
    - **Expected Result:** The function should return a `Color` object representing blue.
*/

// ********RoostGPT********
package com.houarizegai.calculator.util;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ColorUtil_hex2Color_e227804b01_Test {

    @Test
    public void testHex2ColorWithNull() {
        assertNull(ColorUtil.hex2Color(null));
    }

    @Test
    public void testHex2ColorWithEmptyString() {
        assertThrows(StringIndexOutOfBoundsException.class, () -> ColorUtil.hex2Color(""));
    }

    @Test
    public void testHex2ColorWithShortString() {
        assertThrows(StringIndexOutOfBoundsException.class, () -> ColorUtil.hex2Color("123"));
    }

    @Test
    public void testHex2ColorWithValidHex() {
        assertEquals(new Color(255, 0, 0), ColorUtil.hex2Color("FF0000"));
    }

    @Test
    public void testHex2ColorWithLongString() {
        assertEquals(new Color(255, 0, 0), ColorUtil.hex2Color("FF0000FF00"));
    }

    @Test
    public void testHex2ColorWithNonHex() {
        assertThrows(NumberFormatException.class, () -> ColorUtil.hex2Color("ZZZZZZ"));
    }

    @Test
    public void testHex2ColorWithUppercaseHex() {
        assertEquals(new Color(255, 0, 0), ColorUtil.hex2Color("FF0000"));
    }

    @Test
    public void testHex2ColorWithWhite() {
        assertEquals(new Color(255, 255, 255), ColorUtil.hex2Color("FFFFFF"));
    }

    @Test
    public void testHex2ColorWithBlack() {
        assertEquals(new Color(0, 0, 0), ColorUtil.hex2Color("000000"));
    }

    @Test
    public void testHex2ColorWithRed() {
        assertEquals(new Color(255, 0, 0), ColorUtil.hex2Color("FF0000"));
    }

    @Test
    public void testHex2ColorWithGreen() {
        assertEquals(new Color(0, 255, 0), ColorUtil.hex2Color("00FF00"));
    }

    @Test
    public void testHex2ColorWithBlue() {
        assertEquals(new Color(0, 0, 255), ColorUtil.hex2Color("0000FF"));
    }
}
