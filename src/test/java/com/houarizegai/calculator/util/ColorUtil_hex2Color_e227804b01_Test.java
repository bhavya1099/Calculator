// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Positive Test Scenario: 
    - Input a valid hexadecimal color code (for example: "FFA500") and check if the function returns the correct Color object (in this case, the color orange).
  
2. Negative Test Scenario: 
    - Input a hexadecimal code that is not a valid color code (for example: "ZZZZZZ") and check if the function returns null.

3. Negative Test Scenario: 
    - Input a hexadecimal code that is less than 6 characters long (for example: "FFA5") and check if the function returns null.

4. Negative Test Scenario: 
    - Input a hexadecimal code that is more than 6 characters long (for example: "FFA500FF") and check if the function returns the Color object of the first 6 characters (in this case, the color orange).

5. Negative Test Scenario: 
    - Input a null value and check if the function returns null.

6. Positive Test Scenario: 
    - Input a valid hexadecimal color code in lowercase (for example: "ffa500") and check if the function returns the correct Color object (in this case, the color orange).

7. Negative Test Scenario: 
    - Input a hexadecimal code with valid and invalid characters (for example: "FFA50Z") and check if the function returns null.

8. Positive Test Scenario: 
    - Input a valid hexadecimal color code representing black (for example: "000000") and check if the function returns the correct Color object (in this case, the color black).

9. Positive Test Scenario: 
    - Input a valid hexadecimal color code representing white (for example: "FFFFFF") and check if the function returns the correct Color object (in this case, the color white).

10. Negative Test Scenario: 
    - Input a hexadecimal code with spaces (for example: "FF A5 00") and check if the function returns null.
*/

// ********RoostGPT********
package com.houarizegai.calculator.util;

import java.awt.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ColorUtil_hex2Color_e227804b01_Test {

    @Test
    public void testHex2ColorPositive() {
        assertEquals(new Color(255,165,0), ColorUtil.hex2Color("FFA500"));
        assertEquals(new Color(255,255,255), ColorUtil.hex2Color("FFFFFF"));
        assertEquals(new Color(0,0,0), ColorUtil.hex2Color("000000"));
        assertEquals(new Color(255,165,0), ColorUtil.hex2Color("ffa500"));
    }

    @Test
    public void testHex2ColorNegative() {
        assertNull(ColorUtil.hex2Color("ZZZZZZ"));
        assertNull(ColorUtil.hex2Color("FFA5"));
        assertEquals(new Color(255,165,0), ColorUtil.hex2Color("FFA500FF"));
        assertNull(ColorUtil.hex2Color(null));
        assertNull(ColorUtil.hex2Color("FFA50Z"));
        assertNull(ColorUtil.hex2Color("FF A5 00"));
    }
}
