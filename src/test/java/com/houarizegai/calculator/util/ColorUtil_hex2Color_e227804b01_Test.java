// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Here are some test scenarios for the function hex2Color:

1. Verify if the function can handle null input: Pass a null value to the function and check if it returns null as expected.

2. Verify if the function can handle empty string: Pass an empty string to the function and check if it throws an appropriate exception.

3. Verify if the function can handle invalid hexadecimal string: Pass a string that does not represent a valid hexadecimal color (e.g., "ZZZZZZ") and check if it throws an appropriate exception.

4. Verify if the function can handle short hexadecimal string: Pass a string that is too short to represent a hexadecimal color (e.g., "1234") and check if it throws an appropriate exception.

5. Verify if the function can handle long hexadecimal string: Pass a string that is too long to represent a hexadecimal color (e.g., "12345678") and check if it throws an appropriate exception.

6. Verify if the function can handle valid hexadecimal string: Pass a valid hexadecimal color string (e.g., "FF0000" for red) and check if it returns the correct Color object.

7. Verify if the function can handle case sensitivity: Pass a valid hexadecimal color string in lower case (e.g., "ff0000" for red) and check if it returns the correct Color object.

8. Verify if the function can handle non-hexadecimal characters: Pass a string with non-hexadecimal characters (e.g., "GH1234") and check if it throws an appropriate exception.

9. Verify if the function can handle hexadecimal string with leading or trailing spaces: Pass a valid hexadecimal color string with leading or trailing spaces (e.g., " FF0000 " for red) and check if it returns the correct Color object or throws an appropriate exception. 

10. Verify if the function can handle color strings with alpha: Pass a valid hexadecimal color string with alpha (e.g., "FF0000FF" for opaque red) and check if it returns the correct Color object or throws an appropriate exception.
*/

// ********RoostGPT********
package com.houarizegai.calculator.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.awt.*;

public class ColorUtil_hex2Color_e227804b01_Test {

    @Test
    public void testHex2ColorWithNullInput() {
        assertNull(ColorUtil.hex2Color(null));
    }

    @Test
    public void testHex2ColorWithEmptyString() {
        assertThrows(StringIndexOutOfBoundsException.class, () -> ColorUtil.hex2Color(""));
    }

    @Test
    public void testHex2ColorWithInvalidHexadecimal() {
        assertThrows(NumberFormatException.class, () -> ColorUtil.hex2Color("ZZZZZZ"));
    }

    @Test
    public void testHex2ColorWithShortHexadecimal() {
        assertThrows(StringIndexOutOfBoundsException.class, () -> ColorUtil.hex2Color("1234"));
    }

    @Test
    public void testHex2ColorWithLongHexadecimal() {
        assertThrows(StringIndexOutOfBoundsException.class, () -> ColorUtil.hex2Color("12345678"));
    }

    @Test
    public void testHex2ColorWithValidHexadecimal() {
        assertEquals(new Color(255, 0, 0), ColorUtil.hex2Color("FF0000"));
    }

    @Test
    public void testHex2ColorCaseSensitivity() {
        assertEquals(new Color(255, 0, 0), ColorUtil.hex2Color("ff0000"));
    }

    @Test
    public void testHex2ColorWithNonHexadecimalCharacters() {
        assertThrows(NumberFormatException.class, () -> ColorUtil.hex2Color("GH1234"));
    }

    @Test
    public void testHex2ColorWithLeadingOrTrailingSpaces() {
        assertEquals(new Color(255, 0, 0), ColorUtil.hex2Color(" FF0000 "));
    }

    @Test
    public void testHex2ColorWithAlpha() {
        assertEquals(new Color(255, 0, 0, 255), ColorUtil.hex2Color("FF0000FF"));
    }
}
