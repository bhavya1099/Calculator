// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Test when the `colorHex` string is null.
    - **Expected Result:** The function should return null.

2. **Scenario:** Test when the `colorHex` string is empty.
    - **Expected Result:** The function should throw a `StringIndexOutOfBoundsException`.

3. **Scenario:** Test when the `colorHex` string is less than 6 characters long.
    - **Expected Result:** The function should throw a `StringIndexOutOfBoundsException`.

4. **Scenario:** Test when the `colorHex` string is 6 characters long and contains valid hexadecimal values.
    - **Input:** `colorHex = "FFFFFF"`
    - **Expected Result:** The function should return a `Color` object with RGB values (255, 255, 255).

5. **Scenario:** Test when the `colorHex` string is more than 6 characters long.
    - **Input:** `colorHex = "FFFFFFF"`
    - **Expected Result:** The function should return a `Color` object with RGB values corresponding to the first 6 characters.

6. **Scenario:** Test when the `colorHex` string is 6 characters long and contains invalid hexadecimal values.
    - **Input:** `colorHex = "ZZZZZZ"`
    - **Expected Result:** The function should throw a `NumberFormatException`.

7. **Scenario:** Test when the `colorHex` string is 6 characters long and contains uppercase and lowercase hexadecimal values.
    - **Input:** `colorHex = "aBcDeF"`
    - **Expected Result:** The function should return a `Color` object with RGB values corresponding to the hexadecimal values.

8. **Scenario:** Test when the `colorHex` string is 6 characters long and contains only lowercase hexadecimal values.
    - **Input:** `colorHex = "abcdef"`
    - **Expected Result:** The function should return a `Color` object with RGB values corresponding to the hexadecimal values.

9. **Scenario:** Test when the `colorHex` string is 6 characters long and contains only uppercase hexadecimal values.
    - **Input:** `colorHex = "ABCDEF"`
    - **Expected Result:** The function should return a `Color` object with RGB values corresponding to the hexadecimal values.
*/

// ********RoostGPT********
package com.houarizegai.calculator.util;

import java.awt.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ColorUtil_hex2Color_e227804b01_Test {

    @Test
    public void testHex2Color_NullColor() {
        String colorHex = null;
        assertNull(ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHex2Color_EmptyColor() {
        String colorHex = "";
        assertThrows(StringIndexOutOfBoundsException.class, () -> ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHex2Color_ShortColor() {
        String colorHex = "123";
        assertThrows(StringIndexOutOfBoundsException.class, () -> ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHex2Color_ValidColor() {
        String colorHex = "FFFFFF";
        assertEquals(new Color(255, 255, 255), ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHex2Color_LongColor() {
        String colorHex = "FFFFFFF";
        assertEquals(new Color(255, 255, 255), ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHex2Color_InvalidColor() {
        String colorHex = "ZZZZZZ";
        assertThrows(NumberFormatException.class, () -> ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHex2Color_UpperLowerColor() {
        String colorHex = "aBcDeF";
        assertEquals(new Color(171, 205, 239), ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHex2Color_LowerColor() {
        String colorHex = "abcdef";
        assertEquals(new Color(171, 205, 239), ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHex2Color_UpperColor() {
        String colorHex = "ABCDEF";
        assertEquals(new Color(171, 205, 239), ColorUtil.hex2Color(colorHex));
    }
}
