// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Test when the `colorHex` string is null.
    - **Expected Result:** The function should return null.

2. **Scenario:** Test when the `colorHex` string is empty.
    - **Expected Result:** The function should throw a `StringIndexOutOfBoundsException`.

3. **Scenario:** Test when the `colorHex` string is less than 6 characters long.
    - **Expected Result:** The function should throw a `StringIndexOutOfBoundsException`.

4. **Scenario:** Test when the `colorHex` string is more than 6 characters long.
    - **Expected Result:** The function should only consider the first 6 characters to calculate the color.

5. **Scenario:** Test when the `colorHex` string is exactly 6 characters long.
    - **Expected Result:** The function should successfully calculate the color.

6. **Scenario:** Test when the `colorHex` string contains non-hexadecimal characters.
    - **Expected Result:** The function should throw a `NumberFormatException`.

7. **Scenario:** Test when the `colorHex` string contains uppercase hexadecimal characters.
    - **Expected Result:** The function should successfully calculate the color.

8. **Scenario:** Test when the `colorHex` string contains lowercase hexadecimal characters.
    - **Expected Result:** The function should successfully calculate the color.

9. **Scenario:** Test when the `colorHex` string is a valid hexadecimal color code (for example, "FFFFFF" for white).
    - **Expected Result:** The function should successfully return the corresponding color.

10. **Scenario:** Test when the `colorHex` string is a valid hexadecimal color code (for example, "000000" for black).
    - **Expected Result:** The function should successfully return the corresponding color.
*/

// ********RoostGPT********
package com.houarizegai.calculator.util;

import org.junit.jupiter.api.Test;

import java.awt.*;

import static org.junit.jupiter.api.Assertions.*;

public class ColorUtil_hex2Color_e227804b01_Test {

    @Test
    public void testHex2Color_NullColorHex() {
        assertNull(ColorUtil.hex2Color(null));
    }

    @Test
    public void testHex2Color_EmptyColorHex() {
        assertThrows(StringIndexOutOfBoundsException.class, () -> 
            ColorUtil.hex2Color("")
        );
    }

    @Test
    public void testHex2Color_ShortColorHex() {
        assertThrows(StringIndexOutOfBoundsException.class, () -> 
            ColorUtil.hex2Color("12345")
        );
    }

    @Test
    public void testHex2Color_LongColorHex() {
        assertEquals(new Color(255, 255, 255), ColorUtil.hex2Color("FFFFFF00"));
    }

    @Test
    public void testHex2Color_ExactColorHex() {
        assertEquals(new Color(255, 255, 255), ColorUtil.hex2Color("FFFFFF"));
    }

    @Test
    public void testHex2Color_NonHexColorHex() {
        assertThrows(NumberFormatException.class, () -> 
            ColorUtil.hex2Color("ZZZZZZ")
        );
    }

    @Test
    public void testHex2Color_UppercaseColorHex() {
        assertEquals(new Color(255, 255, 255), ColorUtil.hex2Color("FFFFFF"));
    }

    @Test
    public void testHex2Color_LowercaseColorHex() {
        assertEquals(new Color(255, 255, 255), ColorUtil.hex2Color("ffffff"));
    }

    @Test
    public void testHex2Color_ValidHexColorCodeWhite() {
        assertEquals(new Color(255, 255, 255), ColorUtil.hex2Color("FFFFFF"));
    }

    @Test
    public void testHex2Color_ValidHexColorCodeBlack() {
        assertEquals(new Color(0, 0, 0), ColorUtil.hex2Color("000000"));
    }
}
