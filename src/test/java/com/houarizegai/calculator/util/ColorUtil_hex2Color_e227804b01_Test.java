// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Positive Test Scenario: 
    - Test Case Description: Verify that the function converts a valid hex color code to a Color object correctly.
    - Test Steps: Pass a valid hex color string such as "FF0000" to the function.
    - Expected Result: The function should return a Color object with RGB values (255, 0, 0).

2. Negative Test Scenario: 
    - Test Case Description: Verify that the function handles an invalid hex color code correctly.
    - Test Steps: Pass an invalid hex color string such as "ZZZZZZ" to the function.
    - Expected Result: The function should throw a NumberFormatException.

3. Negative Test Scenario: 
    - Test Case Description: Verify that the function handles a null hex color code correctly.
    - Test Steps: Pass a null value to the function.
    - Expected Result: The function should return null.

4. Negative Test Scenario: 
    - Test Case Description: Verify that the function handles a hex color code with less than 6 characters correctly.
    - Test Steps: Pass a hex color string with less than 6 characters such as "FF00" to the function.
    - Expected Result: The function should throw a StringIndexOutOfBoundsException.

5. Positive Test Scenario: 
    - Test Case Description: Verify that the function converts a valid hex color code with lower case letters to a Color object correctly.
    - Test Steps: Pass a valid hex color string with lower case letters such as "ff0000" to the function.
    - Expected Result: The function should return a Color object with RGB values (255, 0, 0).

6. Boundary Test Scenario: 
    - Test Case Description: Verify that the function converts the lowest valid hex color code to a Color object correctly.
    - Test Steps: Pass the lowest valid hex color code "000000" to the function.
    - Expected Result: The function should return a Color object with RGB values (0, 0, 0).

7. Boundary Test Scenario: 
    - Test Case Description: Verify that the function converts the highest valid hex color code to a Color object correctly.
    - Test Steps: Pass the highest valid hex color code "FFFFFF" to the function.
    - Expected Result: The function should return a Color object with RGB values (255, 255, 255).
*/

// ********RoostGPT********
package com.houarizegai.calculator.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.awt.*;

public class ColorUtil_hex2Color_e227804b01_Test {

    @Test
    public void testHex2Color_ValidHexCode() {
        String colorHex = "FF0000";
        Color expectedColor = new Color(255, 0, 0);
        assertEquals(expectedColor, ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHex2Color_InvalidHexCode() {
        String colorHex = "ZZZZZZ";
        assertThrows(NumberFormatException.class, () -> ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHex2Color_NullHexCode() {
        String colorHex = null;
        assertNull(ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHex2Color_LessThanSixCharactersHexCode() {
        String colorHex = "FF00";
        assertThrows(StringIndexOutOfBoundsException.class, () -> ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHex2Color_ValidHexCodeWithLowerCase() {
        String colorHex = "ff0000";
        Color expectedColor = new Color(255, 0, 0);
        assertEquals(expectedColor, ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHex2Color_LowestValidHexCode() {
        String colorHex = "000000";
        Color expectedColor = new Color(0, 0, 0);
        assertEquals(expectedColor, ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHex2Color_HighestValidHexCode() {
        String colorHex = "FFFFFF";
        Color expectedColor = new Color(255, 255, 255);
        assertEquals(expectedColor, ColorUtil.hex2Color(colorHex));
    }
}
