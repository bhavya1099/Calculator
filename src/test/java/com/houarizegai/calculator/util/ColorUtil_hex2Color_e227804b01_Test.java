// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Valid Hexadecimal Color Input
   - Description: Test the function with a valid hexadecimal color input.
   - Input: "FF0000" (Red)
   - Expected Output: A Color object representing Red.

2. Test Scenario: Invalid Hexadecimal Color Input
   - Description: Test the function with an invalid hexadecimal color input.
   - Input: "ZZZZZZ"
   - Expected Output: Null

3. Test Scenario: Hexadecimal Color Input with Less than 6 Characters
   - Description: Test the function with a valid hexadecimal color input but less than 6 characters.
   - Input: "FF00"
   - Expected Output: Null

4. Test Scenario: Hexadecimal Color Input with More than 6 Characters
   - Description: Test the function with a valid hexadecimal color input but more than 6 characters.
   - Input: "FF0000FF"
   - Expected Output: Null

5. Test Scenario: Hexadecimal Color Input with Case Insensitivity
   - Description: Test the function with a valid hexadecimal color input in lower case.
   - Input: "ff0000"
   - Expected Output: A Color object representing Red.

6. Test Scenario: Null Hexadecimal Color Input
   - Description: Test the function with a null hexadecimal color input.
   - Input: null
   - Expected Output: Null

7. Test Scenario: Empty String Hexadecimal Color Input
   - Description: Test the function with an empty string as input.
   - Input: ""
   - Expected Output: Null

8. Test Scenario: Hexadecimal Color Input with Non-Hexadecimal Characters
   - Description: Test the function with a string containing non-hexadecimal characters.
   - Input: "FF00G0"
   - Expected Output: Null

9. Test Scenario: Hexadecimal Color Input for Black Color
   - Description: Test the function with a hexadecimal color input for black.
   - Input: "000000"
   - Expected Output: A Color object representing Black.

10. Test Scenario: Hexadecimal Color Input for White Color
    - Description: Test the function with a hexadecimal color input for white.
    - Input: "FFFFFF"
    - Expected Output: A Color object representing White.
*/

// ********RoostGPT********
package com.houarizegai.calculator.util;

import org.junit.jupiter.api.Test;
import java.awt.Color;
import static org.junit.jupiter.api.Assertions.*;

public class ColorUtil_hex2Color_e227804b01_Test {

    @Test
    public void testValidHexadecimalColorInput() {
        String colorHex = "FF0000";
        Color expectedOutput = new Color(255, 0, 0);
        assertEquals(expectedOutput, ColorUtil.hex2Color(colorHex));
    }
    
    @Test
    public void testInvalidHexadecimalColorInput() {
        String colorHex = "ZZZZZZ";
        assertNull(ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHexadecimalColorInputWithLessThanSixCharacters() {
        String colorHex = "FF00";
        assertNull(ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHexadecimalColorInputWithMoreThanSixCharacters() {
        String colorHex = "FF0000FF";
        assertNull(ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHexadecimalColorInputWithCaseInsensitivity() {
        String colorHex = "ff0000";
        Color expectedOutput = new Color(255, 0, 0);
        assertEquals(expectedOutput, ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testNullHexadecimalColorInput() {
        String colorHex = null;
        assertNull(ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testEmptyStringHexadecimalColorInput() {
        String colorHex = "";
        assertNull(ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHexadecimalColorInputWithNonHexadecimalCharacters() {
        String colorHex = "FF00G0";
        assertNull(ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHexadecimalColorInputForBlackColor() {
        String colorHex = "000000";
        Color expectedOutput = new Color(0, 0, 0);
        assertEquals(expectedOutput, ColorUtil.hex2Color(colorHex));
    }

    @Test
    public void testHexadecimalColorInputForWhiteColor() {
        String colorHex = "FFFFFF";
        Color expectedOutput = new Color(255, 255, 255);
        assertEquals(expectedOutput, ColorUtil.hex2Color(colorHex));
    }
}
