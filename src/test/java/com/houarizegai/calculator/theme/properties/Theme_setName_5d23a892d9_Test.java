// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Check if the function accepts a valid string as a name.
   Test Steps: 
   - Instantiate the class that contains the setName method.
   - Call the setName method with a valid string as input.
   Expected Result: The name should be successfully set and no exception should be thrown.

2. Test Scenario: Check if the function accepts an empty string as a name.
   Test Steps: 
   - Instantiate the class that contains the setName method.
   - Call the setName method with an empty string as input.
   Expected Result: The name should be successfully set as an empty string and no exception should be thrown.

3. Test Scenario: Check if the function accepts a string with special characters as a name.
   Test Steps: 
   - Instantiate the class that contains the setName method.
   - Call the setName method with a string containing special characters as input.
   Expected Result: The name should be successfully set with the special characters and no exception should be thrown.

4. Test Scenario: Check if the function accepts a string with numeric characters as a name.
   Test Steps: 
   - Instantiate the class that contains the setName method.
   - Call the setName method with a string containing numeric characters as input.
   Expected Result: The name should be successfully set with the numeric characters and no exception should be thrown.

5. Test Scenario: Check if the function accepts null as a name.
   Test Steps: 
   - Instantiate the class that contains the setName method.
   - Call the setName method with null as input.
   Expected Result: Depending on the implementation, it might either throw a NullPointerException or set the name as null.

6. Test Scenario: Check if the function can overwrite an existing name.
   Test Steps: 
   - Instantiate the class that contains the setName method.
   - Call the setName method with a valid string as input.
   - Call the setName method again with a different valid string as input.
   Expected Result: The name should be successfully overwritten with the new string and no exception should be thrown.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Theme_setName_5d23a892d9_Test {

    @Test
    public void testSetNameWithValidString() {
        Theme theme = new Theme();
        theme.setName("Light");
        assertEquals("Light", theme.getName());
    }

    @Test
    public void testSetNameWithEmptyString() {
        Theme theme = new Theme();
        theme.setName("");
        assertEquals("", theme.getName());
    }

    @Test
    public void testSetNameWithSpecialCharacters() {
        Theme theme = new Theme();
        theme.setName("@#Theme$%");
        assertEquals("@#Theme$%", theme.getName());
    }

    @Test
    public void testSetNameWithNumericCharacters() {
        Theme theme = new Theme();
        theme.setName("Theme123");
        assertEquals("Theme123", theme.getName());
    }

    @Test
    public void testSetNameWithNull() {
        Theme theme = new Theme();
        theme.setName(null);
        assertNull(theme.getName());
    }

    @Test
    public void testSetNameOverwriteExistingName() {
        Theme theme = new Theme();
        theme.setName("Dark");
        theme.setName("Light");
        assertEquals("Light", theme.getName());
    }
}
