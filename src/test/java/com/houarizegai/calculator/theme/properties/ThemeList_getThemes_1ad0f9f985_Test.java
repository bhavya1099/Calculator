/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function returns a list of themes.
   Test: Call the getThemes() function and verify that it returns a list.

2. Scenario: Check if the function returns an empty list when there are no themes.
   Test: Make sure there are no themes, call the getThemes() function and verify that it returns an empty list.

3. Scenario: Check if the function returns all the existing themes.
   Test: Add a known number of themes, call the getThemes() function and verify that it returns a list with the same number of themes.

4. Scenario: Check if the function returns the correct themes.
   Test: Add some specific themes, call the getThemes() function and verify that the returned list contains the same themes.

5. Scenario: Check if the function maintains the order of the themes.
   Test: Add themes in a specific order, call the getThemes() function and verify that the returned list maintains the same order of themes.

6. Scenario: Check if the function works correctly when called multiple times.
   Test: Call the getThemes() function multiple times and verify that it returns the correct result each time.

7. Scenario: Check if the function handles null themes.
   Test: Add a null theme, call the getThemes() function and verify how it handles the null theme.

8. Scenario: Check if the function returns a mutable list.
   Test: Call the getThemes() function, try to modify the returned list and verify whether it is mutable or not.

9. Scenario: Check if the function maintains the integrity of the original theme list.
   Test: Add some themes, call the getThemes() function, modify the returned list and verify that the original theme list is not affected.

10. Scenario: Check if the function works correctly with a large number of themes.
    Test: Add a large number of themes, call the getThemes() function and verify that it returns the correct result.
*/
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import java.util.List;
import java.util.ArrayList;

public class ThemeList_getThemes_1ad0f9f985_Test {

    private ThemeList themeList;
    private Theme theme1;
    private Theme theme2;

    @BeforeEach
    public void setUp() {
        themeList = new ThemeList();
        theme1 = new Theme();
        theme2 = new Theme();
        theme1.setName("Theme 1");
        theme2.setName("Theme 2");
    }

    @Test
    public void testGetThemes() {
        themeList.setThemes(List.of(theme1, theme2));
        List<Theme> themes = themeList.getThemes();
        Assertions.assertEquals(2, themes.size());
        Assertions.assertEquals(theme1, themes.get(0));
        Assertions.assertEquals(theme2, themes.get(1));
    }

    @Test
    public void testGetThemesEmpty() {
        List<Theme> themes = themeList.getThemes();
        Assertions.assertEquals(0, themes.size());
    }

    @Test
    public void testGetThemesNull() {
        themeList.setThemes(null);
        List<Theme> themes = themeList.getThemes();
        Assertions.assertNull(themes);
    }

    @Test
    public void testGetThemesModifyReturned() {
        themeList.setThemes(new ArrayList<>(List.of(theme1, theme2)));
        List<Theme> themes = themeList.getThemes();
        themes.remove(0);
        Assertions.assertEquals(2, themeList.getThemes().size());
    }
}
