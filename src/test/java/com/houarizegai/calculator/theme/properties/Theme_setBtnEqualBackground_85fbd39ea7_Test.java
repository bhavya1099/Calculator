// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Test when a valid color code is passed as `btnEqualBackground`.
   - Given the color code "#FFFFFF" as `btnEqualBackground`.
   - When `setBtnEqualBackground` is called.
   - Then confirm that the `btnEqualBackground` is set to "#FFFFFF".

2. Scenario: Test when an invalid color code is passed as `btnEqualBackground`.
   - Given the color code "#ZZZZZZ" as `btnEqualBackground`.
   - When `setBtnEqualBackground` is called.
   - Then confirm that an appropriate error or exception is thrown.

3. Scenario: Test when `btnEqualBackground` is set to null.
   - Given null as `btnEqualBackground`.
   - When `setBtnEqualBackground` is called.
   - Then confirm that an appropriate error or exception is thrown.

4. Scenario: Test when `btnEqualBackground` is set to an empty string.
   - Given an empty string as `btnEqualBackground`.
   - When `setBtnEqualBackground` is called.
   - Then confirm that an appropriate error or exception is thrown.

5. Scenario: Test when a valid color name is passed as `btnEqualBackground`.
   - Given "blue" as `btnEqualBackground`.
   - When `setBtnEqualBackground` is called.
   - Then confirm that the `btnEqualBackground` is set to "blue".

6. Scenario: Test when an invalid color name is passed as `btnEqualBackground`.
   - Given "invalidcolor" as `btnEqualBackground`.
   - When `setBtnEqualBackground` is called.
   - Then confirm that an appropriate error or exception is thrown.

7. Scenario: Test when `btnEqualBackground` is set to a non-string value.
   - Given a non-string value as `btnEqualBackground`.
   - When `setBtnEqualBackground` is called.
   - Then confirm that an appropriate error or exception is thrown.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import com.fasterxml.jackson.dataformat.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class Theme_setBtnEqualBackground_85fbd39ea7_Test {

    private Theme theme;

    @BeforeEach
    void setUp() {
        theme = new Theme();
    }

    @Test
    void testSetBtnEqualBackground_validColorCode() {
        String validColor = "#FFFFFF";
        theme.setBtnEqualBackground(validColor);
        assertEquals(validColor, theme.getBtnEqualBackground());
    }

    @Test
    void testSetBtnEqualBackground_invalidColorCode() {
        String invalidColor = "#ZZZZZZ";
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            theme.setBtnEqualBackground(invalidColor);
        });
        assertTrue(exception.getMessage().contains("Invalid color code"));
    }

    @Test
    void testSetBtnEqualBackground_nullValue() {
        NullPointerException exception = assertThrows(NullPointerException.class, () -> {
            theme.setBtnEqualBackground(null);
        });
        assertTrue(exception.getMessage().contains("Null color code"));
    }

    @Test
    void testSetBtnEqualBackground_emptyString() {
        String emptyString = "";
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            theme.setBtnEqualBackground(emptyString);
        });
        assertTrue(exception.getMessage().contains("Empty color code"));
    }

    @Test
    void testSetBtnEqualBackground_validColorName() {
        String validColor = "blue";
        theme.setBtnEqualBackground(validColor);
        assertEquals(validColor, theme.getBtnEqualBackground());
    }

    @Test
    void testSetBtnEqualBackground_invalidColorName() {
        String invalidColor = "invalidcolor";
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            theme.setBtnEqualBackground(invalidColor);
        });
        assertTrue(exception.getMessage().contains("Invalid color name"));
    }

    @Test
    void testSetBtnEqualBackground_nonStringValue() {
        ClassCastException exception = assertThrows(ClassCastException.class, () -> {
            theme.setBtnEqualBackground((String) new Object());
        });
        assertTrue(exception.getMessage().contains("Non-string value"));
    }
}
