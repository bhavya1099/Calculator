// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Test when a valid color code is passed as `btnEqualBackground`
   - Given the color code "#FFFFFF" as `btnEqualBackground`
   - When `setBtnEqualBackground` is called
   - Then confirm that the `btnEqualBackground` is set to "#FFFFFF"

2. Scenario: Test when an invalid color code is passed as `btnEqualBackground`
   - Given the color code "#ZZZZZZ" as `btnEqualBackground`
   - When `setBtnEqualBackground` is called
   - Then confirm that an appropriate error or exception is thrown

3. Scenario: Test when `btnEqualBackground` is set to null
   - Given null as `btnEqualBackground`
   - When `setBtnEqualBackground` is called
   - Then confirm that an appropriate error or exception is thrown

4. Scenario: Test when `btnEqualBackground` is set to an empty string
   - Given an empty string as `btnEqualBackground`
   - When `setBtnEqualBackground` is called
   - Then confirm that an appropriate error or exception is thrown

5. Scenario: Test the state of `btnEqualBackground` before and after `setBtnEqualBackground` is called
   - Given the color code "#000000" as `btnEqualBackground`
   - And `btnEqualBackground` is initially "#FFFFFF"
   - When `setBtnEqualBackground` is called
   - Then confirm that the `btnEqualBackground` is changed from "#FFFFFF" to "#000000"

6. Scenario: Test when a valid color name is passed as `btnEqualBackground`
   - Given the color name "red" as `btnEqualBackground`
   - When `setBtnEqualBackground` is called
   - Then confirm that the `btnEqualBackground` is set to "red"

7. Scenario: Test when an invalid color name is passed as `btnEqualBackground`
   - Given the color name "notacolor" as `btnEqualBackground`
   - When `setBtnEqualBackground` is called
   - Then confirm that an appropriate error or exception is thrown
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.function.Executable;

public class Theme_setBtnEqualBackground_85fbd39ea7_Test {

    private Theme theme;

    @BeforeEach
    public void setup() {
        theme = new Theme();
    }

    @Test
    public void testSetBtnEqualBackground_ValidColorCode() {
        String colorCode = "#FFFFFF";
        theme.setBtnEqualBackground(colorCode);
        Assertions.assertEquals(colorCode, theme.getBtnEqualBackground());
    }

    @Test
    public void testSetBtnEqualBackground_InvalidColorCode() {
        String colorCode = "#ZZZZZZ";
        Executable executable = () -> theme.setBtnEqualBackground(colorCode);
        Assertions.assertThrows(IllegalArgumentException.class, executable);
    }

    @Test
    public void testSetBtnEqualBackground_NullColorCode() {
        Executable executable = () -> theme.setBtnEqualBackground(null);
        Assertions.assertThrows(NullPointerException.class, executable);
    }

    @Test
    public void testSetBtnEqualBackground_EmptyColorCode() {
        String colorCode = "";
        Executable executable = () -> theme.setBtnEqualBackground(colorCode);
        Assertions.assertThrows(IllegalArgumentException.class, executable);
    }

    @Test
    public void testSetBtnEqualBackground_ChangeColorCode() {
        String initialColorCode = "#FFFFFF";
        theme.setBtnEqualBackground(initialColorCode);
        String newColorCode = "#000000";
        theme.setBtnEqualBackground(newColorCode);
        Assertions.assertEquals(newColorCode, theme.getBtnEqualBackground());
    }

    @Test
    public void testSetBtnEqualBackground_ValidColorName() {
        String colorName = "red";
        theme.setBtnEqualBackground(colorName);
        Assertions.assertEquals(colorName, theme.getBtnEqualBackground());
    }

    @Test
    public void testSetBtnEqualBackground_InvalidColorName() {
        String colorName = "notacolor";
        Executable executable = () -> theme.setBtnEqualBackground(colorName);
        Assertions.assertThrows(IllegalArgumentException.class, executable);
    }
}
