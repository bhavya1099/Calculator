// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Null Test
   Description: Check if the function returns null when the `numbersBackground` is not set.

2. Scenario: Non-Empty String Test
   Description: Check if the function returns the correct string when `numbersBackground` is set to a non-empty string.

3. Scenario: Empty String Test
   Description: Check if the function returns an empty string when `numbersBackground` is set to an empty string.

4. Scenario: Long String Test
   Description: Check if the function returns the correct string when `numbersBackground` is set to a very long string.

5. Scenario: Special Character Test
   Description: Check if the function returns the correct string when `numbersBackground` is set to a string containing special characters.

6. Scenario: Numeric String Test
   Description: Check if the function returns the correct string when `numbersBackground` is set to a string of numbers.

7. Scenario: Unicode Character Test
   Description: Check if the function returns the correct string when `numbersBackground` is set to a string containing unicode characters.

8. Scenario: Concurrent Access Test
   Description: Check if the function returns the correct string when accessed concurrently from multiple threads.

9. Scenario: Repeated Invocation Test
   Description: Check if the function consistently returns the same string value across repeated invocations.

10. Scenario: White Spaces Test
    Description: Check if the function returns the correct string when `numbersBackground` is set to a string containing white spaces.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;

class Theme_getNumbersBackground_3b93e7ca36_Test {

    private Theme theme;

    @BeforeEach
    void setUp() {
        theme = new Theme();
    }

    @Test
    void testGetNumbersBackground_Null() {
        assertNull(theme.getNumbersBackground());
    }

    @Test
    void testGetNumbersBackground_NonEmptyString() {
        theme.setNumbersBackground("blue");
        assertEquals("blue", theme.getNumbersBackground());
    }

    @Test
    void testGetNumbersBackground_EmptyString() {
        theme.setNumbersBackground("");
        assertEquals("", theme.getNumbersBackground());
    }

    @Test
    void testGetNumbersBackground_LongString() {
        String longString = "a".repeat(10000);
        theme.setNumbersBackground(longString);
        assertEquals(longString, theme.getNumbersBackground());
    }

    @Test
    void testGetNumbersBackground_SpecialCharacters() {
        theme.setNumbersBackground("@#%&*");
        assertEquals("@#%&*", theme.getNumbersBackground());
    }

    @Test
    void testGetNumbersBackground_NumericString() {
        theme.setNumbersBackground("12345");
        assertEquals("12345", theme.getNumbersBackground());
    }

    @Test
    void testGetNumbersBackground_UnicodeCharacters() {
        theme.setNumbersBackground("\u263A");
        assertEquals("\u263A", theme.getNumbersBackground());
    }

    @Test
    void testGetNumbersBackground_ConcurrentAccess() throws InterruptedException {
        theme.setNumbersBackground("blue");
        ExecutorService service = Executors.newFixedThreadPool(3);
        for (int i = 0; i < 3; i++) {
            service.execute(() -> assertEquals("blue", theme.getNumbersBackground()));
        }

        service.shutdown();
        service.awaitTermination(1, TimeUnit.MINUTES);
    }

    @Test
    void testGetNumbersBackground_RepeatedInvocation() {
        theme.setNumbersBackground("blue");
        for (int i = 0; i < 10000; i++) {
            assertEquals("blue", theme.getNumbersBackground());
        }
    }

    @Test
    void testGetNumbersBackground_WhiteSpaces() {
        theme.setNumbersBackground("   ");
        assertEquals("   ", theme.getNumbersBackground());
    }
}
