// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Test when a valid color code is passed as a parameter.
   - Description: This test will verify that the function accepts a valid color code and sets it as the text color for the button equals. 
   - Input: A valid color code e.g., "#FFFFFF".
   - Expected Output: The button equals text color should be set to the provided color code.

2. Scenario: Test when an invalid color code is passed as parameter.
   - Description: This test will verify that the function handles an invalid color code and does not set it as the text color for the button equals.
   - Input: An invalid color code e.g., "123456".
   - Expected Output: The button equals text color should not be changed.

3. Scenario: Test when a null value is passed as a parameter.
   - Description: This test will verify that the function handles null values and does not set it as the text color for the button equals.
   - Input: Null.
   - Expected Output: The button equals text color should not be changed.

4. Scenario: Test when an empty string is passed as a parameter.
   - Description: This test will verify that the function handles empty string and does not set it as the text color for the button equals.
   - Input: "".
   - Expected Output: The button equals text color should not be changed.

5. Scenario: Test when a color code without the hash symbol is passed as a parameter.
   - Description: This test will verify that the function handles color codes without the hash symbol and does not set it as the text color for the button equals.
   - Input: A color code without hash symbol e.g., "FFFFFF".
   - Expected Output: The button equals text color should not be changed. 

6. Scenario: Test when a color name is passed as a parameter.
   - Description: This test will verify that the function accepts a valid color name and sets it as the text color for the button equals.
   - Input: A valid color name e.g., "Red".
   - Expected Output: The button equals text color should be set to the provided color name.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Theme_setBtnEqualTextColor_dea3d0f34c_Test {

    private Theme theme;

    @BeforeEach
    public void setup() {
        theme = new Theme();
    }

    @Test
    public void testSetBtnEqualTextColor_ValidColorCode() {
        String colorCode = "#FFFFFF";
        theme.setBtnEqualTextColor(colorCode);
        assertEquals(colorCode, theme.getBtnEqualTextColor());
    }

    @Test
    public void testSetBtnEqualTextColor_InvalidColorCode() {
        String initialColor = theme.getBtnEqualTextColor();
        String invalidColorCode = "123456";
        theme.setBtnEqualTextColor(invalidColorCode);
        assertEquals(initialColor, theme.getBtnEqualTextColor());
    }

    @Test
    public void testSetBtnEqualTextColor_NullValue() {
        String initialColor = theme.getBtnEqualTextColor();
        theme.setBtnEqualTextColor(null);
        assertEquals(initialColor, theme.getBtnEqualTextColor());
    }

    @Test
    public void testSetBtnEqualTextColor_EmptyString() {
        String initialColor = theme.getBtnEqualTextColor();
        theme.setBtnEqualTextColor("");
        assertEquals(initialColor, theme.getBtnEqualTextColor());
    }

    @Test
    public void testSetBtnEqualTextColor_ColorCodeWithoutHash() {
        String initialColor = theme.getBtnEqualTextColor();
        String colorCode = "FFFFFF";
        theme.setBtnEqualTextColor(colorCode);
        assertEquals(initialColor, theme.getBtnEqualTextColor());
    }

    @Test
    public void testSetBtnEqualTextColor_ValidColorName() {
        String colorName = "Red";
        theme.setBtnEqualTextColor(colorName);
        assertEquals(colorName, theme.getBtnEqualTextColor());
    }
}
