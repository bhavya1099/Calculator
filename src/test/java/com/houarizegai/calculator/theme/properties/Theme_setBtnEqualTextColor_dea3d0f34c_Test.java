// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Test when a valid color code is passed as an argument.
   - Given a valid color code as a string.
   - When the method setBtnEqualTextColor is called.
   - Then the btnEqualTextColor should be set to the given color code.

2. Scenario: Test when an empty string is passed as an argument.
   - Given an empty string.
   - When the method setBtnEqualTextColor is called.
   - Then the btnEqualTextColor should be set to the default color or remain unchanged.

3. Scenario: Test when a null value is passed as an argument.
   - Given a null value.
   - When the method setBtnEqualTextColor is called.
   - Then the btnEqualTextColor should be set to the default color or remain unchanged.

4. Scenario: Test when a color code in the wrong format is passed as an argument.
   - Given a color code in the wrong format.
   - When the method setBtnEqualTextColor is called.
   - Then the btnEqualTextColor should be set to the default color or remain unchanged.

5. Scenario: Test when a color code not supported by the system is passed as an argument.
   - Given a color code not supported by the system.
   - When the method setBtnEqualTextColor is called.
   - Then the btnEqualTextColor should be set to the default color or remain unchanged.

6. Scenario: Test when a non-string value is passed as an argument.
   - Given a non-string value.
   - When the method setBtnEqualTextColor is called.
   - Then an appropriate error should be thrown.

Note: The actual behavior in scenarios 2, 3, 4, and 5 depends on the implementation of the method.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Theme_setBtnEqualTextColor_dea3d0f34c_Test {

    private Theme theme;

    @BeforeEach
    public void setUp() {
        theme = new Theme();
    }

    @AfterEach
    public void tearDown() {
        theme = null;
    }

    @Test
    public void testSetBtnEqualTextColor_ValidColorCode() {
        String validColorCode = "#000000";
        theme.setBtnEqualTextColor(validColorCode);
        assertEquals(validColorCode, theme.getBtnEqualTextColor());
    }

    @Test
    public void testSetBtnEqualTextColor_EmptyString() {
        String emptyColorCode = "";
        theme.setBtnEqualTextColor(emptyColorCode);
        assertEquals(emptyColorCode, theme.getBtnEqualTextColor());
    }

    @Test
    public void testSetBtnEqualTextColor_NullValue() {
        theme.setBtnEqualTextColor(null);
        assertNull(theme.getBtnEqualTextColor());
    }

    @Test
    public void testSetBtnEqualTextColor_WrongFormatColorCode() {
        String wrongFormatColorCode = "000000";
        theme.setBtnEqualTextColor(wrongFormatColorCode);
        assertEquals(wrongFormatColorCode, theme.getBtnEqualTextColor());
    }

    @Test
    public void testSetBtnEqualTextColor_UnsupportedColorCode() {
        String unsupportedColorCode = "#ZZZZZZ";
        theme.setBtnEqualTextColor(unsupportedColorCode);
        assertEquals(unsupportedColorCode, theme.getBtnEqualTextColor());
    }

}
