// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. **Scenario 1: Empty List Input**
   Test if the function handles an empty list input correctly. The themes should be set to an empty list.

2. **Scenario 2: Null Input**
   Test if the function handles null input correctly. An error or exception should be thrown, or the themes should be set to null.

3. **Scenario 3: Single Theme Input**
   Test if the function handles a list with a single theme correctly. The themes should be set to a list with that single theme.

4. **Scenario 4: Multiple Themes Input**
   Test if the function handles a list with multiple themes correctly. The themes should be set to a list with all the input themes.

5. **Scenario 5: Duplicate Themes Input**
   Test if the function handles a list with duplicate themes correctly. The themes should be set to a list with all the input themes, including duplicates.

6. **Scenario 6: Large List Input**
   Test if the function handles a large list input correctly. The function should be able to set the themes correctly without any memory issues.

7. **Scenario 7: Updating Existing Themes**
   Test if the function updates the existing themes correctly when called multiple times. The themes should always reflect the last input list.

8. **Scenario 8: Input List with Null Themes**
   Test if the function handles a list with one or more null themes correctly. The function should be able to handle null themes, either by ignoring them or by including them in the set themes.

9. **Scenario 9: Input List with Non-Theme Objects**
   Test if the function handles a list with non-theme objects correctly. An error or exception should be thrown, or non-theme objects should be ignored.

10. **Scenario 10: Special Characters in Theme Names**
    Test if the function handles themes with special characters in their names correctly. The function should be able to handle these themes without any issues.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ThemeList_setThemes_87cb83ff29_Test {
    private ThemeList themeList;

    @BeforeEach
    public void setup() {
        themeList = new ThemeList();
    }

    @Test
    public void testSetThemes_emptyList() {
        themeList.setThemes(Collections.emptyList());
        assertTrue(themeList.getThemes().isEmpty());
    }

    @Test
    public void testSetThemes_null() {
        assertThrows(NullPointerException.class, () -> themeList.setThemes(null));
    }

    @Test
    public void testSetThemes_singleTheme() {
        Theme theme = new Theme();
        theme.setName("Theme1");
        themeList.setThemes(Collections.singletonList(theme));
        assertEquals(1, themeList.getThemes().size());
        assertEquals("Theme1", themeList.getThemes().get(0).getName());
    }

    @Test
    public void testSetThemes_multipleThemes() {
        Theme theme1 = new Theme();
        theme1.setName("Theme1");
        Theme theme2 = new Theme();
        theme2.setName("Theme2");
        themeList.setThemes(Arrays.asList(theme1, theme2));
        assertEquals(2, themeList.getThemes().size());
        assertEquals("Theme1", themeList.getThemes().get(0).getName());
        assertEquals("Theme2", themeList.getThemes().get(1).getName());
    }

    @Test
    public void testSetThemes_duplicateThemes() {
        Theme theme1 = new Theme();
        theme1.setName("Theme1");
        themeList.setThemes(Arrays.asList(theme1, theme1));
        assertEquals(2, themeList.getThemes().size());
        assertEquals("Theme1", themeList.getThemes().get(0).getName());
        assertEquals("Theme1", themeList.getThemes().get(1).getName());
    }

    @Test
    public void testSetThemes_largeList() {
        List<Theme> themes = IntStream.range(0, 10000)
                .mapToObj(i -> {
                    Theme theme = new Theme();
                    theme.setName("Theme" + i);
                    return theme;
                })
                .collect(Collectors.toList());
        themeList.setThemes(themes);
        assertEquals(10000, themeList.getThemes().size());
    }

    @Test
    public void testSetThemes_updateThemes() {
        Theme theme1 = new Theme();
        theme1.setName("Theme1");
        themeList.setThemes(Collections.singletonList(theme1));
        Theme theme2 = new Theme();
        theme2.setName("Theme2");
        themeList.setThemes(Collections.singletonList(theme2));
        assertEquals(1, themeList.getThemes().size());
        assertEquals("Theme2", themeList.getThemes().get(0).getName());
    }

    @Test
    public void testSetThemes_nullThemes() {
        themeList.setThemes(Arrays.asList(new Theme(), null));
        assertEquals(2, themeList.getThemes().size());
    }

    @Test
    public void testSetThemes_specialCharacters() {
        Theme theme = new Theme();
        theme.setName("!@#Theme$%^");
        themeList.setThemes(Collections.singletonList(theme));
        assertEquals(1, themeList.getThemes().size());
        assertEquals("!@#Theme$%^", themeList.getThemes().get(0).getName());
    }
}
