// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function accepts null as input.
   - Input: null
   - Expected Result: After calling `setThemes(null)`, `themes` should be set to null.

2. Scenario: Check if the function accepts an empty list as input.
   - Input: Empty list
   - Expected Result: After calling `setThemes` with an empty list, `themes` should be set to an empty list.

3. Scenario: Check if the function works correctly with a list of one Theme.
   - Input: List with one theme
   - Expected Result: After calling `setThemes` with a list containing one theme, `themes` should be set to a list containing the same theme.

4. Scenario: Check if the function works correctly with a list of multiple Themes.
   - Input: List with multiple themes
   - Expected Result: After calling `setThemes` with a list containing multiple themes, `themes` should be set to a list containing all the input themes.

5. Scenario: Check if the function maintains the order of the Themes in the list.
   - Input: List with multiple themes in a specific order
   - Expected Result: After calling `setThemes` with a list containing multiple themes, `themes` should be set to a list containing all the input themes in the same order.

6. Scenario: Check if the function works correctly with a list of duplicate Themes.
   - Input: List with duplicate themes
   - Expected Result: After calling `setThemes` with a list containing duplicate themes, `themes` should be set to a list containing all the input themes, including duplicates.

7. Scenario: Check if the function changes the original list of Themes.
   - Input: Call `setThemes` with a list of themes, then modify the original list
   - Expected Result: Changes made to the original list after calling `setThemes` should not affect `themes`.

8. Scenario: Check if the function works correctly after being called multiple times.
   - Input: Call `setThemes` with a list of themes, then call it again with a different list of themes
   - Expected Result: After the second call, `themes` should be set to the list of themes provided in the second call.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotSame;

public class ThemeList_setThemes_87cb83ff29_Test {
    private ThemeList themeList;
    private Theme theme1;
    private Theme theme2;

    @BeforeEach
    public void setUp() {
        themeList = new ThemeList();
        theme1 = new Theme();
        theme1.setName("Theme1");
        theme2 = new Theme();
        theme2.setName("Theme2");
    }

    @Test
    public void testSetThemes_Null() {
        themeList.setThemes(null);
        assertEquals(null, themeList.getThemes());
    }

    @Test
    public void testSetThemes_EmptyList() {
        themeList.setThemes(Collections.emptyList());
        assertEquals(Collections.emptyList(), themeList.getThemes());
    }

    @Test
    public void testSetThemes_SingleTheme() {
        List<Theme> themes = Collections.singletonList(theme1);
        themeList.setThemes(themes);
        assertEquals(themes, themeList.getThemes());
    }

    @Test
    public void testSetThemes_MultipleThemes() {
        List<Theme> themes = Arrays.asList(theme1, theme2);
        themeList.setThemes(themes);
        assertEquals(themes, themeList.getThemes());
    }

    @Test
    public void testSetThemes_OrderMaintained() {
        List<Theme> themes = Arrays.asList(theme1, theme2);
        themeList.setThemes(themes);
        assertEquals(themes, themeList.getThemes());
    }

    @Test
    public void testSetThemes_DuplicateThemes() {
        List<Theme> themes = Arrays.asList(theme1, theme1);
        themeList.setThemes(themes);
        assertEquals(themes, themeList.getThemes());
    }

    @Test
    public void testSetThemes_OriginalListNotModified() {
        List<Theme> themes = new ArrayList<>(Arrays.asList(theme1, theme2));
        themeList.setThemes(themes);
        themes.remove(1);
        assertNotSame(themes, themeList.getThemes());
    }

    @Test
    public void testSetThemes_MultipleCalls() {
        List<Theme> themes1 = Collections.singletonList(theme1);
        List<Theme> themes2 = Collections.singletonList(theme2);
        themeList.setThemes(themes1);
        themeList.setThemes(themes2);
        assertEquals(themes2, themeList.getThemes());
    }
}
