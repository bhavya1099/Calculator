/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. **Scenario: Null Name Test**
Test when the 'name' attribute is not set (null). The function should return null.

2. **Scenario: Empty Name Test**
Test when the 'name' attribute is an empty string (""). The function should return an empty string.

3. **Scenario: Single Character Name Test**
Test when the 'name' attribute is a single character. The function should return the single character.

4. **Scenario: Special Characters Name Test**
Test when the 'name' attribute consists of special characters. The function should return the exact special characters.

5. **Scenario: Numeric Name Test**
Test when the 'name' attribute consists of numbers. The function should return the exact numeric string.

6. **Scenario: Alphanumeric Name Test**
Test when the 'name' attribute is alphanumeric. The function should return the exact alphanumeric string.

7. **Scenario: Long String Name Test**
Test when the 'name' attribute is a long string. The function should return the exact long string.

8. **Scenario: White Spaces Name Test**
Test when the 'name' attribute is a string with leading, trailing, or intermediate white spaces. The function should return the string with the white spaces.

9. **Scenario: Unicode Characters Name Test**
Test when the 'name' attribute consists of Unicode characters. The function should return the exact Unicode characters.

10. **Scenario: Case Sensitivity Name Test**
Test the case sensitivity of the 'name' attribute. The function should return the name in the same case as it was set. 

Note: The specific behavior of the function in each scenario depends on the business logic. The function may be designed to throw exceptions, trim white spaces, or perform other operations. These scenarios are based on the assumption that the function simply returns the 'name' attribute as it was set.
*/
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Theme_getName_8400ac6fb7_Test {

    @Test
    public void testGetName_NullName() {
        Theme theme = new Theme();
        theme.setName(null);
        assertNull(theme.getName());
    }

    @Test
    public void testGetName_EmptyName() {
        Theme theme = new Theme();
        theme.setName("");
        assertEquals("", theme.getName());
    }

    @Test
    public void testGetName_SingleCharacter() {
        Theme theme = new Theme();
        theme.setName("a");
        assertEquals("a", theme.getName());
    }

    @Test
    public void testGetName_SpecialCharacters() {
        Theme theme = new Theme();
        theme.setName("@#$%");
        assertEquals("@#$%", theme.getName());
    }

    @Test
    public void testGetName_NumericName() {
        Theme theme = new Theme();
        theme.setName("12345");
        assertEquals("12345", theme.getName());
    }

    @Test
    public void testGetName_AlphanumericName() {
        Theme theme = new Theme();
        theme.setName("abc123");
        assertEquals("abc123", theme.getName());
    }

    @Test
    public void testGetName_LongStringName() {
        Theme theme = new Theme();
        theme.setName("thisisaverylongnameoftheme");
        assertEquals("thisisaverylongnameoftheme", theme.getName());
    }

    @Test
    public void testGetName_WhiteSpaceName() {
        Theme theme = new Theme();
        theme.setName("  theme  ");
        assertEquals("  theme  ", theme.getName());
    }

    @Test
    public void testGetName_UnicodeCharacters() {
        Theme theme = new Theme();
        theme.setName("テーマ");
        assertEquals("テーマ", theme.getName());
    }

    @Test
    public void testGetName_CaseSensitivity() {
        Theme theme = new Theme();
        theme.setName("Theme");
        assertEquals("Theme", theme.getName());
    }
}
