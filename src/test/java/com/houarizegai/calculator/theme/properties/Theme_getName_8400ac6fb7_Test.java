// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Test when the name is a non-empty string
   - Description: This scenario is to test the case when the name is a valid non-empty string. The method should return this string as it is.
   - Input: Set the name as "John Doe"
   - Expected Output: The method should return "John Doe"

2. Scenario: Test when the name is an empty string
   - Description: This scenario is to test the case when the name is an empty string. The method should return this string as it is.
   - Input: Set the name as ""
   - Expected Output: The method should return an empty string ""

3. Scenario: Test when the name is null
   - Description: This scenario is to test the case when the name is null. As the method should return the name as it is, it should return null in this case.
   - Input: Set the name as null
   - Expected Output: The method should return null

4. Scenario: Test when the name contains whitespace
   - Description: This scenario is to test the case when the name contains whitespace. The method should return the name as it is.
   - Input: Set the name as "John Doe"
   - Expected Output: The method should return "John Doe"

5. Scenario: Test when the name contains special characters
   - Description: This scenario is to test the case when the name contains special characters. The method should return the name as it is.
   - Input: Set the name as "John_Doe"
   - Expected Output: The method should return "John_Doe"

6. Scenario: Test when the name contains numbers
   - Description: This scenario is to test the case when the name contains numbers. The method should return the name as it is.
   - Input: Set the name as "John1 Doe1"
   - Expected Output: The method should return "John1 Doe1"

7. Scenario: Test when the name is a long string
   - Description: This scenario is to test the case when the name is a long string. The method should return the name as it is.
   - Input: Set the name as a string of length 1000
   - Expected Output: The method should return the name as a string of length 1000.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

class Theme_getName_8400ac6fb7_Test {

    private Theme theme;

    @BeforeEach
    void setUp() {
        theme = new Theme();
    }

    @Test
    public void testNameNonEmpty() {
        theme.setName("John Doe");
        assertEquals("John Doe", theme.getName());
    }

    @Test
    public void testNameEmpty() {
        theme.setName("");
        assertEquals("", theme.getName());
    }

    @Test
    public void testNameNull() {
        theme.setName(null);
        assertNull(theme.getName());
    }

    @Test
    public void testNameWithWhitespace() {
        theme.setName("John Doe");
        assertEquals("John Doe", theme.getName());
    }

    @Test
    public void testNameWithSpecialCharacters() {
        theme.setName("John_Doe");
        assertEquals("John_Doe", theme.getName());
    }

    @Test
    public void testNameWithNumbers() {
        theme.setName("John1 Doe1");
        assertEquals("John1 Doe1", theme.getName());
    }

    @Test
    public void testNameLongString() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 1000; i++) {
            sb.append("a");
        }
        theme.setName(sb.toString());
        assertEquals(sb.toString(), theme.getName());
    }
}
