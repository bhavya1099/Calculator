// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function properly sets the text color when a valid color code is provided.
   - Input: "red"
   - Expected Output: textColor should be set to "red"

2. Scenario: Check if the function sets the text color when a null value is provided.
   - Input: null
   - Expected Output: textColor should be set to null

3. Scenario: Check if the function sets the text color when an empty string is provided.
   - Input: ""
   - Expected Output: textColor should be set to ""

4. Scenario: Check if the function sets the textColor when a valid hex color code is provided.
   - Input: "#FFFFFF"
   - Expected Output: textColor should be set to "#FFFFFF"

5. Scenario: Check if the function sets the textColor when a valid RGB color code is provided.
   - Input: "rgb(255,255,255)"
   - Expected Output: textColor should be set to "rgb(255,255,255)"

6. Scenario: Check if the function properly sets the text color when a color name with different case is provided.
   - Input: "Blue"
   - Expected Output: textColor should be set to "Blue"

7. Scenario: Check if the function sets the textColor when a string with spaces is provided.
   - Input: "  red  "
   - Expected Output: textColor should be set to "  red  "

8. Scenario: Check if the function sets the textColor when a non-color string is provided.
   - Input: "hello"
   - Expected Output: textColor should be set to "hello"

9. Scenario: Check if the function sets the textColor when a long string is provided.
   - Input: "a very long string that might exceed the maximum length of a color code"
   - Expected Output: textColor should be set to "a very long string that might exceed the maximum length of a color code"

10. Scenario: Check if the function sets the textColor when a string with special characters is provided.
    - Input: "@@@"
    - Expected Output: textColor should be set to "@@@"
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Theme_setTextColor_845b18d0bc_Test {
    private Theme theme;

    @BeforeEach
    public void setUp() {
        theme = new Theme();
    }

    @Test
    public void testSetTextColor_ValidColorName() {
        String color = "red";
        theme.setTextColor(color);
        assertEquals(color, theme.getTextColor());
    }

    @Test
    public void testSetTextColor_NullValue() {
        theme.setTextColor(null);
        assertNull(theme.getTextColor());
    }

    @Test
    public void testSetTextColor_EmptyString() {
        theme.setTextColor("");
        assertEquals("", theme.getTextColor());
    }

    @Test
    public void testSetTextColor_ValidHexColorCode() {
        String color = "#FFFFFF";
        theme.setTextColor(color);
        assertEquals(color, theme.getTextColor());
    }

    @Test
    public void testSetTextColor_ValidRgbColorCode() {
        String color = "rgb(255,255,255)";
        theme.setTextColor(color);
        assertEquals(color, theme.getTextColor());
    }

    @Test
    public void testSetTextColor_ColorNameWithDifferentCase() {
        String color = "Blue";
        theme.setTextColor(color);
        assertEquals(color, theme.getTextColor());
    }

    @Test
    public void testSetTextColor_StringWithSpaces() {
        String color = "  red  ";
        theme.setTextColor(color);
        assertEquals(color, theme.getTextColor());
    }

    @Test
    public void testSetTextColor_NonColorString() {
        String color = "hello";
        theme.setTextColor(color);
        assertEquals(color, theme.getTextColor());
    }

    @Test
    public void testSetTextColor_LongString() {
        String color = "a very long string that might exceed the maximum length of a color code";
        theme.setTextColor(color);
        assertEquals(color, theme.getTextColor());
    }

    @Test
    public void testSetTextColor_SpecialCharacters() {
        String color = "@@@";
        theme.setTextColor(color);
        assertEquals(color, theme.getTextColor());
    }
}
