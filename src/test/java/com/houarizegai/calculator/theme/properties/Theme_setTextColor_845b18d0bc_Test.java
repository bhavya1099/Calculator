// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Test when the textColor parameter is set to a valid color value.
Expected Result: The textColor should be updated to the specified color.

2. Scenario: Test when the textColor parameter is set to an empty string.
Expected Result: The textColor should not be updated, or an error should be thrown depending on the business logic.

3. Scenario: Test when the textColor parameter is set to a null value.
Expected Result: The textColor should not be updated, or an error should be thrown depending on the business logic.

4. Scenario: Test when the textColor parameter is set to a non-existent color.
Expected Result: The textColor should not be updated, or an error should be thrown depending on the business logic.

5. Scenario: Test when the textColor parameter is set to a color value containing leading or trailing spaces.
Expected Result: The textColor should be updated to the specified color after trimming the spaces, or an error should be thrown depending on the business logic.

6. Scenario: Test when the textColor parameter is set to a valid color value in different cases (upper case, lower case, mixed case).
Expected Result: The textColor should be updated to the specified color irrespective of the case.

7. Scenario: Test when the textColor parameter is set multiple times with different valid color values.
Expected Result: The textColor should be updated each time to the specified color.

8. Scenario: Test when the textColor parameter is set to a color value in different languages.
Expected Result: The textColor should not be updated, or an error should be thrown depending on the business logic.

9. Scenario: Test when the textColor parameter is set with special characters.
Expected Result: The textColor should not be updated, or an error should be thrown depending on the business logic.

10. Scenario: Test when the textColor parameter is set to a color value in hexadecimal format.
Expected Result: The textColor should be updated to the specified color, or an error should be thrown depending on the business logic.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Theme_setTextColor_845b18d0bc_Test {
    Theme theme = new Theme();

    @Test
    public void testSetTextColor_ValidColor() {
        theme.setTextColor("Blue");
        assertEquals("Blue", theme.getTextColor());
    }

    @Test
    public void testSetTextColor_EmptyString() {
        theme.setTextColor("");
        assertEquals("", theme.getTextColor());
    }

    @Test
    public void testSetTextColor_Null() {
        theme.setTextColor(null);
        assertNull(theme.getTextColor());
    }

    @Test
    public void testSetTextColor_NonExistentColor() {
        theme.setTextColor("NonExistentColor");
        assertEquals("NonExistentColor", theme.getTextColor());
    }

    @Test
    public void testSetTextColor_ColorWithSpaces() {
        theme.setTextColor("  Blue  ");
        assertEquals("  Blue  ", theme.getTextColor());
    }

    @Test
    public void testSetTextColor_DifferentCases() {
        theme.setTextColor("blue");
        assertEquals("blue", theme.getTextColor());

        theme.setTextColor("BLUE");
        assertEquals("BLUE", theme.getTextColor());

        theme.setTextColor("BlUe");
        assertEquals("BlUe", theme.getTextColor());
    }

    @Test
    public void testSetTextColor_MultipleChanges() {
        theme.setTextColor("Blue");
        assertEquals("Blue", theme.getTextColor());

        theme.setTextColor("Red");
        assertEquals("Red", theme.getTextColor());
    }

    @Test
    public void testSetTextColor_DifferentLanguages() {
        theme.setTextColor("Bleu"); // French for Blue
        assertEquals("Bleu", theme.getTextColor());
    }

    @Test
    public void testSetTextColor_SpecialCharacters() {
        theme.setTextColor("@Blue!");
        assertEquals("@Blue!", theme.getTextColor());
    }

    @Test
    public void testSetTextColor_HexadecimalColor() {
        theme.setTextColor("#0000FF"); // Hexadecimal for Blue
        assertEquals("#0000FF", theme.getTextColor());
    }
}
