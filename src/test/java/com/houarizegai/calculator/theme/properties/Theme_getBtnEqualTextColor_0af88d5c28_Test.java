// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function `getBtnEqualTextColor()` returns the correct color code string of the button text.

2. Scenario: Check if the function `getBtnEqualTextColor()` returns a string type value.

3. Scenario: Test whether the function `getBtnEqualTextColor()` handles null values correctly, i.e., it should return null or an appropriate default color code if `btnEqualTextColor` is not set.

4. Scenario: Check if the function `getBtnEqualTextColor()` returns an empty string if `btnEqualTextColor` is set to an empty string.

5. Scenario: Test whether the function `getBtnEqualTextColor()` returns a default color code or throws an appropriate exception when the color code stored in `btnEqualTextColor` is invalid or not recognized.

6. Scenario: Check if the function `getBtnEqualTextColor()` returns the same color code string every time it is called, given that `btnEqualTextColor` is not modified.

7. Scenario: Test whether the function `getBtnEqualTextColor()` can handle and return color codes of different formats correctly (RGB, Hexadecimal, etc.).

8. Scenario: Check if the function `getBtnEqualTextColor()` returns the latest color code if `btnEqualTextColor` has been modified.

9. Scenario: Test whether the function `getBtnEqualTextColor()` returns the color code string in the correct format (lowercase or uppercase) as stored in `btnEqualTextColor`. 

10. Scenario: Check if the function `getBtnEqualTextColor()` returns the color code string without any leading or trailing spaces.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class Theme_getBtnEqualTextColor_0af88d5c28_Test {
    private Theme theme;

    @BeforeEach
    public void setUp() {
        theme = new Theme();
    }

    @Test
    public void testGetBtnEqualTextColorReturnsCorrectColorCode() {
        theme.setBtnEqualTextColor("#FFFFFF");
        assertEquals("#FFFFFF", theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColorReturnsString() {
        theme.setBtnEqualTextColor("#FFFFFF");
        assertTrue(theme.getBtnEqualTextColor() instanceof String);
    }

    @Test
    public void testGetBtnEqualTextColorHandlesNullValues() {
        theme.setBtnEqualTextColor(null);
        assertNull(theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColorReturnsEmptyStringWhenNotSet() {
        theme.setBtnEqualTextColor("");
        assertEquals("", theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColorReturnsSameColorCode() {
        theme.setBtnEqualTextColor("#FFFFFF");
        assertEquals("#FFFFFF", theme.getBtnEqualTextColor());
        assertEquals("#FFFFFF", theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColorHandlesDifferentFormats() {
        theme.setBtnEqualTextColor("rgb(255,255,255)");
        assertEquals("rgb(255,255,255)", theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColorReturnsLatestColorCode() {
        theme.setBtnEqualTextColor("#FFFFFF");
        theme.setBtnEqualTextColor("#000000");
        assertEquals("#000000", theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColorReturnsCorrectFormat() {
        theme.setBtnEqualTextColor("#ffffff");
        assertEquals("#ffffff", theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColorReturnsNoLeadingOrTrailingSpaces() {
        theme.setBtnEqualTextColor(" #ffffff ");
        assertEquals("#ffffff", theme.getBtnEqualTextColor().trim());
    }
}
