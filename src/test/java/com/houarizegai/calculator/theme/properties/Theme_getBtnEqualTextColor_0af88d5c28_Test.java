// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function returns the correct text color of the Equal Button.
   Given the color of the Equal Button is set.
   When the function getBtnEqualTextColor() is called.
   Then it should return the correct color of the Equal Button.

2. Scenario: Check if the function returns null when the color of the Equal Button is not set.
   Given the color of the Equal Button is not set.
   When the function getBtnEqualTextColor() is called.
   Then it should return null.

3. Scenario: Check if the function returns the correct text color after changing the color of the Equal Button.
   Given the color of the Equal Button is set and then changed.
   When the function getBtnEqualTextColor() is called.
   Then it should return the updated color of the Equal Button.

4. Scenario: Check if the function can handle an empty string color.
   Given the color of the Equal Button is set to an empty string.
   When the function getBtnEqualTextColor() is called.
   Then it should return an empty string.

5. Scenario: Check if the function can handle white space string color.
   Given the color of the Equal Button is set to a white space string.
   When the function getBtnEqualTextColor() is called.
   Then it should return a white space string.

6. Scenario: Check if the function can handle a string with special characters.
   Given the color of the Equal Button is set to a string with special characters.
   When the function getBtnEqualTextColor() is called.
   Then it should return a string with special characters. 

7. Scenario: Check if the function returns the correct text color when the color of the Equal Button is set to a hexadecimal color code.
   Given the color of the Equal Button is set to a hexadecimal color code.
   When the function getBtnEqualTextColor() is called.
   Then it should return the hexadecimal color code. 

8. Scenario: Check if the function can handle a string with numeric characters.
   Given the color of the Equal Button is set to a string with numeric characters.
   When the function getBtnEqualTextColor() is called.
   Then it should return a string with numeric characters. 

9. Scenario: Check if the function can handle a string with alphanumeric characters.
   Given the color of the Equal Button is set to a string with alphanumeric characters.
   When the function getBtnEqualTextColor() is called.
   Then it should return a string with alphanumeric characters.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Theme_getBtnEqualTextColor_0af88d5c28_Test {
    @Test
    public void testGetBtnEqualTextColor() {
        Theme theme = new Theme();

        // Scenario 1: Check if the function returns the correct text color of the Equal Button.
        theme.setBtnEqualTextColor("#000000");
        assertEquals("#000000", theme.getBtnEqualTextColor());

        // Scenario 2: Check if the function returns null when the color of the Equal Button is not set.
        theme.setBtnEqualTextColor(null);
        assertNull(theme.getBtnEqualTextColor());

        // Scenario 3: Check if the function returns the correct text color after changing the color of the Equal Button.
        theme.setBtnEqualTextColor("#FFFFFF");
        assertEquals("#FFFFFF", theme.getBtnEqualTextColor());

        // Scenario 4: Check if the function can handle an empty string color.
        theme.setBtnEqualTextColor("");
        assertEquals("", theme.getBtnEqualTextColor());

        // Scenario 5: Check if the function can handle white space string color.
        theme.setBtnEqualTextColor(" ");
        assertEquals(" ", theme.getBtnEqualTextColor());

        // Scenario 6: Check if the function can handle a string with special characters.
        theme.setBtnEqualTextColor("#$%^&*");
        assertEquals("#$%^&*", theme.getBtnEqualTextColor());

        // Scenario 7: Check if the function returns the correct text color when the color of the Equal Button is set to a hexadecimal color code.
        theme.setBtnEqualTextColor("#123ABC");
        assertEquals("#123ABC", theme.getBtnEqualTextColor());

        // Scenario 8: Check if the function can handle a string with numeric characters.
        theme.setBtnEqualTextColor("123456");
        assertEquals("123456", theme.getBtnEqualTextColor());

        // Scenario 9: Check if the function can handle a string with alphanumeric characters.
        theme.setBtnEqualTextColor("123ABC");
        assertEquals("123ABC", theme.getBtnEqualTextColor());
    }
}
