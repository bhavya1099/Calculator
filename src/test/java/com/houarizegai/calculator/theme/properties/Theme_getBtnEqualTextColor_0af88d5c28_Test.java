// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function `getBtnEqualTextColor()` returns the correct color code string of the `btnEqualTextColor`. 
   Test Steps: Assign a color code to `btnEqualTextColor` and call `getBtnEqualTextColor()` to see if it returns the correct color code string.

2. Scenario: Check if the function `getBtnEqualTextColor()` returns null when `btnEqualTextColor` is not assigned any value. 
   Test Steps: Do not assign any value to `btnEqualTextColor` and call `getBtnEqualTextColor()` to see if it returns null.

3. Scenario: Check if the function `getBtnEqualTextColor()` returns an empty string when `btnEqualTextColor` is assigned an empty string. 
   Test Steps: Assign an empty string to `btnEqualTextColor` and call `getBtnEqualTextColor()` to see if it returns an empty string.

4. Scenario: Check if the function `getBtnEqualTextColor()` is case sensitive.
   Test Steps: Assign a color code in different cases to `btnEqualTextColor` and call `getBtnEqualTextColor()` to see if it returns the color code in the same case.

5. Scenario: Check if the function `getBtnEqualTextColor()` can handle color names instead of color codes.
   Test Steps: Assign a color name to `btnEqualTextColor` and call `getBtnEqualTextColor()` to see if it returns the color name correctly.

6. Scenario: Check if the function `getBtnEqualTextColor()` can handle non-standard color codes or names.
   Test Steps: Assign a non-standard color code or name to `btnEqualTextColor` and call `getBtnEqualTextColor()` to see if it returns the non-standard color code or name correctly.

7. Scenario: Check if the function `getBtnEqualTextColor()` can handle extremely long color codes or names.
   Test Steps: Assign an extremely long color code or name to `btnEqualTextColor` and call `getBtnEqualTextColor()` to see if it returns the color code or name correctly.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Theme_getBtnEqualTextColor_0af88d5c28_Test {

    private Theme theme = new Theme();

    @Test
    public void testGetBtnEqualTextColor_WithColorCode() {
        String colorCode = "#FFFFFF";
        theme.setBtnEqualTextColor(colorCode);
        assertEquals(colorCode, theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColor_WithNull() {
        theme.setBtnEqualTextColor(null);
        assertNull(theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColor_WithEmptyString() {
        theme.setBtnEqualTextColor("");
        assertEquals("", theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColor_CaseSensitive() {
        String colorCode = "#FfFfFf";
        theme.setBtnEqualTextColor(colorCode);
        assertEquals(colorCode, theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColor_WithColorName() {
        String colorName = "Red";
        theme.setBtnEqualTextColor(colorName);
        assertEquals(colorName, theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColor_WithNonStandardColor() {
        String colorName = "NonStandardColor";
        theme.setBtnEqualTextColor(colorName);
        assertEquals(colorName, theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColor_WithLongColorCode() {
        String colorCode = "#1234567890ABCDEF";
        theme.setBtnEqualTextColor(colorCode);
        assertEquals(colorCode, theme.getBtnEqualTextColor());
    }
}
