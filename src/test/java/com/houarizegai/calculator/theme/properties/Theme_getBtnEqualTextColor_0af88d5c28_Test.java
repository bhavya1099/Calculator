/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function `getBtnEqualTextColor()` returns the correct color code string.
   - Description: This scenario is to verify that the function returns the correct color code, which is expected to be stored in the `btnEqualTextColor` variable.

2. Scenario: Check if the function `getBtnEqualTextColor()` returns an empty string when `btnEqualTextColor` is not set.
   - Description: This scenario is to verify that the function returns an empty string when the `btnEqualTextColor` variable has not been initialized or set.

3. Scenario: Check if the function `getBtnEqualTextColor()` returns null when `btnEqualTextColor` is null.
   - Description: This scenario is to verify that the function returns null when the `btnEqualTextColor` variable is null.

4. Scenario: Check if the function `getBtnEqualTextColor()` returns the correct color code string after `btnEqualTextColor` has been modified.
   - Description: This scenario is to verify that the function returns the correct, updated color code after `btnEqualTextColor` has been changed.

5. Scenario: Check if the function `getBtnEqualTextColor()` returns the correct color code string in different instances of the class.
   - Description: This scenario is to verify that the function returns the correct color code in different instances of the class, ensuring that the `btnEqualTextColor` variable is instance-specific and not shared across instances.

6. Scenario: Check if the function `getBtnEqualTextColor()` can handle color codes in different formats (RGB, Hexadecimal, etc.).
   - Description: This scenario is to verify that the function can handle and return color codes in different formats, assuming that `btnEqualTextColor` can hold color codes in a variety of formats.
*/
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class Theme_getBtnEqualTextColor_0af88d5c28_Test {
    private Theme theme;

    @BeforeEach
    public void setUp() {
        theme = new Theme();
    }

    @Test
    public void testGetBtnEqualTextColorReturnsCorrectColorCode() {
        theme.setBtnEqualTextColor("#FFFFFF");
        assertEquals("#FFFFFF", theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColorReturnsEmptyStringWhenNotSet() {
        assertEquals("", theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColorReturnsNullWhenNull() {
        theme.setBtnEqualTextColor(null);
        assertNull(theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColorReturnsCorrectColorCodeAfterModification() {
        theme.setBtnEqualTextColor("#FFFFFF");
        theme.setBtnEqualTextColor("#000000");
        assertEquals("#000000", theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColorReturnsCorrectColorCodeInDifferentInstances() {
        Theme anotherTheme = new Theme();
        theme.setBtnEqualTextColor("#FFFFFF");
        anotherTheme.setBtnEqualTextColor("#000000");
        assertEquals("#FFFFFF", theme.getBtnEqualTextColor());
        assertEquals("#000000", anotherTheme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColorCanHandleDifferentFormats() {
        theme.setBtnEqualTextColor("rgb(255, 255, 255)");
        assertEquals("rgb(255, 255, 255)", theme.getBtnEqualTextColor());
        theme.setBtnEqualTextColor("#FFFFFF");
        assertEquals("#FFFFFF", theme.getBtnEqualTextColor());
    }
}
