// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Here are some test scenarios to validate the business logic of the function getBtnEqualTextColor:

1. Scenario: Check that the function returns a non-null value.
   Given that the btnEqualTextColor variable has been assigned a value,
   When the getBtnEqualTextColor function is called,
   Then the function should return a non-null value.

2. Scenario: Check that the function returns a String type value.
   Given that the btnEqualTextColor variable has been assigned a value,
   When the getBtnEqualTextColor function is called,
   Then the function should return a value of type String.

3. Scenario: Check that the function returns the correct color value.
   Given that the btnEqualTextColor variable has been assigned a specific color value,
   When the getBtnEqualTextColor function is called,
   Then the function should return the same color value.

4. Scenario: Check that the function returns an empty string if the btnEqualTextColor variable is not set.
   Given that the btnEqualTextColor variable is not assigned a value,
   When the getBtnEqualTextColor function is called,
   Then the function should return an empty string.

5. Scenario: Check that the function returns the correct value after the btnEqualTextColor variable has been changed.
   Given that the btnEqualTextColor variable has been assigned a color value,
   And the color value of the btnEqualTextColor variable is changed,
   When the getBtnEqualTextColor function is called,
   Then the function should return the new color value.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class Theme_getBtnEqualTextColor_0af88d5c28_Test {

    private Theme theme;

    @BeforeEach
    public void setUp() {
        theme = new Theme();
    }

    @Test
    public void testGetBtnEqualTextColor_NonNullValue() {
        theme.setBtnEqualTextColor("#FFFFFF");
        String btnEqualTextColor = theme.getBtnEqualTextColor();
        Assertions.assertNotNull(btnEqualTextColor, "Button equal text color should not be null");
    }

    @Test
    public void testGetBtnEqualTextColor_StringType() {
        theme.setBtnEqualTextColor("#FFFFFF");
        String btnEqualTextColor = theme.getBtnEqualTextColor();
        Assertions.assertTrue(btnEqualTextColor instanceof String, "Button equal text color should be a string");
    }

    @Test
    public void testGetBtnEqualTextColor_CorrectValue() {
        theme.setBtnEqualTextColor("#FFFFFF");
        String btnEqualTextColor = theme.getBtnEqualTextColor();
        Assertions.assertEquals("#FFFFFF", btnEqualTextColor, "Button equal text color should be #FFFFFF");
    }

    @Test
    public void testGetBtnEqualTextColor_EmptyIfNotSet() {
        String btnEqualTextColor = theme.getBtnEqualTextColor();
        Assertions.assertEquals("", btnEqualTextColor, "Button equal text color should be empty if not set");
    }

    @Test
    public void testGetBtnEqualTextColor_CorrectValueAfterChange() {
        theme.setBtnEqualTextColor("#FFFFFF");
        theme.setBtnEqualTextColor("#000000");
        String btnEqualTextColor = theme.getBtnEqualTextColor();
        Assertions.assertEquals("#000000", btnEqualTextColor, "Button equal text color should be #000000 after change");
    }
}
