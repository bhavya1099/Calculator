// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Here are some test scenarios to validate the business logic of the function getBtnEqualTextColor:

1. Scenario: Check that the function returns a non-null value.
   Given that the btnEqualTextColor variable has been assigned a value,
   When the getBtnEqualTextColor function is called,
   Then the function should return a non-null value.

2. Scenario: Check that the function returns a correct color value.
   Given that the btnEqualTextColor variable has been assigned a specific color value,
   When the getBtnEqualTextColor function is called,
   Then the function should return the same color value as assigned to btnEqualTextColor.

3. Scenario: Check that the function returns the default color value if no specific color has been assigned.
   Given that the btnEqualTextColor variable has not been assigned a specific color value,
   When the getBtnEqualTextColor function is called,
   Then the function should return the default color value.

4. Scenario: Check that the function returns the correct color value after the color has been changed.
   Given that the btnEqualTextColor variable has been assigned a specific color value,
   When the color of btnEqualTextColor is changed and the getBtnEqualTextColor function is called,
   Then the function should return the new color value.

5. Scenario: Check that the function returns a string.
   Given that the btnEqualTextColor variable has been assigned a value,
   When the getBtnEqualTextColor function is called,
   Then the function should return a value of type string.

6. Scenario: Check that the function returns the correct color value in different instances.
   Given that multiple instances of the class are created and the btnEqualTextColor variable has been assigned different color values in each instance,
   When the getBtnEqualTextColor function is called for each instance,
   Then the function should return the correct color value for each instance.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Theme_getBtnEqualTextColor_0af88d5c28_Test {

    private Theme theme;

    @BeforeEach
    public void setup() {
        theme = new Theme();
    }

    @Test
    public void testGetBtnEqualTextColorReturnsNonNull() {
        theme.setBtnEqualTextColor("Blue");
        assertNotNull(theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColorReturnsCorrectColor() {
        theme.setBtnEqualTextColor("Red");
        assertEquals("Red", theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColorReturnsDefaultColor() {
        assertNull(theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColorReturnsNewColorAfterChange() {
        theme.setBtnEqualTextColor("Green");
        theme.setBtnEqualTextColor("Yellow");
        assertEquals("Yellow", theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColorReturnsString() {
        theme.setBtnEqualTextColor("Black");
        assertTrue(theme.getBtnEqualTextColor() instanceof String);
    }

    @Test
    public void testGetBtnEqualTextColorReturnsCorrectColorInDifferentInstances() {
        Theme theme2 = new Theme();
        theme.setBtnEqualTextColor("Purple");
        theme2.setBtnEqualTextColor("Pink");
        assertEquals("Purple", theme.getBtnEqualTextColor());
        assertEquals("Pink", theme2.getBtnEqualTextColor());
    }
}
