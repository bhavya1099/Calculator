// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Test with empty theme list
- Given that the themes list is empty, when getThemesAsMap() is called, then it should return an empty map.

Test Scenario 2: Test with non-empty theme list
- Given that the themes list is not empty, when getThemesAsMap() is called, then it should return a map with the same size as the themes list.

Test Scenario 3: Test with duplicate theme names
- Given that the themes list contains duplicate theme names, when getThemesAsMap() is called, then it should throw an IllegalStateException.

Test Scenario 4: Test with null theme name
- Given that the themes list contains a theme with a null name, when getThemesAsMap() is called, then it should throw a NullPointerException.

Test Scenario 5: Test with null theme object
- Given that the themes list contains a null theme object, when getThemesAsMap() is called, then it should throw a NullPointerException.

Test Scenario 6: Test with large theme list
- Given that the themes list is very large, when getThemesAsMap() is called, then it should return a map with the same size as the themes list within a reasonable time frame.

Test Scenario 7: Test with special character theme names
- Given that the themes list contains themes with names that have special characters, when getThemesAsMap() is called, then it should return a map where the keys are the exact theme names (including special characters).

Test Scenario 8: Test with theme names that only differ in case
- Given that the themes list contains themes with names that only differ in case, when getThemesAsMap() is called, then it should return a map where the keys are the exact theme names (case-sensitive).
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

public class ThemeList_getThemesAsMap_4c59a768b5_Test {

    private ThemeList themeList;
    private List<Theme> themes;

    @BeforeEach
    public void setUp() {
        themeList = new ThemeList();
        themes = new ArrayList<>();
    }

    @Test
    public void testGetThemesAsMap_emptyList() {
        themeList.setThemes(themes);
        Map<String, Theme> themesAsMap = themeList.getThemesAsMap();
        assertTrue(themesAsMap.isEmpty());
    }

    @Test
    public void testGetThemesAsMap_nonEmptyList() {
        Theme theme = new Theme();
        theme.setName("Dark");
        themes.add(theme);
        themeList.setThemes(themes);
        Map<String, Theme> themesAsMap = themeList.getThemesAsMap();
        assertEquals(1, themesAsMap.size());
        assertEquals(theme, themesAsMap.get("Dark"));
    }

    @Test
    public void testGetThemesAsMap_duplicateThemeNames() {
        Theme theme1 = new Theme();
        theme1.setName("Dark");
        themes.add(theme1);
        Theme theme2 = new Theme();
        theme2.setName("Dark");
        themes.add(theme2);
        themeList.setThemes(themes);
        assertThrows(IllegalStateException.class, () -> themeList.getThemesAsMap());
    }

    @Test
    public void testGetThemesAsMap_nullThemeName() {
        Theme theme = new Theme();
        theme.setName(null);
        themes.add(theme);
        themeList.setThemes(themes);
        assertThrows(NullPointerException.class, () -> themeList.getThemesAsMap());
    }

    @Test
    public void testGetThemesAsMap_nullThemeObject() {
        themes.add(null);
        themeList.setThemes(themes);
        assertThrows(NullPointerException.class, () -> themeList.getThemesAsMap());
    }

    @Test
    public void testGetThemesAsMap_largeThemeList() {
        for (int i = 0; i < 10000; i++) {
            Theme theme = new Theme();
            theme.setName("Theme" + i);
            themes.add(theme);
        }
        themeList.setThemes(themes);
        Map<String, Theme> themesAsMap = themeList.getThemesAsMap();
        assertEquals(10000, themesAsMap.size());
    }

    @Test
    public void testGetThemesAsMap_specialCharacterThemeNames() {
        Theme theme = new Theme();
        theme.setName("Dark@123");
        themes.add(theme);
        themeList.setThemes(themes);
        Map<String, Theme> themesAsMap = themeList.getThemesAsMap();
        assertEquals(1, themesAsMap.size());
        assertEquals(theme, themesAsMap.get("Dark@123"));
    }

    @Test
    public void testGetThemesAsMap_themeNamesDifferInCase() {
        Theme theme1 = new Theme();
        theme1.setName("Dark");
        themes.add(theme1);
        Theme theme2 = new Theme();
        theme2.setName("dark");
        themes.add(theme2);
        themeList.setThemes(themes);
        Map<String, Theme> themesAsMap = themeList.getThemesAsMap();
        assertEquals(2, themesAsMap.size());
        assertEquals(theme1, themesAsMap.get("Dark"));
        assertEquals(theme2, themesAsMap.get("dark"));
    }
}
