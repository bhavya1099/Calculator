// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Validate that the getThemesAsMap() method returns a non-null Map object when the themes list is not empty.
   Description: This test scenario is to validate that the getThemesAsMap() method correctly converts the list of themes into a Map object and returns a non-null Map object when the themes list is not empty.

2. Test Scenario: Validate that the getThemesAsMap() method returns an empty Map when the themes list is empty.
   Description: This test scenario is to validate that the getThemesAsMap() method correctly handles the case where the list of themes is empty and returns an empty Map.

3. Test Scenario: Validate that the getThemesAsMap() method correctly maps theme names to corresponding Theme objects.
   Description: This test scenario is to validate that the getThemesAsMap() method correctly converts the list of themes into a Map object, with theme names as keys and corresponding Theme objects as values.

4. Test Scenario: Validate that the getThemesAsMap() method correctly handles duplicate theme names in the themes list.
   Description: This test scenario is to validate that the getThemesAsMap() method correctly handles the case where there are duplicate theme names in the themes list. In this case, the last occurrence of the duplicate theme should be in the resulting Map.

5. Test Scenario: Validate that the getThemesAsMap() method throws a NullPointerException when the themes list is null.
   Description: This test scenario is to validate that the getThemesAsMap() method correctly throws a NullPointerException when the themes list is null.

6. Test Scenario: Validate that the getThemesAsMap() method throws a NullPointerException when a theme in the themes list is null.
   Description: This test scenario is to validate that the getThemesAsMap() method correctly throws a NullPointerException when a theme in the themes list is null.

7. Test Scenario: Validate that the getThemesAsMap() method handles a large number of themes in the list.
   Description: This test scenario is to validate that the getThemesAsMap() method can handle large lists of themes without performance degradation.

8. Test Scenario: Validate that the getThemesAsMap() method returns a Map with the same size as the themes list.
   Description: This test scenario is to validate that the getThemesAsMap() method correctly converts the list of themes into a Map object with the same size as the themes list.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class ThemeList_getThemesAsMap_4c59a768b5_Test {
    private ThemeList themeList;
    private List<Theme> themes;

    @BeforeEach
    public void setup() {
        themeList = new ThemeList();
        themes = new ArrayList<>();
        Theme theme1 = new Theme();
        theme1.setName("Light");
        Theme theme2 = new Theme();
        theme2.setName("Dark");
        themes.add(theme1);
        themes.add(theme2);
        themeList.setThemes(themes);
    }

    @Test
    public void testGetThemesAsMap_NotNull() {
        Map<String, Theme> themeMap = themeList.getThemesAsMap();
        assertNotNull(themeMap, "Map should not be null");
    }

    @Test
    public void testGetThemesAsMap_Empty() {
        themeList.setThemes(new ArrayList<>());
        Map<String, Theme> themeMap = themeList.getThemesAsMap();
        assertTrue(themeMap.isEmpty(), "Map should be empty");
    }

    @Test
    public void testGetThemesAsMap_CorrectMapping() {
        Map<String, Theme> themeMap = themeList.getThemesAsMap();
        assertEquals(themes.get(0), themeMap.get("Light"), "Theme map should correctly map theme names to themes");
        assertEquals(themes.get(1), themeMap.get("Dark"), "Theme map should correctly map theme names to themes");
    }

    @Test
    public void testGetThemesAsMap_DuplicateNames() {
        Theme theme3 = new Theme();
        theme3.setName("Dark");
        themes.add(theme3);
        themeList.setThemes(themes);

        Map<String, Theme> themeMap = themeList.getThemesAsMap();
        assertEquals(theme3, themeMap.get("Dark"), "In case of duplicate names, the last one should be in the map");
    }

    @Test
    public void testGetThemesAsMap_NullList() {
        themeList.setThemes(null);
        assertThrows(NullPointerException.class, () -> themeList.getThemesAsMap());
    }

    @Test
    public void testGetThemesAsMap_NullTheme() {
        themes.add(null);
        themeList.setThemes(themes);
        assertThrows(NullPointerException.class, () -> themeList.getThemesAsMap());
    }

    @Test
    public void testGetThemesAsMap_LargeList() {
        for (int i = 0; i < 1000000; i++) {
            Theme theme = new Theme();
            theme.setName("Theme" + i);
            themes.add(theme);
        }
        themeList.setThemes(themes);
        Map<String, Theme> themeMap = themeList.getThemesAsMap();
        assertEquals(themes.size(), themeMap.size(), "Map should have the same size as the list");
    }

    @Test
    public void testGetThemesAsMap_SameSize() {
        Map<String, Theme> themeMap = themeList.getThemesAsMap();
        assertEquals(themes.size(), themeMap.size(), "Map should have the same size as the list");
    }
}
