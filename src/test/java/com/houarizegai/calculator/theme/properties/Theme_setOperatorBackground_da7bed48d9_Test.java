// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function accepts a valid string input.
   Test Case: Provide a valid string (like "Telecom") as an operator background and check if it's successfully set.

2. Scenario: Check if the function handles null values.
   Test Case: Provide null as an operator background and check how the function handles it.

3. Scenario: Check if the function handles empty string values.
   Test Case: Provide an empty string as an operator background and check how the function handles it.

4. Scenario: Check if the function handles very long string values.
   Test Case: Provide a very long string as an operator background and check how the function handles it.

5. Scenario: Check if the function handles special character strings.
   Test Case: Provide a string with special characters (like "Telecom@123") as an operator background and check how the function handles it.

6. Scenario: Check if the function handles non-English character strings.
   Test Case: Provide a string with non-English characters (like "Телеком") as an operator background and check how the function handles it.

7. Scenario: Check if the function handles numeric strings.
   Test Case: Provide a numeric string (like "12345") as an operator background and check how the function handles it.

8. Scenario: Check if the function handles leading and trailing white spaces.
   Test Case: Provide a string with leading and trailing white spaces (like " Telecom ") as an operator background and check how the function handles it.

9. Scenario: Check if the function allows resetting the operator background.
   Test Case: Provide a valid string as an operator background, then provide a different string as the operator background and check if the function updates it.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Theme_setOperatorBackground_da7bed48d9_Test {

    private Theme theme;

    @BeforeEach
    public void setUp() {
        theme = new Theme();
    }

    @Test
    public void testSetOperatorBackground_validString() {
        String operatorBackground = "Telecom";
        theme.setOperatorBackground(operatorBackground);
        assertEquals(operatorBackground, theme.getOperatorBackground());
    }

    @Test
    public void testSetOperatorBackground_nullValue() {
        theme.setOperatorBackground(null);
        assertNull(theme.getOperatorBackground());
    }

    @Test
    public void testSetOperatorBackground_emptyString() {
        theme.setOperatorBackground("");
        assertEquals("", theme.getOperatorBackground());
    }

    @Test
    public void testSetOperatorBackground_longString() {
        String longString = "This is a very long string to test how the method handles such input";
        theme.setOperatorBackground(longString);
        assertEquals(longString, theme.getOperatorBackground());
    }

    @Test
    public void testSetOperatorBackground_specialCharacters() {
        String specialString = "Telecom@123";
        theme.setOperatorBackground(specialString);
        assertEquals(specialString, theme.getOperatorBackground());
    }

    @Test
    public void testSetOperatorBackground_nonEnglishCharacters() {
        String nonEnglishString = "Телеком";
        theme.setOperatorBackground(nonEnglishString);
        assertEquals(nonEnglishString, theme.getOperatorBackground());
    }

    @Test
    public void testSetOperatorBackground_numericString() {
        String numericString = "12345";
        theme.setOperatorBackground(numericString);
        assertEquals(numericString, theme.getOperatorBackground());
    }

    @Test
    public void testSetOperatorBackground_leadingAndTrailingSpaces() {
        String stringWithSpaces = " Telecom ";
        theme.setOperatorBackground(stringWithSpaces);
        assertEquals(stringWithSpaces, theme.getOperatorBackground());
    }

    @Test
    public void testSetOperatorBackground_resettingValue() {
        String firstValue = "Telecom";
        theme.setOperatorBackground(firstValue);
        assertEquals(firstValue, theme.getOperatorBackground());

        String secondValue = "Internet";
        theme.setOperatorBackground(secondValue);
        assertEquals(secondValue, theme.getOperatorBackground());
    }
}
