/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function accepts a valid string input.
   Test Case: Provide a valid string (like "Telecom") as an operator background and check if it's accepted and correctly set.

2. Scenario: Check if the function accepts an empty string.
   Test Case: Provide an empty string ("") as an operator background and check if it's accepted and correctly set.

3. Scenario: Check if the function accepts a string with special characters.
   Test Case: Provide a string with special characters (like "@#$%") as an operator background and check if it's accepted and correctly set.

4. Scenario: Check if the function accepts a string with numeric values.
   Test Case: Provide a string with numeric values (like "12345") as an operator background and check if it's accepted and correctly set.

5. Scenario: Check if the function accepts a null value.
   Test Case: Provide a null value as an operator background and check how the function handles it.

6. Scenario: Check if the function accepts a string with spaces.
   Test Case: Provide a string with spaces (like "  ") as an operator background and check if it's accepted and correctly set.

7. Scenario: Check if the function accepts a string with alphanumeric values.
   Test Case: Provide a string with alphanumeric values (like "abc123") as an operator background and check if it's accepted and correctly set.

8. Scenario: Check if the function accepts a very long string.
   Test Case: Provide a very long string as an operator background and check if it's accepted and correctly set.

9. Scenario: Check if the function maintains the case of the input string.
   Test Case: Provide a string with mixed case (like "AbC") as an operator background and check if the case is maintained when it's set.

10. Scenario: Check if the function accepts a string with unicode characters.
    Test Case: Provide a string with unicode characters as an operator background and check if it's accepted and correctly set.
*/
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Theme_setOperatorBackground_da7bed48d9_Test {

    @Test
    public void testSetOperatorBackgroundValidString() {
        Theme theme = new Theme();
        theme.setOperatorBackground("Telecom");
        assertEquals("Telecom", theme.getOperatorBackground());
    }

    @Test
    public void testSetOperatorBackgroundEmptyString() {
        Theme theme = new Theme();
        theme.setOperatorBackground("");
        assertEquals("", theme.getOperatorBackground());
    }

    @Test
    public void testSetOperatorBackgroundSpecialCharacters() {
        Theme theme = new Theme();
        theme.setOperatorBackground("@#$%");
        assertEquals("@#$%", theme.getOperatorBackground());
    }

    @Test
    public void testSetOperatorBackgroundNumericValues() {
        Theme theme = new Theme();
        theme.setOperatorBackground("12345");
        assertEquals("12345", theme.getOperatorBackground());
    }

    @Test
    public void testSetOperatorBackgroundNullValue() {
        Theme theme = new Theme();
        theme.setOperatorBackground(null);
        assertNull(theme.getOperatorBackground());
    }

    @Test
    public void testSetOperatorBackgroundSpaces() {
        Theme theme = new Theme();
        theme.setOperatorBackground("  ");
        assertEquals("  ", theme.getOperatorBackground());
    }

    @Test
    public void testSetOperatorBackgroundAlphanumericValues() {
        Theme theme = new Theme();
        theme.setOperatorBackground("abc123");
        assertEquals("abc123", theme.getOperatorBackground());
    }

    @Test
    public void testSetOperatorBackgroundLongString() {
        Theme theme = new Theme();
        String longString = new String(new char[10000]).replace("\0", "a");
        theme.setOperatorBackground(longString);
        assertEquals(longString, theme.getOperatorBackground());
    }

    @Test
    public void testSetOperatorBackgroundMixedCase() {
        Theme theme = new Theme();
        theme.setOperatorBackground("AbC");
        assertEquals("AbC", theme.getOperatorBackground());
    }

    @Test
    public void testSetOperatorBackgroundUnicodeCharacters() {
        Theme theme = new Theme();
        theme.setOperatorBackground("\u263A");
        assertEquals("\u263A", theme.getOperatorBackground());
    }
}
