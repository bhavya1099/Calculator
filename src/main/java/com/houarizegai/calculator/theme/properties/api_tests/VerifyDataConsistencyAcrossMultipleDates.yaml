# ********RoostGPT********

# Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 
# 
# ROOST_METHOD_HASH=6bf7bc56ab
# ROOST_METHOD_SIG_HASH=bc3085fe0d
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: Test API from Alphavantage.co',
#   background: null,
#   rule: null,
#   scenario: {
#     title: 'Scenario Outline: Verify data consistency across multiple dates',
#     steps: 'Given I have retrieved the daily time series data for AAPL stock\n' +
#       'When I check the data for "<date>"\n' +
#       'Then it should have all required fields\n' +
#       'And the values should be valid numbers',
#     examples: 'Examples:\n' +
#       '      | date       |\n' +
#       '      | 2024-07-09 |\n' +
#       '      | 2024-07-08 |\n' +
#       '      | 2024-07-05 |\n' +
#       '      | 2024-07-03 |\n' +
#       '      | 2024-07-02 |'
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 1
      arrivalRate: 1
  payload:
    path: "{{ROOST_CSV_FILE_NAME}}"
    fields:
      - "date"
    skipHeader: true
    delimiter: "^|^"

scenarios:
  - name: Verify data consistency across multiple dates for AAPL stock
    flow:
      - get:
          url: "/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=AAPL&apikey=demo"
          capture:
            - json: "$.['Time Series (Daily)']"
              as: "timeSeriesData"
      - function: "checkDataForDate"
        data: "{{ timeSeriesData['{{ date }}'] }}"
      - log: "Checking data for date: {{ date }}"
      - assert:
          - "{{ timeSeriesData['{{ date }}'] != null }}"
          - "{{ timeSeriesData['{{ date }}']['1. open'] != null }}"
          - "{{ timeSeriesData['{{ date }}']['2. high'] != null }}"
          - "{{ timeSeriesData['{{ date }}']['3. low'] != null }}"
          - "{{ timeSeriesData['{{ date }}']['4. close'] != null }}"
          - "{{ timeSeriesData['{{ date }}']['5. adjusted close'] != null }}"
          - "{{ timeSeriesData['{{ date }}']['6. volume'] != null }}"
          - "{{ timeSeriesData['{{ date }}']['7. dividend amount'] != null }}"
          - "{{ timeSeriesData['{{ date }}']['8. split coefficient'] != null }}"
      - function: "validateNumbers"
        data: "{{ timeSeriesData['{{ date }}'] }}"

functions:
  checkDataForDate:
    - function: "assert"
      arguments:
        - "data != null"
        - "Object.keys(data).length === 8"

  validateNumbers:
    - function: "assert"
      arguments:
        - "!isNaN(parseFloat(data['1. open']))"
        - "!isNaN(parseFloat(data['2. high']))"
        - "!isNaN(parseFloat(data['3. low']))"
        - "!isNaN(parseFloat(data['4. close']))"
        - "!isNaN(parseFloat(data['5. adjusted close']))"
        - "!isNaN(parseFloat(data['6. volume']))"
        - "!isNaN(parseFloat(data['7. dividend amount']))"
        - "!isNaN(parseFloat(data['8. split coefficient']))"
