# ********RoostGPT********

# Test generated by RoostGPT for test advancedReportTest using AI Type  and AI Model 
# 
# ROOST_METHOD_HASH=e08bba276c
# ROOST_METHOD_SIG_HASH=d36a499dac
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: Product API\r\n' +
#     '  As a user of the product API\r\n' +
#     '  I want to be able to perform CRUD operations on products\r\n' +
#     '  So that I can manage my products effectively',
#   background: 'Background:\r\n    Given the base URL is "http://localhost:8080"',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Create a new product',
#     steps: 'Given the client provides the following product data:\r\n' +
#       '      | name        | description              | price |\r\n' +
#       '      | Test Product | This is a test product. | 10.0  |\r\n' +
#       'When the client sends a POST request to "/api/products"\r\n' +
#       'Then the saved product should not be null and its properties must correspond to those provided by client',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  payload:
    path: "{{ROOST_CSV_FILE_NAME}}"
    fields:
      - "symbol"
      - "apikey"
      - "function"
    skipHeader: true
    delimiter: "^|^"

scenarios:
  - name: Query stock data
    flow:
      - get:
          url: "/query?symbol={{ symbol }}&apikey={{ apikey }}&function={{ function }}"
          expect:
            - statusCode: 200
            - hasProperty: "headers"
          capture:
            - json: "$.['Meta Data']"
              as: "metaData"
            - json: "$.['Time Series (Daily)']"
              as: "timeSeriesData"
      - log: "Received meta data: {{ metaData }}"
      - log: "Received time series data: {{ timeSeriesData }}"
      - think: 1
